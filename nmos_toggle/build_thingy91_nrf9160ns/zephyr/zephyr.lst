
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	20010798 	.word	0x20010798
    c004:	0000cfed 	.word	0x0000cfed
    c008:	0000fe9b 	.word	0x0000fe9b
    c00c:	0000d01d 	.word	0x0000d01d
    c010:	0000d01d 	.word	0x0000d01d
    c014:	0000d01d 	.word	0x0000d01d
    c018:	0000d01d 	.word	0x0000d01d
    c01c:	0000d01d 	.word	0x0000d01d
	...
    c02c:	0000cf49 	.word	0x0000cf49
    c030:	0000d01d 	.word	0x0000d01d
    c034:	00000000 	.word	0x00000000
    c038:	0000cef1 	.word	0x0000cef1
    c03c:	0000fe7b 	.word	0x0000fe7b

0000c040 <_irq_vector_table>:
    c040:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c050:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c060:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c070:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c080:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c090:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c0a0:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c0b0:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c0c0:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c0d0:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c0e0:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c0f0:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c100:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c110:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c120:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c130:	0000cfad 0000cfad 0000cfad 0000cfad     ................
    c140:	0000cfad                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00004b78 00000001 0000c000 0000c000     xK..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c23c <__aeabi_uldivmod>:
    c23c:	b953      	cbnz	r3, c254 <__aeabi_uldivmod+0x18>
    c23e:	b94a      	cbnz	r2, c254 <__aeabi_uldivmod+0x18>
    c240:	2900      	cmp	r1, #0
    c242:	bf08      	it	eq
    c244:	2800      	cmpeq	r0, #0
    c246:	bf1c      	itt	ne
    c248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c250:	f000 b970 	b.w	c534 <__aeabi_idiv0>
    c254:	f1ad 0c08 	sub.w	ip, sp, #8
    c258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c25c:	f000 f806 	bl	c26c <__udivmoddi4>
    c260:	f8dd e004 	ldr.w	lr, [sp, #4]
    c264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c268:	b004      	add	sp, #16
    c26a:	4770      	bx	lr

0000c26c <__udivmoddi4>:
    c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c270:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c272:	4604      	mov	r4, r0
    c274:	4689      	mov	r9, r1
    c276:	2b00      	cmp	r3, #0
    c278:	f040 8083 	bne.w	c382 <__udivmoddi4+0x116>
    c27c:	428a      	cmp	r2, r1
    c27e:	4615      	mov	r5, r2
    c280:	d945      	bls.n	c30e <__udivmoddi4+0xa2>
    c282:	fab2 f282 	clz	r2, r2
    c286:	b14a      	cbz	r2, c29c <__udivmoddi4+0x30>
    c288:	f1c2 0720 	rsb	r7, r2, #32
    c28c:	fa01 f302 	lsl.w	r3, r1, r2
    c290:	4095      	lsls	r5, r2
    c292:	4094      	lsls	r4, r2
    c294:	fa20 f707 	lsr.w	r7, r0, r7
    c298:	ea47 0903 	orr.w	r9, r7, r3
    c29c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c2a0:	0c23      	lsrs	r3, r4, #16
    c2a2:	fa1f f885 	uxth.w	r8, r5
    c2a6:	fbb9 fcfe 	udiv	ip, r9, lr
    c2aa:	fb0e 991c 	mls	r9, lr, ip, r9
    c2ae:	fb0c f108 	mul.w	r1, ip, r8
    c2b2:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    c2b6:	4299      	cmp	r1, r3
    c2b8:	d90a      	bls.n	c2d0 <__udivmoddi4+0x64>
    c2ba:	18eb      	adds	r3, r5, r3
    c2bc:	bf2c      	ite	cs
    c2be:	2001      	movcs	r0, #1
    c2c0:	2000      	movcc	r0, #0
    c2c2:	4299      	cmp	r1, r3
    c2c4:	d902      	bls.n	c2cc <__udivmoddi4+0x60>
    c2c6:	2800      	cmp	r0, #0
    c2c8:	f000 811d 	beq.w	c506 <__udivmoddi4+0x29a>
    c2cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c2d0:	1a59      	subs	r1, r3, r1
    c2d2:	b2a3      	uxth	r3, r4
    c2d4:	fbb1 f0fe 	udiv	r0, r1, lr
    c2d8:	fb0e 1110 	mls	r1, lr, r0, r1
    c2dc:	fb00 f808 	mul.w	r8, r0, r8
    c2e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c2e4:	45a0      	cmp	r8, r4
    c2e6:	d905      	bls.n	c2f4 <__udivmoddi4+0x88>
    c2e8:	192c      	adds	r4, r5, r4
    c2ea:	d202      	bcs.n	c2f2 <__udivmoddi4+0x86>
    c2ec:	45a0      	cmp	r8, r4
    c2ee:	f200 810e 	bhi.w	c50e <__udivmoddi4+0x2a2>
    c2f2:	3801      	subs	r0, #1
    c2f4:	eba4 0408 	sub.w	r4, r4, r8
    c2f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c2fc:	2700      	movs	r7, #0
    c2fe:	b11e      	cbz	r6, c308 <__udivmoddi4+0x9c>
    c300:	40d4      	lsrs	r4, r2
    c302:	2300      	movs	r3, #0
    c304:	e9c6 4300 	strd	r4, r3, [r6]
    c308:	4639      	mov	r1, r7
    c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c30e:	2a00      	cmp	r2, #0
    c310:	d051      	beq.n	c3b6 <__udivmoddi4+0x14a>
    c312:	fab2 f282 	clz	r2, r2
    c316:	2a00      	cmp	r2, #0
    c318:	f040 80af 	bne.w	c47a <__udivmoddi4+0x20e>
    c31c:	1b49      	subs	r1, r1, r5
    c31e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c322:	fa1f f885 	uxth.w	r8, r5
    c326:	2701      	movs	r7, #1
    c328:	0c23      	lsrs	r3, r4, #16
    c32a:	fbb1 fcfe 	udiv	ip, r1, lr
    c32e:	fb0e 111c 	mls	r1, lr, ip, r1
    c332:	fb08 f00c 	mul.w	r0, r8, ip
    c336:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c33a:	4298      	cmp	r0, r3
    c33c:	d90a      	bls.n	c354 <__udivmoddi4+0xe8>
    c33e:	18eb      	adds	r3, r5, r3
    c340:	bf2c      	ite	cs
    c342:	2101      	movcs	r1, #1
    c344:	2100      	movcc	r1, #0
    c346:	4298      	cmp	r0, r3
    c348:	d902      	bls.n	c350 <__udivmoddi4+0xe4>
    c34a:	2900      	cmp	r1, #0
    c34c:	f000 80d7 	beq.w	c4fe <__udivmoddi4+0x292>
    c350:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c354:	1a19      	subs	r1, r3, r0
    c356:	b2a3      	uxth	r3, r4
    c358:	fbb1 f0fe 	udiv	r0, r1, lr
    c35c:	fb0e 1110 	mls	r1, lr, r0, r1
    c360:	fb08 f800 	mul.w	r8, r8, r0
    c364:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c368:	45a0      	cmp	r8, r4
    c36a:	d905      	bls.n	c378 <__udivmoddi4+0x10c>
    c36c:	192c      	adds	r4, r5, r4
    c36e:	d202      	bcs.n	c376 <__udivmoddi4+0x10a>
    c370:	45a0      	cmp	r8, r4
    c372:	f200 80c1 	bhi.w	c4f8 <__udivmoddi4+0x28c>
    c376:	3801      	subs	r0, #1
    c378:	eba4 0408 	sub.w	r4, r4, r8
    c37c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c380:	e7bd      	b.n	c2fe <__udivmoddi4+0x92>
    c382:	428b      	cmp	r3, r1
    c384:	d908      	bls.n	c398 <__udivmoddi4+0x12c>
    c386:	2e00      	cmp	r6, #0
    c388:	d074      	beq.n	c474 <__udivmoddi4+0x208>
    c38a:	2700      	movs	r7, #0
    c38c:	e9c6 0100 	strd	r0, r1, [r6]
    c390:	4638      	mov	r0, r7
    c392:	4639      	mov	r1, r7
    c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c398:	fab3 f783 	clz	r7, r3
    c39c:	b967      	cbnz	r7, c3b8 <__udivmoddi4+0x14c>
    c39e:	428b      	cmp	r3, r1
    c3a0:	f0c0 80a4 	bcc.w	c4ec <__udivmoddi4+0x280>
    c3a4:	4282      	cmp	r2, r0
    c3a6:	f240 80a1 	bls.w	c4ec <__udivmoddi4+0x280>
    c3aa:	4638      	mov	r0, r7
    c3ac:	2e00      	cmp	r6, #0
    c3ae:	d0ab      	beq.n	c308 <__udivmoddi4+0x9c>
    c3b0:	e9c6 4900 	strd	r4, r9, [r6]
    c3b4:	e7a8      	b.n	c308 <__udivmoddi4+0x9c>
    c3b6:	deff      	udf	#255	; 0xff
    c3b8:	f1c7 0520 	rsb	r5, r7, #32
    c3bc:	40bb      	lsls	r3, r7
    c3be:	fa02 fc07 	lsl.w	ip, r2, r7
    c3c2:	fa01 f407 	lsl.w	r4, r1, r7
    c3c6:	40ea      	lsrs	r2, r5
    c3c8:	fa20 f805 	lsr.w	r8, r0, r5
    c3cc:	40e9      	lsrs	r1, r5
    c3ce:	fa00 fe07 	lsl.w	lr, r0, r7
    c3d2:	431a      	orrs	r2, r3
    c3d4:	ea48 0404 	orr.w	r4, r8, r4
    c3d8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c3dc:	0c20      	lsrs	r0, r4, #16
    c3de:	fa1f f982 	uxth.w	r9, r2
    c3e2:	fbb1 faf8 	udiv	sl, r1, r8
    c3e6:	fb08 111a 	mls	r1, r8, sl, r1
    c3ea:	fb0a fb09 	mul.w	fp, sl, r9
    c3ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    c3f2:	458b      	cmp	fp, r1
    c3f4:	d90a      	bls.n	c40c <__udivmoddi4+0x1a0>
    c3f6:	1851      	adds	r1, r2, r1
    c3f8:	bf2c      	ite	cs
    c3fa:	2301      	movcs	r3, #1
    c3fc:	2300      	movcc	r3, #0
    c3fe:	458b      	cmp	fp, r1
    c400:	d902      	bls.n	c408 <__udivmoddi4+0x19c>
    c402:	2b00      	cmp	r3, #0
    c404:	f000 8088 	beq.w	c518 <__udivmoddi4+0x2ac>
    c408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c40c:	eba1 010b 	sub.w	r1, r1, fp
    c410:	b2a4      	uxth	r4, r4
    c412:	fbb1 f0f8 	udiv	r0, r1, r8
    c416:	fb08 1110 	mls	r1, r8, r0, r1
    c41a:	fb00 f909 	mul.w	r9, r0, r9
    c41e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    c422:	4589      	cmp	r9, r1
    c424:	d904      	bls.n	c430 <__udivmoddi4+0x1c4>
    c426:	1851      	adds	r1, r2, r1
    c428:	d201      	bcs.n	c42e <__udivmoddi4+0x1c2>
    c42a:	4589      	cmp	r9, r1
    c42c:	d87b      	bhi.n	c526 <__udivmoddi4+0x2ba>
    c42e:	3801      	subs	r0, #1
    c430:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c434:	eba1 0109 	sub.w	r1, r1, r9
    c438:	fba0 890c 	umull	r8, r9, r0, ip
    c43c:	4549      	cmp	r1, r9
    c43e:	4644      	mov	r4, r8
    c440:	464b      	mov	r3, r9
    c442:	d302      	bcc.n	c44a <__udivmoddi4+0x1de>
    c444:	d106      	bne.n	c454 <__udivmoddi4+0x1e8>
    c446:	45c6      	cmp	lr, r8
    c448:	d204      	bcs.n	c454 <__udivmoddi4+0x1e8>
    c44a:	3801      	subs	r0, #1
    c44c:	ebb8 040c 	subs.w	r4, r8, ip
    c450:	eb69 0302 	sbc.w	r3, r9, r2
    c454:	2e00      	cmp	r6, #0
    c456:	d05d      	beq.n	c514 <__udivmoddi4+0x2a8>
    c458:	ebbe 0204 	subs.w	r2, lr, r4
    c45c:	eb61 0103 	sbc.w	r1, r1, r3
    c460:	fa01 f505 	lsl.w	r5, r1, r5
    c464:	fa22 f307 	lsr.w	r3, r2, r7
    c468:	40f9      	lsrs	r1, r7
    c46a:	2700      	movs	r7, #0
    c46c:	431d      	orrs	r5, r3
    c46e:	e9c6 5100 	strd	r5, r1, [r6]
    c472:	e749      	b.n	c308 <__udivmoddi4+0x9c>
    c474:	4637      	mov	r7, r6
    c476:	4630      	mov	r0, r6
    c478:	e746      	b.n	c308 <__udivmoddi4+0x9c>
    c47a:	f1c2 0020 	rsb	r0, r2, #32
    c47e:	4095      	lsls	r5, r2
    c480:	fa01 f702 	lsl.w	r7, r1, r2
    c484:	fa21 f300 	lsr.w	r3, r1, r0
    c488:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c48c:	fa24 f100 	lsr.w	r1, r4, r0
    c490:	fa1f f885 	uxth.w	r8, r5
    c494:	4094      	lsls	r4, r2
    c496:	4339      	orrs	r1, r7
    c498:	fbb3 f0fe 	udiv	r0, r3, lr
    c49c:	0c0f      	lsrs	r7, r1, #16
    c49e:	fb0e 3310 	mls	r3, lr, r0, r3
    c4a2:	fb00 fc08 	mul.w	ip, r0, r8
    c4a6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c4aa:	459c      	cmp	ip, r3
    c4ac:	d907      	bls.n	c4be <__udivmoddi4+0x252>
    c4ae:	18eb      	adds	r3, r5, r3
    c4b0:	bf2c      	ite	cs
    c4b2:	2701      	movcs	r7, #1
    c4b4:	2700      	movcc	r7, #0
    c4b6:	459c      	cmp	ip, r3
    c4b8:	d900      	bls.n	c4bc <__udivmoddi4+0x250>
    c4ba:	b38f      	cbz	r7, c520 <__udivmoddi4+0x2b4>
    c4bc:	3801      	subs	r0, #1
    c4be:	eba3 030c 	sub.w	r3, r3, ip
    c4c2:	b289      	uxth	r1, r1
    c4c4:	fbb3 f7fe 	udiv	r7, r3, lr
    c4c8:	fb0e 3317 	mls	r3, lr, r7, r3
    c4cc:	fb07 fc08 	mul.w	ip, r7, r8
    c4d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c4d4:	458c      	cmp	ip, r1
    c4d6:	d904      	bls.n	c4e2 <__udivmoddi4+0x276>
    c4d8:	1869      	adds	r1, r5, r1
    c4da:	d201      	bcs.n	c4e0 <__udivmoddi4+0x274>
    c4dc:	458c      	cmp	ip, r1
    c4de:	d825      	bhi.n	c52c <__udivmoddi4+0x2c0>
    c4e0:	3f01      	subs	r7, #1
    c4e2:	eba1 010c 	sub.w	r1, r1, ip
    c4e6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
    c4ea:	e71d      	b.n	c328 <__udivmoddi4+0xbc>
    c4ec:	1a84      	subs	r4, r0, r2
    c4ee:	eb61 0303 	sbc.w	r3, r1, r3
    c4f2:	2001      	movs	r0, #1
    c4f4:	4699      	mov	r9, r3
    c4f6:	e759      	b.n	c3ac <__udivmoddi4+0x140>
    c4f8:	3802      	subs	r0, #2
    c4fa:	442c      	add	r4, r5
    c4fc:	e73c      	b.n	c378 <__udivmoddi4+0x10c>
    c4fe:	f1ac 0c02 	sub.w	ip, ip, #2
    c502:	442b      	add	r3, r5
    c504:	e726      	b.n	c354 <__udivmoddi4+0xe8>
    c506:	f1ac 0c02 	sub.w	ip, ip, #2
    c50a:	442b      	add	r3, r5
    c50c:	e6e0      	b.n	c2d0 <__udivmoddi4+0x64>
    c50e:	3802      	subs	r0, #2
    c510:	442c      	add	r4, r5
    c512:	e6ef      	b.n	c2f4 <__udivmoddi4+0x88>
    c514:	4637      	mov	r7, r6
    c516:	e6f7      	b.n	c308 <__udivmoddi4+0x9c>
    c518:	f1aa 0a02 	sub.w	sl, sl, #2
    c51c:	4411      	add	r1, r2
    c51e:	e775      	b.n	c40c <__udivmoddi4+0x1a0>
    c520:	3802      	subs	r0, #2
    c522:	442b      	add	r3, r5
    c524:	e7cb      	b.n	c4be <__udivmoddi4+0x252>
    c526:	3802      	subs	r0, #2
    c528:	4411      	add	r1, r2
    c52a:	e781      	b.n	c430 <__udivmoddi4+0x1c4>
    c52c:	3f02      	subs	r7, #2
    c52e:	4429      	add	r1, r5
    c530:	e7d7      	b.n	c4e2 <__udivmoddi4+0x276>
    c532:	bf00      	nop

0000c534 <__aeabi_idiv0>:
    c534:	4770      	bx	lr
    c536:	bf00      	nop

0000c538 <toggle_nmos>:
#include <drivers/gpio.h>

static const struct device *gpio_dev;
static bool nmos_state = false;

void toggle_nmos() {
    c538:	b508      	push	{r3, lr}
    nmos_state = !nmos_state;
    c53a:	4b13      	ldr	r3, [pc, #76]	; (c588 <toggle_nmos+0x50>)
    c53c:	781a      	ldrb	r2, [r3, #0]
    c53e:	f082 0201 	eor.w	r2, r2, #1
    c542:	701a      	strb	r2, [r3, #0]

    if (nmos_state) {
    c544:	4b11      	ldr	r3, [pc, #68]	; (c58c <toggle_nmos+0x54>)
    c546:	6818      	ldr	r0, [r3, #0]
    c548:	68c3      	ldr	r3, [r0, #12]
    c54a:	681b      	ldr	r3, [r3, #0]
    c54c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    c550:	b172      	cbz	r2, c570 <toggle_nmos+0x38>

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    c552:	b953      	cbnz	r3, c56a <toggle_nmos+0x32>
	return api->port_set_bits_raw(port, pins);
    c554:	6883      	ldr	r3, [r0, #8]
    c556:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    c558:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c55c:	4798      	blx	r3
        // turn on 
        printk("Setting GPIO pin to 1, %d\n", gpio_pin_set(gpio_dev, 16, 1));
    c55e:	4601      	mov	r1, r0
    c560:	480b      	ldr	r0, [pc, #44]	; (c590 <toggle_nmos+0x58>)
    }
    else {
        // turn off
        printk("Setting GPIO pin to 0, %d\n", gpio_pin_set(gpio_dev, 16, 0));
    }
}
    c562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("Setting GPIO pin to 0, %d\n", gpio_pin_set(gpio_dev, 16, 0));
    c566:	f003 ba51 	b.w	fa0c <printk>
    c56a:	6883      	ldr	r3, [r0, #8]
    c56c:	691b      	ldr	r3, [r3, #16]
    c56e:	e7f3      	b.n	c558 <toggle_nmos+0x20>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    c570:	b13b      	cbz	r3, c582 <toggle_nmos+0x4a>
	return api->port_set_bits_raw(port, pins);
    c572:	6883      	ldr	r3, [r0, #8]
    c574:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    c576:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c57a:	4798      	blx	r3
    c57c:	4601      	mov	r1, r0
    c57e:	4805      	ldr	r0, [pc, #20]	; (c594 <toggle_nmos+0x5c>)
    c580:	e7ef      	b.n	c562 <toggle_nmos+0x2a>
    c582:	6883      	ldr	r3, [r0, #8]
    c584:	691b      	ldr	r3, [r3, #16]
    c586:	e7f6      	b.n	c576 <toggle_nmos+0x3e>
    c588:	20010390 	.word	0x20010390
    c58c:	20010248 	.word	0x20010248
    c590:	00010923 	.word	0x00010923
    c594:	0001093e 	.word	0x0001093e

0000c598 <main>:

void main(void)
{
    c598:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    c59a:	480c      	ldr	r0, [pc, #48]	; (c5cc <main+0x34>)
    c59c:	f002 fa98 	bl	ead0 <z_impl_device_get_binding>
    gpio_dev = device_get_binding("GPIO_0");
    c5a0:	4a0b      	ldr	r2, [pc, #44]	; (c5d0 <main+0x38>)
	struct gpio_driver_data *data =
    c5a2:	68c4      	ldr	r4, [r0, #12]
    c5a4:	6010      	str	r0, [r2, #0]
	return api->pin_configure(port, pin, flags);
    c5a6:	6883      	ldr	r3, [r0, #8]
    c5a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    c5ac:	681b      	ldr	r3, [r3, #0]
    c5ae:	2110      	movs	r1, #16
    c5b0:	4798      	blx	r3
	if (ret != 0) {
    c5b2:	b918      	cbnz	r0, c5bc <main+0x24>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    c5b4:	6823      	ldr	r3, [r4, #0]
    c5b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c5ba:	6023      	str	r3, [r4, #0]
    gpio_pin_configure(gpio_dev, 16, GPIO_OUTPUT);

    while (true) {
        toggle_nmos();
    c5bc:	f7ff ffbc 	bl	c538 <toggle_nmos>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    c5c0:	2100      	movs	r1, #0
    c5c2:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
    c5c6:	f002 fe7f 	bl	f2c8 <z_impl_k_sleep>
    c5ca:	e7f7      	b.n	c5bc <main+0x24>
    c5cc:	0001091c 	.word	0x0001091c
    c5d0:	20010248 	.word	0x20010248

0000c5d4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    c5d4:	680b      	ldr	r3, [r1, #0]
    c5d6:	3301      	adds	r3, #1
    c5d8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    c5da:	4b01      	ldr	r3, [pc, #4]	; (c5e0 <char_out+0xc>)
    c5dc:	681b      	ldr	r3, [r3, #0]
    c5de:	4718      	bx	r3
    c5e0:	20010000 	.word	0x20010000

0000c5e4 <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    c5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5e8:	b087      	sub	sp, #28
    c5ea:	460f      	mov	r7, r1
    c5ec:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
    c5ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    c5f0:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c5f2:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    c5f4:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    c5f6:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
    c5f8:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    c5fc:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    c600:	4c1c      	ldr	r4, [pc, #112]	; (c674 <print_digits.part.0+0x90>)
    c602:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c606:	ea50 0301 	orrs.w	r3, r0, r1
    c60a:	d11a      	bne.n	c642 <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
    c60c:	2d14      	cmp	r5, #20
		buf[i] = '0';
    c60e:	bf08      	it	eq
    c610:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c612:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    c614:	bf18      	it	ne
    c616:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c618:	442c      	add	r4, r5
		buf[i] = '0';
    c61a:	bf08      	it	eq
    c61c:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c620:	2c15      	cmp	r4, #21
    c622:	d017      	beq.n	c654 <print_digits.part.0+0x70>
    c624:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
    c626:	2c00      	cmp	r4, #0
    c628:	dc16      	bgt.n	c658 <print_digits.part.0+0x74>
		out(buf[i], ctx);
    c62a:	f81d 0005 	ldrb.w	r0, [sp, r5]
    c62e:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c630:	3501      	adds	r5, #1
		out(buf[i], ctx);
    c632:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    c634:	2d15      	cmp	r5, #21
    c636:	d1f8      	bne.n	c62a <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
    c638:	2c00      	cmp	r4, #0
    c63a:	dc15      	bgt.n	c668 <print_digits.part.0+0x84>
}
    c63c:	b007      	add	sp, #28
    c63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    c642:	4642      	mov	r2, r8
    c644:	464b      	mov	r3, r9
    c646:	f7ff fdf9 	bl	c23c <__aeabi_uldivmod>
    c64a:	5ca3      	ldrb	r3, [r4, r2]
    c64c:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    c650:	3d01      	subs	r5, #1
    c652:	e7d8      	b.n	c606 <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    c654:	2400      	movs	r4, #0
    c656:	e7e8      	b.n	c62a <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
    c658:	f1bb 0f00 	cmp.w	fp, #0
    c65c:	d0e5      	beq.n	c62a <print_digits.part.0+0x46>
		out(pad_char, ctx);
    c65e:	4639      	mov	r1, r7
    c660:	4650      	mov	r0, sl
    c662:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    c664:	3c01      	subs	r4, #1
    c666:	e7de      	b.n	c626 <print_digits.part.0+0x42>
		out(pad_char, ctx);
    c668:	4639      	mov	r1, r7
    c66a:	4650      	mov	r0, sl
    c66c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    c66e:	3c01      	subs	r4, #1
    c670:	e7e2      	b.n	c638 <print_digits.part.0+0x54>
    c672:	bf00      	nop
    c674:	00010959 	.word	0x00010959

0000c678 <__printk_hook_install>:
	_char_out = fn;
    c678:	4b01      	ldr	r3, [pc, #4]	; (c680 <__printk_hook_install+0x8>)
    c67a:	6018      	str	r0, [r3, #0]
}
    c67c:	4770      	bx	lr
    c67e:	bf00      	nop
    c680:	20010000 	.word	0x20010000

0000c684 <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
    c684:	2300      	movs	r3, #0
{
    c686:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    c688:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    c68a:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
    c68c:	4803      	ldr	r0, [pc, #12]	; (c69c <vprintk+0x18>)
    c68e:	460b      	mov	r3, r1
    c690:	a901      	add	r1, sp, #4
    c692:	f003 f8a7 	bl	f7e4 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    c696:	b003      	add	sp, #12
    c698:	f85d fb04 	ldr.w	pc, [sp], #4
    c69c:	0000c5d5 	.word	0x0000c5d5

0000c6a0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    c6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c6a4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    c6a8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    c6aa:	f019 0808 	ands.w	r8, r9, #8
    c6ae:	d00d      	beq.n	c6cc <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
    c6b0:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    c6b2:	bf0c      	ite	eq
    c6b4:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    c6b8:	f049 0920 	orrne.w	r9, r9, #32
    c6bc:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    c6c0:	f382 8811 	msr	BASEPRI, r2
    c6c4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    c6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c6cc:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    c6d0:	2902      	cmp	r1, #2
    c6d2:	d107      	bne.n	c6e4 <process_event+0x44>
			evt = process_recheck(mgr);
    c6d4:	4620      	mov	r0, r4
    c6d6:	f003 f9a6 	bl	fa26 <process_recheck>
		if (evt == EVT_NOP) {
    c6da:	2800      	cmp	r0, #0
    c6dc:	d0f0      	beq.n	c6c0 <process_event+0x20>
		if (evt == EVT_COMPLETE) {
    c6de:	2801      	cmp	r0, #1
    c6e0:	8b23      	ldrh	r3, [r4, #24]
    c6e2:	d14a      	bne.n	c77a <process_event+0xda>
			res = mgr->last_res;
    c6e4:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c6e6:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
    c6e8:	2f00      	cmp	r7, #0
    c6ea:	da15      	bge.n	c718 <process_event+0x78>
		*clients = mgr->clients;
    c6ec:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    c6ee:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c6f2:	f023 0307 	bic.w	r3, r3, #7
    c6f6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    c6fa:	8323      	strh	r3, [r4, #24]
		onoff_transition_fn transit = NULL;
    c6fc:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    c6fe:	8b23      	ldrh	r3, [r4, #24]
    c700:	f003 0a07 	and.w	sl, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    c704:	45ca      	cmp	sl, r9
    c706:	d002      	beq.n	c70e <process_event+0x6e>
		if (do_monitors
    c708:	68a1      	ldr	r1, [r4, #8]
    c70a:	2900      	cmp	r1, #0
    c70c:	d156      	bne.n	c7bc <process_event+0x11c>
		    || !sys_slist_is_empty(&clients)
    c70e:	b90d      	cbnz	r5, c714 <process_event+0x74>
		    || (transit != NULL)) {
    c710:	2e00      	cmp	r6, #0
    c712:	d06d      	beq.n	c7f0 <process_event+0x150>
    c714:	2100      	movs	r1, #0
    c716:	e052      	b.n	c7be <process_event+0x11e>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c718:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    c71c:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    c71e:	2801      	cmp	r0, #1
    c720:	d81c      	bhi.n	c75c <process_event+0xbc>
		*clients = mgr->clients;
    c722:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    c726:	2906      	cmp	r1, #6
		*clients = mgr->clients;
    c728:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    c72a:	b29b      	uxth	r3, r3
	list->tail = NULL;
    c72c:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    c730:	d10a      	bne.n	c748 <process_event+0xa8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c732:	b13d      	cbz	r5, c744 <process_event+0xa4>
    c734:	4628      	mov	r0, r5
    c736:	8b61      	ldrh	r1, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c738:	6800      	ldr	r0, [r0, #0]
				mgr->refs += 1U;
    c73a:	3101      	adds	r1, #1
    c73c:	b289      	uxth	r1, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    c73e:	2800      	cmp	r0, #0
    c740:	d1fa      	bne.n	c738 <process_event+0x98>
    c742:	8361      	strh	r1, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c744:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    c748:	8323      	strh	r3, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    c74a:	4620      	mov	r0, r4
    c74c:	f003 f96b 	bl	fa26 <process_recheck>
    c750:	2800      	cmp	r0, #0
    c752:	d0d3      	beq.n	c6fc <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c754:	8b23      	ldrh	r3, [r4, #24]
    c756:	f043 0320 	orr.w	r3, r3, #32
    c75a:	e7ce      	b.n	c6fa <process_event+0x5a>
	} else if (state == ONOFF_STATE_TO_OFF) {
    c75c:	2904      	cmp	r1, #4
    c75e:	d10a      	bne.n	c776 <process_event+0xd6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c760:	f023 0307 	bic.w	r3, r3, #7
    c764:	b299      	uxth	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    c766:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    c768:	4620      	mov	r0, r4
    c76a:	f003 f95c 	bl	fa26 <process_recheck>
    c76e:	b110      	cbz	r0, c776 <process_event+0xd6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    c770:	f041 0120 	orr.w	r1, r1, #32
    c774:	8321      	strh	r1, [r4, #24]
    c776:	2500      	movs	r5, #0
    c778:	e7c0      	b.n	c6fc <process_event+0x5c>
		} else if (evt == EVT_START) {
    c77a:	2803      	cmp	r0, #3
    c77c:	d109      	bne.n	c792 <process_event+0xf2>
			transit = mgr->transitions->start;
    c77e:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c780:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    c784:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c786:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    c78a:	2500      	movs	r5, #0
    c78c:	8323      	strh	r3, [r4, #24]
		res = 0;
    c78e:	462f      	mov	r7, r5
    c790:	e7b5      	b.n	c6fe <process_event+0x5e>
		} else if (evt == EVT_STOP) {
    c792:	2804      	cmp	r0, #4
    c794:	d106      	bne.n	c7a4 <process_event+0x104>
			transit = mgr->transitions->stop;
    c796:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c798:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    c79c:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c79e:	f043 0304 	orr.w	r3, r3, #4
    c7a2:	e7f2      	b.n	c78a <process_event+0xea>
		} else if (evt == EVT_RESET) {
    c7a4:	2805      	cmp	r0, #5
    c7a6:	d106      	bne.n	c7b6 <process_event+0x116>
			transit = mgr->transitions->reset;
    c7a8:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c7aa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    c7ae:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    c7b0:	f043 0305 	orr.w	r3, r3, #5
    c7b4:	e7e9      	b.n	c78a <process_event+0xea>
    c7b6:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    c7b8:	462e      	mov	r6, r5
    c7ba:	e7e8      	b.n	c78e <process_event+0xee>
				   && !sys_slist_is_empty(&mgr->monitors);
    c7bc:	2101      	movs	r1, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    c7be:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    c7c2:	8323      	strh	r3, [r4, #24]
    c7c4:	f382 8811 	msr	BASEPRI, r2
    c7c8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    c7cc:	b9f9      	cbnz	r1, c80e <process_event+0x16e>
	while (!sys_slist_is_empty(list)) {
    c7ce:	bb85      	cbnz	r5, c832 <process_event+0x192>
			if (transit != NULL) {
    c7d0:	b116      	cbz	r6, c7d8 <process_event+0x138>
				transit(mgr, transition_complete);
    c7d2:	4921      	ldr	r1, [pc, #132]	; (c858 <process_event+0x1b8>)
    c7d4:	4620      	mov	r0, r4
    c7d6:	47b0      	blx	r6
	__asm__ volatile(
    c7d8:	f04f 0320 	mov.w	r3, #32
    c7dc:	f3ef 8211 	mrs	r2, BASEPRI
    c7e0:	f383 8811 	msr	BASEPRI, r3
    c7e4:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    c7e8:	8b23      	ldrh	r3, [r4, #24]
    c7ea:	f023 0308 	bic.w	r3, r3, #8
    c7ee:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    c7f0:	8b23      	ldrh	r3, [r4, #24]
    c7f2:	06d9      	lsls	r1, r3, #27
    c7f4:	d527      	bpl.n	c846 <process_event+0x1a6>
			evt = EVT_COMPLETE;
    c7f6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    c7f8:	f023 0310 	bic.w	r3, r3, #16
    c7fc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    c7fe:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    c802:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    c806:	2900      	cmp	r1, #0
    c808:	f47f af62 	bne.w	c6d0 <process_event+0x30>
out:
    c80c:	e758      	b.n	c6c0 <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    c80e:	68a1      	ldr	r1, [r4, #8]
    c810:	2900      	cmp	r1, #0
    c812:	d0dc      	beq.n	c7ce <process_event+0x12e>
    c814:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    c818:	f8d1 b004 	ldr.w	fp, [r1, #4]
    c81c:	463b      	mov	r3, r7
    c81e:	4652      	mov	r2, sl
    c820:	4620      	mov	r0, r4
    c822:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    c824:	f1b9 0f00 	cmp.w	r9, #0
    c828:	d0d1      	beq.n	c7ce <process_event+0x12e>
    c82a:	4649      	mov	r1, r9
    c82c:	f8d9 9000 	ldr.w	r9, [r9]
    c830:	e7f2      	b.n	c818 <process_event+0x178>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c832:	f8d5 9000 	ldr.w	r9, [r5]
		notify_one(mgr, cli, state, res);
    c836:	4629      	mov	r1, r5
    c838:	463b      	mov	r3, r7
    c83a:	4652      	mov	r2, sl
    c83c:	4620      	mov	r0, r4
    c83e:	f003 f90e 	bl	fa5e <notify_one>
	while (!sys_slist_is_empty(list)) {
    c842:	464d      	mov	r5, r9
    c844:	e7c3      	b.n	c7ce <process_event+0x12e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    c846:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    c84a:	bf1e      	ittt	ne
    c84c:	f023 0320 	bicne.w	r3, r3, #32
    c850:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    c852:	2102      	movne	r1, #2
    c854:	e7d3      	b.n	c7fe <process_event+0x15e>
    c856:	bf00      	nop
    c858:	0000fa8b 	.word	0x0000fa8b

0000c85c <nordicsemi_nrf91_init>:
    c85c:	f04f 0220 	mov.w	r2, #32
    c860:	f3ef 8311 	mrs	r3, BASEPRI
    c864:	f382 8811 	msr	BASEPRI, r2
    c868:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    c86c:	2101      	movs	r1, #1
    c86e:	4a04      	ldr	r2, [pc, #16]	; (c880 <nordicsemi_nrf91_init+0x24>)
    c870:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    c874:	f383 8811 	msr	BASEPRI, r3
    c878:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c87c:	2000      	movs	r0, #0
    c87e:	4770      	bx	lr
    c880:	40039000 	.word	0x40039000

0000c884 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    c884:	b120      	cbz	r0, c890 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    c886:	4b03      	ldr	r3, [pc, #12]	; (c894 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    c888:	0180      	lsls	r0, r0, #6
    c88a:	f043 0301 	orr.w	r3, r3, #1
    c88e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    c890:	4770      	bx	lr
    c892:	bf00      	nop
    c894:	00010800 	.word	0x00010800

0000c898 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    c898:	b510      	push	{r4, lr}
    c89a:	4807      	ldr	r0, [pc, #28]	; (c8b8 <uart_console_init+0x20>)
    c89c:	f002 f918 	bl	ead0 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    c8a0:	4c06      	ldr	r4, [pc, #24]	; (c8bc <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    c8a2:	4b07      	ldr	r3, [pc, #28]	; (c8c0 <uart_console_init+0x28>)
    c8a4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    c8a6:	4620      	mov	r0, r4
    c8a8:	f000 fe64 	bl	d574 <__stdout_hook_install>
	__printk_hook_install(console_out);
    c8ac:	4620      	mov	r0, r4
    c8ae:	f7ff fee3 	bl	c678 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    c8b2:	2000      	movs	r0, #0
    c8b4:	bd10      	pop	{r4, pc}
    c8b6:	bf00      	nop
    c8b8:	0001096a 	.word	0x0001096a
    c8bc:	0000c8c5 	.word	0x0000c8c5
    c8c0:	2001024c 	.word	0x2001024c

0000c8c4 <console_out>:
	if ('\n' == c) {
    c8c4:	280a      	cmp	r0, #10
{
    c8c6:	b538      	push	{r3, r4, r5, lr}
    c8c8:	4604      	mov	r4, r0
    c8ca:	4d07      	ldr	r5, [pc, #28]	; (c8e8 <console_out+0x24>)
	if ('\n' == c) {
    c8cc:	d104      	bne.n	c8d8 <console_out+0x14>
    c8ce:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    c8d0:	6883      	ldr	r3, [r0, #8]
    c8d2:	210d      	movs	r1, #13
    c8d4:	685b      	ldr	r3, [r3, #4]
    c8d6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    c8d8:	6828      	ldr	r0, [r5, #0]
    c8da:	6883      	ldr	r3, [r0, #8]
    c8dc:	b2e1      	uxtb	r1, r4
    c8de:	685b      	ldr	r3, [r3, #4]
    c8e0:	4798      	blx	r3
}
    c8e2:	4620      	mov	r0, r4
    c8e4:	bd38      	pop	{r3, r4, r5, pc}
    c8e6:	bf00      	nop
    c8e8:	2001024c 	.word	0x2001024c

0000c8ec <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    c8ec:	4a0e      	ldr	r2, [pc, #56]	; (c928 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c8ee:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    c8f0:	1a84      	subs	r4, r0, r2
{
    c8f2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    c8f4:	200c      	movs	r0, #12
{
    c8f6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    c8f8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    c8fa:	10a3      	asrs	r3, r4, #2
    c8fc:	4c0b      	ldr	r4, [pc, #44]	; (c92c <onoff_stop+0x40>)
    c8fe:	435c      	muls	r4, r3
    c900:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    c902:	fb00 2004 	mla	r0, r0, r4, r2
    c906:	4408      	add	r0, r1
    c908:	f003 fa29 	bl	fd5e <set_off_state>
	if (err < 0) {
    c90c:	1e01      	subs	r1, r0, #0
    c90e:	db05      	blt.n	c91c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    c910:	4b07      	ldr	r3, [pc, #28]	; (c930 <onoff_stop+0x44>)
    c912:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    c916:	6863      	ldr	r3, [r4, #4]
    c918:	4798      	blx	r3
	return 0;
    c91a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    c91c:	4628      	mov	r0, r5
    c91e:	4633      	mov	r3, r6
}
    c920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    c924:	4718      	bx	r3
    c926:	bf00      	nop
    c928:	20010260 	.word	0x20010260
    c92c:	b6db6db7 	.word	0xb6db6db7
    c930:	0001081c 	.word	0x0001081c

0000c934 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    c934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    c938:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    c93a:	4e10      	ldr	r6, [pc, #64]	; (c97c <onoff_start+0x48>)
{
    c93c:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
    c93e:	1b84      	subs	r4, r0, r6
    c940:	10a3      	asrs	r3, r4, #2
    c942:	4c0f      	ldr	r4, [pc, #60]	; (c980 <onoff_start+0x4c>)
{
    c944:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
    c946:	435c      	muls	r4, r3
    c948:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    c94a:	4365      	muls	r5, r4
    c94c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    c950:	2140      	movs	r1, #64	; 0x40
    c952:	4430      	add	r0, r6
    c954:	f003 fa1c 	bl	fd90 <set_starting_state>
	if (err < 0) {
    c958:	1e01      	subs	r1, r0, #0
    c95a:	db09      	blt.n	c970 <onoff_start+0x3c>
	subdata->cb = data->cb;
    c95c:	4a09      	ldr	r2, [pc, #36]	; (c984 <onoff_start+0x50>)
    c95e:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
    c960:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    c964:	4b08      	ldr	r3, [pc, #32]	; (c988 <onoff_start+0x54>)
    c966:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    c96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    c96e:	4718      	bx	r3
		notify(mgr, err);
    c970:	4640      	mov	r0, r8
    c972:	463b      	mov	r3, r7
}
    c974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    c978:	4718      	bx	r3
    c97a:	bf00      	nop
    c97c:	20010260 	.word	0x20010260
    c980:	b6db6db7 	.word	0xb6db6db7
    c984:	0000fdf3 	.word	0x0000fdf3
    c988:	0001081c 	.word	0x0001081c

0000c98c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    c98c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c98e:	2200      	movs	r2, #0
    c990:	2101      	movs	r1, #1
{
    c992:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    c994:	2005      	movs	r0, #5
    c996:	f000 fa3b 	bl	ce10 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    c99a:	2005      	movs	r0, #5
    c99c:	f000 fa1a 	bl	cdd4 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    c9a0:	480f      	ldr	r0, [pc, #60]	; (c9e0 <clk_init+0x54>)
    c9a2:	f001 fb93 	bl	e0cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    c9a6:	4b0f      	ldr	r3, [pc, #60]	; (c9e4 <clk_init+0x58>)
    c9a8:	4298      	cmp	r0, r3
    c9aa:	d115      	bne.n	c9d8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    c9ac:	f003 fc72 	bl	10294 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    c9b0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    c9b2:	490d      	ldr	r1, [pc, #52]	; (c9e8 <clk_init+0x5c>)
    c9b4:	4630      	mov	r0, r6
    c9b6:	f003 f885 	bl	fac4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    c9ba:	2800      	cmp	r0, #0
    c9bc:	db0b      	blt.n	c9d6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c9be:	2501      	movs	r5, #1
    c9c0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    c9c2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    c9c4:	4908      	ldr	r1, [pc, #32]	; (c9e8 <clk_init+0x5c>)
    c9c6:	f104 001c 	add.w	r0, r4, #28
    c9ca:	f003 f87b 	bl	fac4 <onoff_manager_init>
		if (err < 0) {
    c9ce:	2800      	cmp	r0, #0
    c9d0:	db01      	blt.n	c9d6 <clk_init+0x4a>
	}

	return 0;
    c9d2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    c9d4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    c9d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    c9d8:	f06f 0004 	mvn.w	r0, #4
    c9dc:	e7fb      	b.n	c9d6 <clk_init+0x4a>
    c9de:	bf00      	nop
    c9e0:	0000ca85 	.word	0x0000ca85
    c9e4:	0bad0000 	.word	0x0bad0000
    c9e8:	0001082c 	.word	0x0001082c

0000c9ec <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
    c9ec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    c9ee:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    c9f0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    c9f2:	434b      	muls	r3, r1
    c9f4:	4808      	ldr	r0, [pc, #32]	; (ca18 <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
    c9f6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    c9f8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    c9fa:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    c9fc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    ca00:	4418      	add	r0, r3
	sub_data->cb = NULL;
    ca02:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    ca04:	f003 f9e2 	bl	fdcc <set_on_state>
	if (callback) {
    ca08:	b12d      	cbz	r5, ca16 <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    ca0a:	4632      	mov	r2, r6
    ca0c:	462b      	mov	r3, r5
}
    ca0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    ca12:	4802      	ldr	r0, [pc, #8]	; (ca1c <clkstarted_handle.constprop.10+0x30>)
    ca14:	4718      	bx	r3
}
    ca16:	bd70      	pop	{r4, r5, r6, pc}
    ca18:	20010260 	.word	0x20010260
    ca1c:	200100c8 	.word	0x200100c8

0000ca20 <generic_hfclk_start>:
{
    ca20:	b508      	push	{r3, lr}
	__asm__ volatile(
    ca22:	f04f 0320 	mov.w	r3, #32
    ca26:	f3ef 8111 	mrs	r1, BASEPRI
    ca2a:	f383 8811 	msr	BASEPRI, r3
    ca2e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    ca32:	4a11      	ldr	r2, [pc, #68]	; (ca78 <generic_hfclk_start+0x58>)
    ca34:	6813      	ldr	r3, [r2, #0]
    ca36:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    ca3a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    ca3e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    ca40:	d00b      	beq.n	ca5a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ca42:	4a0e      	ldr	r2, [pc, #56]	; (ca7c <generic_hfclk_start+0x5c>)
    ca44:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ca48:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    ca4c:	f013 0301 	ands.w	r3, r3, #1
    ca50:	d003      	beq.n	ca5a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    ca52:	480b      	ldr	r0, [pc, #44]	; (ca80 <generic_hfclk_start+0x60>)
    ca54:	f003 f9ba 	bl	fdcc <set_on_state>
			already_started = true;
    ca58:	2301      	movs	r3, #1
	__asm__ volatile(
    ca5a:	f381 8811 	msr	BASEPRI, r1
    ca5e:	f3bf 8f6f 	isb	sy
	if (already_started) {
    ca62:	b123      	cbz	r3, ca6e <generic_hfclk_start+0x4e>
}
    ca64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    ca68:	2000      	movs	r0, #0
    ca6a:	f7ff bfbf 	b.w	c9ec <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ca6e:	2001      	movs	r0, #1
}
    ca70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ca74:	f001 bb3a 	b.w	e0ec <nrfx_clock_start>
    ca78:	200102b0 	.word	0x200102b0
    ca7c:	40005000 	.word	0x40005000
    ca80:	200102a0 	.word	0x200102a0

0000ca84 <clock_event_handler>:
	switch (event) {
    ca84:	b110      	cbz	r0, ca8c <clock_event_handler+0x8>
    ca86:	2801      	cmp	r0, #1
    ca88:	d004      	beq.n	ca94 <clock_event_handler+0x10>
    ca8a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    ca8c:	4b03      	ldr	r3, [pc, #12]	; (ca9c <clock_event_handler+0x18>)
    ca8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ca90:	075b      	lsls	r3, r3, #29
    ca92:	d101      	bne.n	ca98 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    ca94:	f7ff bfaa 	b.w	c9ec <clkstarted_handle.constprop.10>
}
    ca98:	4770      	bx	lr
    ca9a:	bf00      	nop
    ca9c:	20010260 	.word	0x20010260

0000caa0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    caa0:	4b07      	ldr	r3, [pc, #28]	; (cac0 <generic_hfclk_stop+0x20>)
    caa2:	e8d3 2fef 	ldaex	r2, [r3]
    caa6:	f022 0102 	bic.w	r1, r2, #2
    caaa:	e8c3 1fe0 	stlex	r0, r1, [r3]
    caae:	2800      	cmp	r0, #0
    cab0:	d1f7      	bne.n	caa2 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    cab2:	07d3      	lsls	r3, r2, #31
    cab4:	d402      	bmi.n	cabc <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    cab6:	2001      	movs	r0, #1
    cab8:	f001 bb4a 	b.w	e150 <nrfx_clock_stop>
}
    cabc:	4770      	bx	lr
    cabe:	bf00      	nop
    cac0:	200102b0 	.word	0x200102b0

0000cac4 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cac4:	2300      	movs	r3, #0
    cac6:	2201      	movs	r2, #1
{
    cac8:	b510      	push	{r4, lr}
    caca:	b088      	sub	sp, #32
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cacc:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    cad0:	9301      	str	r3, [sp, #4]
    cad2:	4b09      	ldr	r3, [pc, #36]	; (caf8 <api_blocking_start+0x34>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cad4:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    cad6:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    cad8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    cadc:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    cae0:	f003 f9ad 	bl	fe3e <api_start>
	if (err < 0) {
    cae4:	2800      	cmp	r0, #0
    cae6:	db05      	blt.n	caf4 <api_blocking_start+0x30>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    cae8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    caec:	2300      	movs	r3, #0
    caee:	4620      	mov	r0, r4
    caf0:	f002 fc30 	bl	f354 <z_impl_k_sem_take>
}
    caf4:	b008      	add	sp, #32
    caf6:	bd10      	pop	{r4, pc}
    caf8:	0000fe05 	.word	0x0000fe05

0000cafc <z_nrf_clock_control_lf_on>:
{
    cafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    cb00:	2201      	movs	r2, #1
    cb02:	4606      	mov	r6, r0
    cb04:	4934      	ldr	r1, [pc, #208]	; (cbd8 <z_nrf_clock_control_lf_on+0xdc>)
    cb06:	e8d1 3fef 	ldaex	r3, [r1]
    cb0a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    cb0e:	2800      	cmp	r0, #0
    cb10:	d1f9      	bne.n	cb06 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    cb12:	b933      	cbnz	r3, cb22 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    cb14:	4931      	ldr	r1, [pc, #196]	; (cbdc <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    cb16:	4832      	ldr	r0, [pc, #200]	; (cbe0 <z_nrf_clock_control_lf_on+0xe4>)
    cb18:	604b      	str	r3, [r1, #4]
    cb1a:	60cb      	str	r3, [r1, #12]
    cb1c:	608a      	str	r2, [r1, #8]
    cb1e:	f002 ffe4 	bl	faea <onoff_request>
	switch (start_mode) {
    cb22:	1e73      	subs	r3, r6, #1
    cb24:	2b01      	cmp	r3, #1
    cb26:	d82c      	bhi.n	cb82 <z_nrf_clock_control_lf_on+0x86>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    cb28:	2e01      	cmp	r6, #1
    cb2a:	d106      	bne.n	cb3a <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    cb2c:	4b2d      	ldr	r3, [pc, #180]	; (cbe4 <z_nrf_clock_control_lf_on+0xe8>)
    cb2e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    cb32:	f003 0303 	and.w	r3, r3, #3
    cb36:	2b02      	cmp	r3, #2
    cb38:	d023      	beq.n	cb82 <z_nrf_clock_control_lf_on+0x86>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    cb3a:	f003 fca9 	bl	10490 <k_is_in_isr>
    cb3e:	b918      	cbnz	r0, cb48 <z_nrf_clock_control_lf_on+0x4c>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    cb40:	4b29      	ldr	r3, [pc, #164]	; (cbe8 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    cb42:	781b      	ldrb	r3, [r3, #0]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d140      	bne.n	cbca <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    cb48:	f04f 0320 	mov.w	r3, #32
    cb4c:	f3ef 8911 	mrs	r9, BASEPRI
    cb50:	f383 8811 	msr	BASEPRI, r3
    cb54:	f3bf 8f6f 	isb	sy
    cb58:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cb5a:	4d22      	ldr	r5, [pc, #136]	; (cbe4 <z_nrf_clock_control_lf_on+0xe8>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cb5c:	4f23      	ldr	r7, [pc, #140]	; (cbec <z_nrf_clock_control_lf_on+0xf0>)
    cb5e:	46a8      	mov	r8, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cb60:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cb64:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    cb68:	03d2      	lsls	r2, r2, #15
    cb6a:	d50c      	bpl.n	cb86 <z_nrf_clock_control_lf_on+0x8a>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    cb6c:	f003 0303 	and.w	r3, r3, #3
    cb70:	2b02      	cmp	r3, #2
    cb72:	d001      	beq.n	cb78 <z_nrf_clock_control_lf_on+0x7c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    cb74:	2e01      	cmp	r6, #1
    cb76:	d106      	bne.n	cb86 <z_nrf_clock_control_lf_on+0x8a>
	if (isr_mode) {
    cb78:	b31c      	cbz	r4, cbc2 <z_nrf_clock_control_lf_on+0xc6>
	__asm__ volatile(
    cb7a:	f389 8811 	msr	BASEPRI, r9
    cb7e:	f3bf 8f6f 	isb	sy
}
    cb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    cb86:	b1bc      	cbz	r4, cbb8 <z_nrf_clock_control_lf_on+0xbc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    cb88:	4648      	mov	r0, r9
    cb8a:	f000 fa01 	bl	cf90 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    cb8e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    cb92:	b2db      	uxtb	r3, r3
    cb94:	2b01      	cmp	r3, #1
    cb96:	d1e3      	bne.n	cb60 <z_nrf_clock_control_lf_on+0x64>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    cb98:	683a      	ldr	r2, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    cb9a:	2a00      	cmp	r2, #0
    cb9c:	d0e0      	beq.n	cb60 <z_nrf_clock_control_lf_on+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cb9e:	2200      	movs	r2, #0
    cba0:	603a      	str	r2, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    cba2:	683a      	ldr	r2, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    cba4:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cba6:	2120      	movs	r1, #32
    cba8:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    cbac:	4a10      	ldr	r2, [pc, #64]	; (cbf0 <z_nrf_clock_control_lf_on+0xf4>)
    cbae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cbb2:	4a10      	ldr	r2, [pc, #64]	; (cbf4 <z_nrf_clock_control_lf_on+0xf8>)
    cbb4:	6013      	str	r3, [r2, #0]
    cbb6:	e7d3      	b.n	cb60 <z_nrf_clock_control_lf_on+0x64>
	return z_impl_k_sleep(timeout);
    cbb8:	2100      	movs	r1, #0
    cbba:	2021      	movs	r0, #33	; 0x21
    cbbc:	f002 fb84 	bl	f2c8 <z_impl_k_sleep>
    cbc0:	e7e5      	b.n	cb8e <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENSET = mask;
    cbc2:	2302      	movs	r3, #2
    cbc4:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
		__ASSERT_NO_MSG(false);
    cbc8:	e7db      	b.n	cb82 <z_nrf_clock_control_lf_on+0x86>
    p_reg->INTENCLR = mask;
    cbca:	2202      	movs	r2, #2
    cbcc:	4b05      	ldr	r3, [pc, #20]	; (cbe4 <z_nrf_clock_control_lf_on+0xe8>)
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    cbce:	4604      	mov	r4, r0
    cbd0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    cbd4:	4681      	mov	r9, r0
    cbd6:	e7c0      	b.n	cb5a <z_nrf_clock_control_lf_on+0x5e>
    cbd8:	200102b4 	.word	0x200102b4
    cbdc:	20010250 	.word	0x20010250
    cbe0:	2001027c 	.word	0x2001027c
    cbe4:	40005000 	.word	0x40005000
    cbe8:	20010393 	.word	0x20010393
    cbec:	40005104 	.word	0x40005104
    cbf0:	e000e100 	.word	0xe000e100
    cbf4:	40005008 	.word	0x40005008

0000cbf8 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    cbf8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    cbfa:	4b08      	ldr	r3, [pc, #32]	; (cc1c <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    cbfc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    cc00:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    cc04:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    cc08:	4290      	cmp	r0, r2
    cc0a:	d100      	bne.n	cc0e <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    cc0c:	4770      	bx	lr
    cc0e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    cc12:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    cc14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    cc18:	e7f2      	b.n	cc00 <handle_next_cycle_case+0x8>
    cc1a:	bf00      	nop
    cc1c:	40015000 	.word	0x40015000

0000cc20 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cc20:	2200      	movs	r2, #0
    cc22:	4b07      	ldr	r3, [pc, #28]	; (cc40 <rtc_nrf_isr+0x20>)
    cc24:	601a      	str	r2, [r3, #0]
    cc26:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    cc28:	4a06      	ldr	r2, [pc, #24]	; (cc44 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    cc2a:	4b07      	ldr	r3, [pc, #28]	; (cc48 <rtc_nrf_isr+0x28>)
    cc2c:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    cc30:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    cc32:	1ac0      	subs	r0, r0, r3
    cc34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    cc38:	4403      	add	r3, r0
    cc3a:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    cc3c:	f002 bd16 	b.w	f66c <z_clock_announce>
    cc40:	40015140 	.word	0x40015140
    cc44:	200102b8 	.word	0x200102b8
    cc48:	40015000 	.word	0x40015000

0000cc4c <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    cc4c:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    cc4e:	2400      	movs	r4, #0
    cc50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    cc54:	4d0e      	ldr	r5, [pc, #56]	; (cc90 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cc56:	4b0f      	ldr	r3, [pc, #60]	; (cc94 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    cc58:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cc5c:	601c      	str	r4, [r3, #0]
    cc5e:	681b      	ldr	r3, [r3, #0]
    cc60:	4b0d      	ldr	r3, [pc, #52]	; (cc98 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    cc62:	2101      	movs	r1, #1
    cc64:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    cc68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    cc6c:	4622      	mov	r2, r4
    cc6e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    cc72:	2015      	movs	r0, #21
    cc74:	f000 f8cc 	bl	ce10 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    cc78:	2015      	movs	r0, #21
    cc7a:	f000 f8ab 	bl	cdd4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    cc7e:	2301      	movs	r3, #1
    cc80:	4a06      	ldr	r2, [pc, #24]	; (cc9c <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    cc82:	2002      	movs	r0, #2
    cc84:	6013      	str	r3, [r2, #0]
    cc86:	602b      	str	r3, [r5, #0]
    cc88:	f7ff ff38 	bl	cafc <z_nrf_clock_control_lf_on>

	return 0;
}
    cc8c:	4620      	mov	r0, r4
    cc8e:	bd38      	pop	{r3, r4, r5, pc}
    cc90:	40015000 	.word	0x40015000
    cc94:	40015140 	.word	0x40015140
    cc98:	e000e100 	.word	0xe000e100
    cc9c:	40015008 	.word	0x40015008

0000cca0 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
    cca2:	4b2d      	ldr	r3, [pc, #180]	; (cd58 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    cca4:	4c2d      	ldr	r4, [pc, #180]	; (cd5c <z_clock_set_timeout+0xbc>)
    cca6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    ccaa:	4b2d      	ldr	r3, [pc, #180]	; (cd60 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    ccac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ccb0:	bf08      	it	eq
    ccb2:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
    ccb4:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    ccb6:	1a52      	subs	r2, r2, r1
    ccb8:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    ccbc:	0212      	lsls	r2, r2, #8
    ccbe:	d438      	bmi.n	cd32 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    ccc0:	3801      	subs	r0, #1
    ccc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    ccc6:	42a0      	cmp	r0, r4
    ccc8:	bfa8      	it	ge
    ccca:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    cccc:	3301      	adds	r3, #1
    ccce:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    ccd0:	42a0      	cmp	r0, r4
    ccd2:	bf94      	ite	ls
    ccd4:	180c      	addls	r4, r1, r0
    ccd6:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
    ccd8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ccdc:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
    ccde:	4a1e      	ldr	r2, [pc, #120]	; (cd58 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cce0:	4d20      	ldr	r5, [pc, #128]	; (cd64 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
    cce2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
    cce6:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
    ccea:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ccee:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
    ccf0:	1a5b      	subs	r3, r3, r1
    ccf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ccf6:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
    ccf8:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    ccfa:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    ccfe:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    cd02:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    cd06:	d104      	bne.n	cd12 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
    cd08:	200f      	movs	r0, #15
    cd0a:	f003 fbc7 	bl	1049c <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    cd0e:	602e      	str	r6, [r5, #0]
    cd10:	682b      	ldr	r3, [r5, #0]
    cd12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    cd16:	4b14      	ldr	r3, [pc, #80]	; (cd68 <z_clock_set_timeout+0xc8>)
    cd18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    cd1c:	4b0e      	ldr	r3, [pc, #56]	; (cd58 <z_clock_set_timeout+0xb8>)
    cd1e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    cd22:	1a22      	subs	r2, r4, r0
    cd24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
    cd28:	2a01      	cmp	r2, #1
    cd2a:	d104      	bne.n	cd36 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
    cd2c:	f7ff ff64 	bl	cbf8 <handle_next_cycle_case>
    cd30:	e00b      	b.n	cd4a <z_clock_set_timeout+0xaa>
		ticks = 0;
    cd32:	2000      	movs	r0, #0
    cd34:	e7ca      	b.n	cccc <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    cd36:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    cd3a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    cd3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    cd42:	1a24      	subs	r4, r4, r0
    cd44:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
    cd46:	0223      	lsls	r3, r4, #8
    cd48:	d4f0      	bmi.n	cd2c <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
    cd4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cd4e:	4b02      	ldr	r3, [pc, #8]	; (cd58 <z_clock_set_timeout+0xb8>)
    cd50:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    cd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd56:	bf00      	nop
    cd58:	40015000 	.word	0x40015000
    cd5c:	007fffff 	.word	0x007fffff
    cd60:	200102b8 	.word	0x200102b8
    cd64:	40015140 	.word	0x40015140
    cd68:	e000e100 	.word	0xe000e100

0000cd6c <z_clock_elapsed>:
	__asm__ volatile(
    cd6c:	f04f 0220 	mov.w	r2, #32
    cd70:	f3ef 8311 	mrs	r3, BASEPRI
    cd74:	f382 8811 	msr	BASEPRI, r2
    cd78:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    cd7c:	4a06      	ldr	r2, [pc, #24]	; (cd98 <z_clock_elapsed+0x2c>)
    cd7e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    cd82:	4a06      	ldr	r2, [pc, #24]	; (cd9c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    cd84:	6812      	ldr	r2, [r2, #0]
    cd86:	1a80      	subs	r0, r0, r2
    cd88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    cd8c:	f383 8811 	msr	BASEPRI, r3
    cd90:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    cd94:	4770      	bx	lr
    cd96:	bf00      	nop
    cd98:	40015000 	.word	0x40015000
    cd9c:	200102b8 	.word	0x200102b8

0000cda0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cda0:	4a09      	ldr	r2, [pc, #36]	; (cdc8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cda2:	490a      	ldr	r1, [pc, #40]	; (cdcc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    cda4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cda6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cda8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    cdaa:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cdac:	4908      	ldr	r1, [pc, #32]	; (cdd0 <arch_swap+0x30>)
    cdae:	684b      	ldr	r3, [r1, #4]
    cdb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cdb4:	604b      	str	r3, [r1, #4]
    cdb6:	2300      	movs	r3, #0
    cdb8:	f383 8811 	msr	BASEPRI, r3
    cdbc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cdc0:	6893      	ldr	r3, [r2, #8]
}
    cdc2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    cdc4:	4770      	bx	lr
    cdc6:	bf00      	nop
    cdc8:	20010350 	.word	0x20010350
    cdcc:	00010918 	.word	0x00010918
    cdd0:	e000ed00 	.word	0xe000ed00

0000cdd4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cdd4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cdd6:	2b00      	cmp	r3, #0
    cdd8:	db08      	blt.n	cdec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cdda:	2201      	movs	r2, #1
    cddc:	f000 001f 	and.w	r0, r0, #31
    cde0:	fa02 f000 	lsl.w	r0, r2, r0
    cde4:	4a02      	ldr	r2, [pc, #8]	; (cdf0 <arch_irq_enable+0x1c>)
    cde6:	095b      	lsrs	r3, r3, #5
    cde8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    cdec:	4770      	bx	lr
    cdee:	bf00      	nop
    cdf0:	e000e100 	.word	0xe000e100

0000cdf4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cdf4:	4b05      	ldr	r3, [pc, #20]	; (ce0c <arch_irq_is_enabled+0x18>)
    cdf6:	0942      	lsrs	r2, r0, #5
    cdf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cdfc:	2301      	movs	r3, #1
    cdfe:	f000 001f 	and.w	r0, r0, #31
    ce02:	fa03 f000 	lsl.w	r0, r3, r0
}
    ce06:	4010      	ands	r0, r2
    ce08:	4770      	bx	lr
    ce0a:	bf00      	nop
    ce0c:	e000e100 	.word	0xe000e100

0000ce10 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    ce10:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    ce12:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    ce14:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce18:	bfa8      	it	ge
    ce1a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    ce1e:	ea4f 1141 	mov.w	r1, r1, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce22:	bfb8      	it	lt
    ce24:	4b05      	ldrlt	r3, [pc, #20]	; (ce3c <z_arm_irq_priority_set+0x2c>)
    ce26:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce28:	bfab      	itete	ge
    ce2a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce2e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce32:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ce36:	5419      	strblt	r1, [r3, r0]
}
    ce38:	4770      	bx	lr
    ce3a:	bf00      	nop
    ce3c:	e000ed14 	.word	0xe000ed14

0000ce40 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ce40:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ce44:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ce46:	490b      	ldr	r1, [pc, #44]	; (ce74 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    ce48:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ce4c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ce4e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ce52:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ce56:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ce58:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ce5c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ce60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ce64:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ce68:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ce6a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ce6c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    ce6e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ce70:	4770      	bx	lr
    ce72:	bf00      	nop
    ce74:	0000fb7d 	.word	0x0000fb7d

0000ce78 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    ce78:	4604      	mov	r4, r0
    ce7a:	b508      	push	{r3, lr}
    ce7c:	460e      	mov	r6, r1
    ce7e:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    ce80:	f000 fa06 	bl	d290 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ce84:	4b08      	ldr	r3, [pc, #32]	; (cea8 <arch_switch_to_main_thread+0x30>)
    ce86:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ce88:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    ce8a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ce8e:	4628      	mov	r0, r5
    ce90:	f386 8809 	msr	PSP, r6
    ce94:	2100      	movs	r1, #0
    ce96:	b663      	cpsie	if
    ce98:	f381 8811 	msr	BASEPRI, r1
    ce9c:	f3bf 8f6f 	isb	sy
    cea0:	2200      	movs	r2, #0
    cea2:	2300      	movs	r3, #0
    cea4:	f002 fe6a 	bl	fb7c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cea8:	20010350 	.word	0x20010350

0000ceac <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ceac:	4a0e      	ldr	r2, [pc, #56]	; (cee8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ceae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ceb0:	4b0e      	ldr	r3, [pc, #56]	; (ceec <z_arm_prep_c+0x40>)
    ceb2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ceb6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ceb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cebc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cec4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    cecc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ced0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ced4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ced8:	f001 fe3c 	bl	eb54 <z_bss_zero>
	z_data_copy();
    cedc:	f001 fe44 	bl	eb68 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cee0:	f000 f99e 	bl	d220 <z_arm_interrupt_init>
	z_cstart();
    cee4:	f001 fe7e 	bl	ebe4 <z_cstart>
    cee8:	0000c000 	.word	0x0000c000
    ceec:	e000ed00 	.word	0xe000ed00

0000cef0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cef0:	4913      	ldr	r1, [pc, #76]	; (cf40 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cef2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cef4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    cef8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cefa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cefe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cf02:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cf04:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cf08:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cf0c:	4f0d      	ldr	r7, [pc, #52]	; (cf44 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cf0e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cf12:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    cf14:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    cf16:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    cf18:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    cf1a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    cf1c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    cf1e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    cf22:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    cf26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    cf2a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    cf2e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    cf32:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    cf34:	f002 ffa7 	bl	fe86 <configure_builtin_stack_guard>
    pop {r2, lr}
    cf38:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    cf3c:	4770      	bx	lr
    cf3e:	0000      	.short	0x0000
    ldr r1, =_kernel
    cf40:	20010350 	.word	0x20010350
    ldr v4, =_SCS_ICSR
    cf44:	e000ed04 	.word	0xe000ed04

0000cf48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    cf48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cf4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cf4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cf52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cf56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cf58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cf5c:	2902      	cmp	r1, #2
    beq _oops
    cf5e:	d0ff      	beq.n	cf60 <_oops>

0000cf60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cf60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    cf62:	f002 ff96 	bl	fe92 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    cf66:	bd01      	pop	{r0, pc}

0000cf68 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cf68:	4901      	ldr	r1, [pc, #4]	; (cf70 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cf6a:	2210      	movs	r2, #16
	str	r2, [r1]
    cf6c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cf6e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cf70:	e000ed10 	.word	0xe000ed10

0000cf74 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    cf74:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    cf76:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    cf78:	f380 8811 	msr	BASEPRI, r0
	isb
    cf7c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    cf80:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    cf84:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    cf86:	b662      	cpsie	i
	isb
    cf88:	f3bf 8f6f 	isb	sy

	bx	lr
    cf8c:	4770      	bx	lr
    cf8e:	bf00      	nop

0000cf90 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    cf90:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    cf92:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    cf94:	f381 8811 	msr	BASEPRI, r1

	wfe
    cf98:	bf20      	wfe

	msr	BASEPRI, r0
    cf9a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    cf9e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    cfa0:	4770      	bx	lr
    cfa2:	bf00      	nop

0000cfa4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cfa4:	bf30      	wfi
    b z_SysNmiOnReset
    cfa6:	f7ff bffd 	b.w	cfa4 <z_SysNmiOnReset>
    cfaa:	bf00      	nop

0000cfac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cfac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    cfae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cfb0:	4a0b      	ldr	r2, [pc, #44]	; (cfe0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cfb2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    cfb4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cfb6:	bf1e      	ittt	ne
	movne	r1, #0
    cfb8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cfba:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    cfbc:	f003 f9c0 	blne	10340 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    cfc0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    cfc2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cfc6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cfca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cfce:	4905      	ldr	r1, [pc, #20]	; (cfe4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cfd0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cfd2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cfd4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cfd6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cfda:	4903      	ldr	r1, [pc, #12]	; (cfe8 <_isr_wrapper+0x3c>)
	bx r1
    cfdc:	4708      	bx	r1
    cfde:	0000      	.short	0x0000
	ldr r2, =_kernel
    cfe0:	20010350 	.word	0x20010350
	ldr r1, =_sw_isr_table
    cfe4:	000105ac 	.word	0x000105ac
	ldr r1, =z_arm_int_exit
    cfe8:	0000d031 	.word	0x0000d031

0000cfec <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    cfec:	f002 feac 	bl	fd48 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cff0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cff2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    cff6:	4808      	ldr	r0, [pc, #32]	; (d018 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    cff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    cffc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cffe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d002:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d006:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d008:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d00a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d00e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d012:	f7ff ff4b 	bl	ceac <z_arm_prep_c>
    d016:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    d018:	200108d8 	.word	0x200108d8

0000d01c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d01c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d020:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d024:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d026:	4672      	mov	r2, lr
	bl z_arm_fault
    d028:	f000 f860 	bl	d0ec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d02c:	bd01      	pop	{r0, pc}
    d02e:	bf00      	nop

0000d030 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d030:	4b04      	ldr	r3, [pc, #16]	; (d044 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d032:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d034:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    d036:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d038:	d003      	beq.n	d042 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d03a:	4903      	ldr	r1, [pc, #12]	; (d048 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d03c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d040:	600a      	str	r2, [r1, #0]

0000d042 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d042:	4770      	bx	lr
	ldr r3, =_kernel
    d044:	20010350 	.word	0x20010350
	ldr r1, =_SCS_ICSR
    d048:	e000ed04 	.word	0xe000ed04

0000d04c <mem_manage_fault.isra.2>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d04c:	4b0c      	ldr	r3, [pc, #48]	; (d080 <mem_manage_fault.isra.2+0x34>)
    d04e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d054:	0792      	lsls	r2, r2, #30
    d056:	d508      	bpl.n	d06a <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    d058:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d05a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d05c:	0612      	lsls	r2, r2, #24
    d05e:	d504      	bpl.n	d06a <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    d060:	b118      	cbz	r0, d06a <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d068:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    d06a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d06c:	4b04      	ldr	r3, [pc, #16]	; (d080 <mem_manage_fault.isra.2+0x34>)
    d06e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    d072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d076:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    d07a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d07c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d07e:	4770      	bx	lr
    d080:	e000ed00 	.word	0xe000ed00

0000d084 <bus_fault.isra.3>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d084:	4b0d      	ldr	r3, [pc, #52]	; (d0bc <bus_fault.isra.3+0x38>)
    d086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d08a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d08c:	0592      	lsls	r2, r2, #22
    d08e:	d508      	bpl.n	d0a2 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    d090:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d094:	0412      	lsls	r2, r2, #16
    d096:	d504      	bpl.n	d0a2 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    d098:	b118      	cbz	r0, d0a2 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d09a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d09c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d0a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    d0a2:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d0a4:	4b05      	ldr	r3, [pc, #20]	; (d0bc <bus_fault.isra.3+0x38>)
    d0a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d0aa:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d0ac:	bf58      	it	pl
    d0ae:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d0b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d0b2:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    d0b6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d0b8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    d0ba:	4770      	bx	lr
    d0bc:	e000ed00 	.word	0xe000ed00

0000d0c0 <usage_fault.isra.4>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    d0c0:	4b09      	ldr	r3, [pc, #36]	; (d0e8 <usage_fault.isra.4+0x28>)
    d0c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    d0c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d0c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d0c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d0ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d0ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d0d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d0d2:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d0d6:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    d0da:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    d0de:	bf18      	it	ne
    d0e0:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d0e2:	629a      	str	r2, [r3, #40]	; 0x28
}
    d0e4:	4770      	bx	lr
    d0e6:	bf00      	nop
    d0e8:	e000ed00 	.word	0xe000ed00

0000d0ec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d0ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d0ee:	4b3a      	ldr	r3, [pc, #232]	; (d1d8 <z_arm_fault+0xec>)
{
    d0f0:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d0f2:	685b      	ldr	r3, [r3, #4]
    d0f4:	2500      	movs	r5, #0
    d0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d0fa:	f385 8811 	msr	BASEPRI, r5
    d0fe:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d102:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    d106:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    d10a:	d119      	bne.n	d140 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d10c:	07d6      	lsls	r6, r2, #31
    d10e:	d417      	bmi.n	d140 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d110:	0655      	lsls	r5, r2, #25
    d112:	d404      	bmi.n	d11e <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d114:	0714      	lsls	r4, r2, #28
    d116:	d405      	bmi.n	d124 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
    d118:	4606      	mov	r6, r0
			*nested_exc = true;
    d11a:	2501      	movs	r5, #1
    d11c:	e004      	b.n	d128 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d11e:	f012 0504 	ands.w	r5, r2, #4
    d122:	d00b      	beq.n	d13c <z_arm_fault+0x50>
			ptr_esf = (z_arch_esf_t *)psp;
    d124:	460e      	mov	r6, r1
	*nested_exc = false;
    d126:	2500      	movs	r5, #0
	*recoverable = false;
    d128:	2200      	movs	r2, #0
	switch (fault) {
    d12a:	3b03      	subs	r3, #3
	*recoverable = false;
    d12c:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    d130:	2b03      	cmp	r3, #3
    d132:	d849      	bhi.n	d1c8 <z_arm_fault+0xdc>
    d134:	e8df f003 	tbb	[pc, r3]
    d138:	3d444006 	.word	0x3d444006
			ptr_esf = (z_arch_esf_t *)msp;
    d13c:	4606      	mov	r6, r0
	if (!alternative_state_exc) {
    d13e:	e7f3      	b.n	d128 <z_arm_fault+0x3c>
		return NULL;
    d140:	462e      	mov	r6, r5
    d142:	e7f1      	b.n	d128 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d144:	4b24      	ldr	r3, [pc, #144]	; (d1d8 <z_arm_fault+0xec>)
    d146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d148:	0792      	lsls	r2, r2, #30
    d14a:	d43d      	bmi.n	d1c8 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d14c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d14e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    d152:	d008      	beq.n	d166 <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
    d154:	3328      	adds	r3, #40	; 0x28
    d156:	781b      	ldrb	r3, [r3, #0]
    d158:	b1eb      	cbz	r3, d196 <z_arm_fault+0xaa>
			reason = mem_manage_fault(esf, 1, recoverable);
    d15a:	2001      	movs	r0, #1
    d15c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d160:	f7ff ff74 	bl	d04c <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
    d164:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d166:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d16a:	b993      	cbnz	r3, d192 <z_arm_fault+0xa6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d16c:	2220      	movs	r2, #32
    d16e:	4631      	mov	r1, r6
    d170:	a802      	add	r0, sp, #8
    d172:	f002 fee0 	bl	ff36 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d178:	b345      	cbz	r5, d1cc <z_arm_fault+0xe0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d17a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d17e:	b922      	cbnz	r2, d18a <z_arm_fault+0x9e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d180:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d184:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d188:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d18a:	a902      	add	r1, sp, #8
    d18c:	4620      	mov	r0, r4
    d18e:	f002 fe7e 	bl	fe8e <z_arm_fatal_error>
}
    d192:	b00a      	add	sp, #40	; 0x28
    d194:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    d196:	4b11      	ldr	r3, [pc, #68]	; (d1dc <z_arm_fault+0xf0>)
    d198:	781b      	ldrb	r3, [r3, #0]
    d19a:	b12b      	cbz	r3, d1a8 <z_arm_fault+0xbc>
			reason = bus_fault(esf, 1, recoverable);
    d19c:	2001      	movs	r0, #1
    d19e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d1a2:	f7ff ff6f 	bl	d084 <bus_fault.isra.3>
    d1a6:	e7dd      	b.n	d164 <z_arm_fault+0x78>
		} else if (SCB_UFSR != 0) {
    d1a8:	4b0d      	ldr	r3, [pc, #52]	; (d1e0 <z_arm_fault+0xf4>)
    d1aa:	881c      	ldrh	r4, [r3, #0]
    d1ac:	b2a4      	uxth	r4, r4
    d1ae:	2c00      	cmp	r4, #0
    d1b0:	d0d9      	beq.n	d166 <z_arm_fault+0x7a>
		reason = usage_fault(esf);
    d1b2:	f7ff ff85 	bl	d0c0 <usage_fault.isra.4>
    d1b6:	e7d5      	b.n	d164 <z_arm_fault+0x78>
		reason = mem_manage_fault(esf, 0, recoverable);
    d1b8:	f10d 0107 	add.w	r1, sp, #7
    d1bc:	2000      	movs	r0, #0
    d1be:	e7cf      	b.n	d160 <z_arm_fault+0x74>
		reason = bus_fault(esf, 0, recoverable);
    d1c0:	f10d 0107 	add.w	r1, sp, #7
    d1c4:	2000      	movs	r0, #0
    d1c6:	e7ec      	b.n	d1a2 <z_arm_fault+0xb6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d1c8:	2400      	movs	r4, #0
    d1ca:	e7cc      	b.n	d166 <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d1cc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d1d0:	f023 0301 	bic.w	r3, r3, #1
    d1d4:	e7d8      	b.n	d188 <z_arm_fault+0x9c>
    d1d6:	bf00      	nop
    d1d8:	e000ed00 	.word	0xe000ed00
    d1dc:	e000ed29 	.word	0xe000ed29
    d1e0:	e000ed2a 	.word	0xe000ed2a

0000d1e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d1e4:	4b04      	ldr	r3, [pc, #16]	; (d1f8 <z_arm_fault_init+0x14>)
    d1e6:	695a      	ldr	r2, [r3, #20]
    d1e8:	f042 0210 	orr.w	r2, r2, #16
    d1ec:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d1ee:	695a      	ldr	r2, [r3, #20]
    d1f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d1f4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d1f6:	4770      	bx	lr
    d1f8:	e000ed00 	.word	0xe000ed00

0000d1fc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d1fc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d200:	4905      	ldr	r1, [pc, #20]	; (d218 <sys_arch_reboot+0x1c>)
    d202:	4b06      	ldr	r3, [pc, #24]	; (d21c <sys_arch_reboot+0x20>)
    d204:	68ca      	ldr	r2, [r1, #12]
    d206:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d20a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d20c:	60cb      	str	r3, [r1, #12]
    d20e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d212:	bf00      	nop
    d214:	e7fd      	b.n	d212 <sys_arch_reboot+0x16>
    d216:	bf00      	nop
    d218:	e000ed00 	.word	0xe000ed00
    d21c:	05fa0004 	.word	0x05fa0004

0000d220 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d220:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d222:	2120      	movs	r1, #32
    d224:	4803      	ldr	r0, [pc, #12]	; (d234 <z_arm_interrupt_init+0x14>)
    d226:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d228:	3301      	adds	r3, #1
    d22a:	2b41      	cmp	r3, #65	; 0x41
    d22c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d230:	d1f9      	bne.n	d226 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d232:	4770      	bx	lr
    d234:	e000e100 	.word	0xe000e100

0000d238 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    d238:	b510      	push	{r4, lr}
    d23a:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
    d23c:	f001 ff0c 	bl	f058 <z_thread_single_abort>

	if (_current == thread) {
    d240:	4b11      	ldr	r3, [pc, #68]	; (d288 <z_impl_k_thread_abort+0x50>)
    d242:	689b      	ldr	r3, [r3, #8]
    d244:	42a3      	cmp	r3, r4
    d246:	d107      	bne.n	d258 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d248:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d24c:	b183      	cbz	r3, d270 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d24e:	4a0f      	ldr	r2, [pc, #60]	; (d28c <z_impl_k_thread_abort+0x54>)
    d250:	6853      	ldr	r3, [r2, #4]
    d252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d256:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
    d258:	f04f 0320 	mov.w	r3, #32
    d25c:	f3ef 8011 	mrs	r0, BASEPRI
    d260:	f383 8811 	msr	BASEPRI, r3
    d264:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    d268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    d26c:	f003 b86a 	b.w	10344 <z_reschedule_irqlock>
    d270:	f04f 0320 	mov.w	r3, #32
    d274:	f3ef 8011 	mrs	r0, BASEPRI
    d278:	f383 8811 	msr	BASEPRI, r3
    d27c:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    d280:	f7ff fd8e 	bl	cda0 <arch_swap>
	return ret;
    d284:	e7e8      	b.n	d258 <z_impl_k_thread_abort+0x20>
    d286:	bf00      	nop
    d288:	20010350 	.word	0x20010350
    d28c:	e000ed00 	.word	0xe000ed00

0000d290 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d290:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    d292:	4b0e      	ldr	r3, [pc, #56]	; (d2cc <z_arm_configure_static_mpu_regions+0x3c>)
{
    d294:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    d296:	9302      	str	r3, [sp, #8]
    d298:	4b0d      	ldr	r3, [pc, #52]	; (d2d0 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d29a:	4c0e      	ldr	r4, [pc, #56]	; (d2d4 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    d29c:	9303      	str	r3, [sp, #12]
    d29e:	4b0e      	ldr	r3, [pc, #56]	; (d2d8 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d2a0:	4a0e      	ldr	r2, [pc, #56]	; (d2dc <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    d2a2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    d2a4:	ab02      	add	r3, sp, #8
    d2a6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d2a8:	a801      	add	r0, sp, #4
    d2aa:	4623      	mov	r3, r4
    d2ac:	2101      	movs	r1, #1
    d2ae:	f000 f903 	bl	d4b8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    d2b2:	2300      	movs	r3, #0
    d2b4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d2b6:	4b0a      	ldr	r3, [pc, #40]	; (d2e0 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d2b8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d2ba:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d2bc:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    d2be:	9305      	str	r3, [sp, #20]
    d2c0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d2c2:	f000 f903 	bl	d4cc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d2c6:	b008      	add	sp, #32
    d2c8:	bd10      	pop	{r4, pc}
    d2ca:	bf00      	nop
    d2cc:	20010000 	.word	0x20010000
    d2d0:	00000000 	.word	0x00000000
    d2d4:	20040000 	.word	0x20040000
    d2d8:	00010006 	.word	0x00010006
    d2dc:	20010000 	.word	0x20010000
    d2e0:	20010140 	.word	0x20010140

0000d2e4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d2e4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d2e6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d2e8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d2ea:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d2ee:	f004 031f 	and.w	r3, r4, #31
    d2f2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d2f4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d2f6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d2f8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d2fc:	4904      	ldr	r1, [pc, #16]	; (d310 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d2fe:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d302:	f043 0301 	orr.w	r3, r3, #1
    d306:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    d308:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    d30a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d30c:	bd10      	pop	{r4, pc}
    d30e:	bf00      	nop
    d310:	e000ed90 	.word	0xe000ed90

0000d314 <mpu_configure_regions_and_partition.constprop.1>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d318:	4680      	mov	r8, r0
    d31a:	4689      	mov	r9, r1
    d31c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d31e:	2700      	movs	r7, #0
	MPU->RNR = index;
    d320:	4d48      	ldr	r5, [pc, #288]	; (d444 <mpu_configure_regions_and_partition.constprop.1+0x130>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    d322:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d324:	454f      	cmp	r7, r9
    d326:	da07      	bge.n	d338 <mpu_configure_regions_and_partition.constprop.1+0x24>
		if (regions[i]->size == 0U) {
    d328:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
    d32c:	685e      	ldr	r6, [r3, #4]
    d32e:	b3c6      	cbz	r6, d3a2 <mpu_configure_regions_and_partition.constprop.1+0x8e>
		&&
    d330:	2e1f      	cmp	r6, #31
    d332:	d805      	bhi.n	d340 <mpu_configure_regions_and_partition.constprop.1+0x2c>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d334:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d338:	4620      	mov	r0, r4
    d33a:	b005      	add	sp, #20
    d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    d340:	06f2      	lsls	r2, r6, #27
    d342:	d1f7      	bne.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
		((part->start &
    d344:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    d348:	f01a 0f1f 	tst.w	sl, #31
    d34c:	d1f2      	bne.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d34e:	4650      	mov	r0, sl
    d350:	f002 fdcc 	bl	feec <arm_cmse_mpu_region_get>
    d354:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d356:	eb06 000a 	add.w	r0, r6, sl
    d35a:	3801      	subs	r0, #1
    d35c:	f002 fdc6 	bl	feec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d360:	4583      	cmp	fp, r0
    d362:	d1e7      	bne.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
		if ((u_reg_index == -EINVAL) ||
    d364:	f11b 0f16 	cmn.w	fp, #22
    d368:	d0e4      	beq.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
			(u_reg_index > (reg_index - 1))) {
    d36a:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d36c:	455b      	cmp	r3, fp
    d36e:	dbe1      	blt.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    d370:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d374:	68e8      	ldr	r0, [r5, #12]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d376:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	MPU->RNR = index;
    d37a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d37e:	692e      	ldr	r6, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d380:	f020 001f 	bic.w	r0, r0, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d384:	e9d1 3200 	ldrd	r3, r2, [r1]
    d388:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    d38a:	4298      	cmp	r0, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d38c:	f046 061f 	orr.w	r6, r6, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
    d390:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    d394:	d118      	bne.n	d3c8 <mpu_configure_regions_and_partition.constprop.1+0xb4>
    d396:	4556      	cmp	r6, sl
    d398:	d105      	bne.n	d3a6 <mpu_configure_regions_and_partition.constprop.1+0x92>
			mpu_configure_region(u_reg_index, regions[i]);
    d39a:	fa5f f08b 	uxtb.w	r0, fp
    d39e:	f002 fd83 	bl	fea8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d3a2:	3701      	adds	r7, #1
    d3a4:	e7be      	b.n	d324 <mpu_configure_regions_and_partition.constprop.1+0x10>
	MPU->RNR = index;
    d3a6:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d3aa:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    d3ac:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d3b0:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d3b4:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d3b6:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    d3b8:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    d3ba:	f002 fd75 	bl	fea8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d3be:	f110 0f16 	cmn.w	r0, #22
    d3c2:	d0b7      	beq.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
			reg_index++;
    d3c4:	1c44      	adds	r4, r0, #1
    d3c6:	e7ec      	b.n	d3a2 <mpu_configure_regions_and_partition.constprop.1+0x8e>
	MPU->RNR = index;
    d3c8:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d3cc:	692a      	ldr	r2, [r5, #16]
    d3ce:	3b01      	subs	r3, #1
    d3d0:	f023 031f 	bic.w	r3, r3, #31
    d3d4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d3d8:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    d3da:	4556      	cmp	r6, sl
    d3dc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d3de:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    d3e0:	d0eb      	beq.n	d3ba <mpu_configure_regions_and_partition.constprop.1+0xa6>
				mpu_configure_region(reg_index, regions[i]);
    d3e2:	f002 fd61 	bl	fea8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d3e6:	f110 0f16 	cmn.w	r0, #22
    d3ea:	d0a3      	beq.n	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
	MPU->RNR = index;
    d3ec:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    d3f0:	68ea      	ldr	r2, [r5, #12]
    d3f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    d3f6:	3e01      	subs	r6, #1
	attr->rbar = MPU->RBAR &
    d3f8:	f362 0304 	bfi	r3, r2, #0, #5
    d3fc:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d400:	692b      	ldr	r3, [r5, #16]
    d402:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d406:	085b      	lsrs	r3, r3, #1
    d408:	f363 1247 	bfi	r2, r3, #5, #3
    d40c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    d410:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
    d414:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
    d416:	e9d2 3200 	ldrd	r3, r2, [r2]
    d41a:	4413      	add	r3, r2
    d41c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    d41e:	f023 031f 	bic.w	r3, r3, #31
    d422:	441e      	add	r6, r3
    d424:	eba6 060a 	sub.w	r6, r6, sl
    d428:	b2c4      	uxtb	r4, r0
    d42a:	f026 061f 	bic.w	r6, r6, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    d42e:	2c0f      	cmp	r4, #15
			fill_region.attr.r_limit =
    d430:	9603      	str	r6, [sp, #12]
    d432:	f63f af7f 	bhi.w	d334 <mpu_configure_regions_and_partition.constprop.1+0x20>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    d436:	4620      	mov	r0, r4
    d438:	4669      	mov	r1, sp
    d43a:	f7ff ff53 	bl	d2e4 <region_init>
			reg_index++;
    d43e:	3401      	adds	r4, #1
    d440:	e7af      	b.n	d3a2 <mpu_configure_regions_and_partition.constprop.1+0x8e>
    d442:	bf00      	nop
    d444:	e000ed90 	.word	0xe000ed90

0000d448 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d448:	2205      	movs	r2, #5
    d44a:	4b03      	ldr	r3, [pc, #12]	; (d458 <arm_core_mpu_enable+0x10>)
    d44c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    d44e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d452:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d456:	4770      	bx	lr
    d458:	e000ed90 	.word	0xe000ed90

0000d45c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d45c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d460:	2200      	movs	r2, #0
    d462:	4b01      	ldr	r3, [pc, #4]	; (d468 <arm_core_mpu_disable+0xc>)
    d464:	605a      	str	r2, [r3, #4]
}
    d466:	4770      	bx	lr
    d468:	e000ed90 	.word	0xe000ed90

0000d46c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    d46c:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d46e:	4d0e      	ldr	r5, [pc, #56]	; (d4a8 <arm_mpu_init+0x3c>)
    d470:	682e      	ldr	r6, [r5, #0]
    d472:	2e10      	cmp	r6, #16
    d474:	d815      	bhi.n	d4a2 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d476:	2400      	movs	r4, #0
	arm_core_mpu_disable();
    d478:	f7ff fff0 	bl	d45c <arm_core_mpu_disable>
	MPU->MAIR0 =
    d47c:	4b0b      	ldr	r3, [pc, #44]	; (d4ac <arm_mpu_init+0x40>)
    d47e:	4a0c      	ldr	r2, [pc, #48]	; (d4b0 <arm_mpu_init+0x44>)
    d480:	631a      	str	r2, [r3, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d482:	42a6      	cmp	r6, r4
    d484:	d105      	bne.n	d492 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    d486:	4b0b      	ldr	r3, [pc, #44]	; (d4b4 <arm_mpu_init+0x48>)
    d488:	701e      	strb	r6, [r3, #0]


	arm_core_mpu_enable();
    d48a:	f7ff ffdd 	bl	d448 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    d48e:	2000      	movs	r0, #0
}
    d490:	bd70      	pop	{r4, r5, r6, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d492:	6869      	ldr	r1, [r5, #4]
    d494:	4620      	mov	r0, r4
    d496:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    d49a:	f7ff ff23 	bl	d2e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d49e:	3401      	adds	r4, #1
    d4a0:	e7ef      	b.n	d482 <arm_mpu_init+0x16>
		return -1;
    d4a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d4a6:	e7f3      	b.n	d490 <arm_mpu_init+0x24>
    d4a8:	00010838 	.word	0x00010838
    d4ac:	e000ed90 	.word	0xe000ed90
    d4b0:	0044ffaa 	.word	0x0044ffaa
    d4b4:	20010391 	.word	0x20010391

0000d4b8 <arm_core_mpu_configure_static_mpu_regions>:
{
    d4b8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d4ba:	4c03      	ldr	r4, [pc, #12]	; (d4c8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d4bc:	7822      	ldrb	r2, [r4, #0]
    d4be:	f7ff ff29 	bl	d314 <mpu_configure_regions_and_partition.constprop.1>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d4c2:	7020      	strb	r0, [r4, #0]
}
    d4c4:	bd10      	pop	{r4, pc}
    d4c6:	bf00      	nop
    d4c8:	20010391 	.word	0x20010391

0000d4cc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d4cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4d0:	4c25      	ldr	r4, [pc, #148]	; (d568 <arm_core_mpu_mark_areas_for_dynamic_regions+0x9c>)
    d4d2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d4d4:	4680      	mov	r8, r0
    d4d6:	2700      	movs	r7, #0
    d4d8:	46a1      	mov	r9, r4
	attr->rbar = MPU->RBAR &
    d4da:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
    d4de:	4d23      	ldr	r5, [pc, #140]	; (d56c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d4e0:	4557      	cmp	r7, sl
    d4e2:	da1a      	bge.n	d51a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    d4e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d4e8:	9301      	str	r3, [sp, #4]
    d4ea:	2b00      	cmp	r3, #0
    d4ec:	d036      	beq.n	d55c <arm_core_mpu_mark_areas_for_dynamic_regions+0x90>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d4ee:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d4f2:	4608      	mov	r0, r1
    d4f4:	9100      	str	r1, [sp, #0]
    d4f6:	f002 fcf9 	bl	feec <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d4fa:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d4fe:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d500:	1858      	adds	r0, r3, r1
    d502:	3801      	subs	r0, #1
    d504:	f002 fcf2 	bl	feec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d508:	4286      	cmp	r6, r0
    d50a:	4a19      	ldr	r2, [pc, #100]	; (d570 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
    d50c:	d008      	beq.n	d520 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    d50e:	2314      	movs	r3, #20
    d510:	435f      	muls	r7, r3
    d512:	f06f 0315 	mvn.w	r3, #21
    d516:	f849 3007 	str.w	r3, [r9, r7]
}
    d51a:	b003      	add	sp, #12
    d51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d520:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
    d524:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d526:	d0f8      	beq.n	d51a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d528:	7813      	ldrb	r3, [r2, #0]
    d52a:	42b3      	cmp	r3, r6
    d52c:	ddf5      	ble.n	d51a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    d52e:	fb0b 9307 	mla	r3, fp, r7, r9
	MPU->RNR = index;
    d532:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
    d534:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
    d536:	68e8      	ldr	r0, [r5, #12]
    d538:	7b19      	ldrb	r1, [r3, #12]
    d53a:	f360 0104 	bfi	r1, r0, #0, #5
    d53e:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d540:	6929      	ldr	r1, [r5, #16]
    d542:	7b18      	ldrb	r0, [r3, #12]
    d544:	0849      	lsrs	r1, r1, #1
    d546:	f361 1047 	bfi	r0, r1, #5, #3
    d54a:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    d54c:	68eb      	ldr	r3, [r5, #12]
    d54e:	f023 031f 	bic.w	r3, r3, #31
    d552:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    d554:	692b      	ldr	r3, [r5, #16]
    d556:	f023 031f 	bic.w	r3, r3, #31
    d55a:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d55c:	3701      	adds	r7, #1
    d55e:	3414      	adds	r4, #20
    d560:	f108 080c 	add.w	r8, r8, #12
    d564:	e7bc      	b.n	d4e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
    d566:	bf00      	nop
    d568:	200102bc 	.word	0x200102bc
    d56c:	e000ed90 	.word	0xe000ed90
    d570:	20010391 	.word	0x20010391

0000d574 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    d574:	4b01      	ldr	r3, [pc, #4]	; (d57c <__stdout_hook_install+0x8>)
    d576:	6018      	str	r0, [r3, #0]
}
    d578:	4770      	bx	lr
    d57a:	bf00      	nop
    d57c:	20010004 	.word	0x20010004

0000d580 <nrf_gpio_cfg_sense_set>:

NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    d580:	4b06      	ldr	r3, [pc, #24]	; (d59c <nrf_gpio_cfg_sense_set+0x1c>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    d582:	f000 001f 	and.w	r0, r0, #31
    d586:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    d58a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    d58e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    d592:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    d596:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    d59a:	4770      	bx	lr
    d59c:	40842500 	.word	0x40842500

0000d5a0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d5a0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    d5a2:	4b09      	ldr	r3, [pc, #36]	; (d5c8 <gpio_nrfx_init+0x28>)
    d5a4:	781a      	ldrb	r2, [r3, #0]
    d5a6:	b96a      	cbnz	r2, d5c4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    d5a8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d5aa:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
    d5ac:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d5ae:	2105      	movs	r1, #5
    d5b0:	f7ff fc2e 	bl	ce10 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    d5b4:	2031      	movs	r0, #49	; 0x31
    d5b6:	f7ff fc0d 	bl	cdd4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    d5ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d5be:	4b03      	ldr	r3, [pc, #12]	; (d5cc <gpio_nrfx_init+0x2c>)
    d5c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    d5c4:	2000      	movs	r0, #0
    d5c6:	bd08      	pop	{r3, pc}
    d5c8:	20010392 	.word	0x20010392
    d5cc:	40031000 	.word	0x40031000

0000d5d0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d5d0:	4b28      	ldr	r3, [pc, #160]	; (d674 <gpio_nrfx_config+0xa4>)
{
    d5d2:	b570      	push	{r4, r5, r6, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d5d4:	4013      	ands	r3, r2
    d5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d5da:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d5dc:	d03b      	beq.n	d656 <gpio_nrfx_config+0x86>
    d5de:	d807      	bhi.n	d5f0 <gpio_nrfx_config+0x20>
    d5e0:	2b02      	cmp	r3, #2
    d5e2:	d03a      	beq.n	d65a <gpio_nrfx_config+0x8a>
    d5e4:	2b06      	cmp	r3, #6
    d5e6:	d013      	beq.n	d610 <gpio_nrfx_config+0x40>
    d5e8:	b193      	cbz	r3, d610 <gpio_nrfx_config+0x40>
		return -EINVAL;
    d5ea:	f06f 0015 	mvn.w	r0, #21
    d5ee:	e031      	b.n	d654 <gpio_nrfx_config+0x84>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d5f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    d5f4:	d033      	beq.n	d65e <gpio_nrfx_config+0x8e>
    d5f6:	d804      	bhi.n	d602 <gpio_nrfx_config+0x32>
    d5f8:	481f      	ldr	r0, [pc, #124]	; (d678 <gpio_nrfx_config+0xa8>)
    d5fa:	4283      	cmp	r3, r0
    d5fc:	d1f5      	bne.n	d5ea <gpio_nrfx_config+0x1a>
		drive = NRF_GPIO_PIN_H0D1;
    d5fe:	2307      	movs	r3, #7
    d600:	e006      	b.n	d610 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    d602:	481e      	ldr	r0, [pc, #120]	; (d67c <gpio_nrfx_config+0xac>)
    d604:	4283      	cmp	r3, r0
    d606:	d02c      	beq.n	d662 <gpio_nrfx_config+0x92>
    d608:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    d60c:	d1ed      	bne.n	d5ea <gpio_nrfx_config+0x1a>
		drive = NRF_GPIO_PIN_H0H1;
    d60e:	2303      	movs	r3, #3
	if ((flags & GPIO_PULL_UP) != 0) {
    d610:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    d612:	bf54      	ite	pl
    d614:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    d618:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    d61a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    d61e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    d622:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    d626:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    d62a:	d006      	beq.n	d63a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    d62c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d630:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    d632:	d018      	beq.n	d666 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    d634:	2201      	movs	r2, #1
    d636:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    d638:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    d63a:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    d63e:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
	return 0;
    d642:	2000      	movs	r0, #0
    *p_pin = pin_number & 0x1F;
    d644:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d648:	4a0d      	ldr	r2, [pc, #52]	; (d680 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    d64a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    d64e:	3180      	adds	r1, #128	; 0x80
    d650:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    d654:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0S1;
    d656:	2301      	movs	r3, #1
    d658:	e7da      	b.n	d610 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    d65a:	2304      	movs	r3, #4
    d65c:	e7d8      	b.n	d610 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_S0H1;
    d65e:	2302      	movs	r3, #2
    d660:	e7d6      	b.n	d610 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    d662:	2305      	movs	r3, #5
    d664:	e7d4      	b.n	d610 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    d666:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    d668:	bf42      	ittt	mi
    d66a:	2201      	movmi	r2, #1
    d66c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    d66e:	60f2      	strmi	r2, [r6, #12]
    d670:	e7e3      	b.n	d63a <gpio_nrfx_config+0x6a>
    d672:	bf00      	nop
    d674:	00f00006 	.word	0x00f00006
    d678:	00100006 	.word	0x00100006
    d67c:	00400002 	.word	0x00400002
    d680:	40842500 	.word	0x40842500

0000d684 <gpio_nrfx_pin_interrupt_configure>:
{
    d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d686:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d688:	6841      	ldr	r1, [r0, #4]
    d68a:	f005 041f 	and.w	r4, r5, #31
    d68e:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    d690:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    d694:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    d696:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
    d69a:	d10a      	bne.n	d6b2 <gpio_nrfx_pin_interrupt_configure+0x2e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d69c:	4866      	ldr	r0, [pc, #408]	; (d838 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
    *p_pin = pin_number & 0x1F;
    d69e:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d6a2:	3180      	adds	r1, #128	; 0x80
    d6a4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    d6a8:	07c8      	lsls	r0, r1, #31
    d6aa:	d507      	bpl.n	d6bc <gpio_nrfx_pin_interrupt_configure+0x38>
		return -ENOTSUP;
    d6ac:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d6b0:	e0a1      	b.n	d7f6 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    d6b2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    d6b6:	68f9      	ldr	r1, [r7, #12]
    d6b8:	f000 809e 	beq.w	d7f8 <gpio_nrfx_pin_interrupt_configure+0x174>
    d6bc:	2101      	movs	r1, #1
    d6be:	68f8      	ldr	r0, [r7, #12]
    d6c0:	40a9      	lsls	r1, r5
    d6c2:	4301      	orrs	r1, r0
    d6c4:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    d6c6:	2101      	movs	r1, #1
    d6c8:	6978      	ldr	r0, [r7, #20]
    d6ca:	40a9      	lsls	r1, r5
    d6cc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    d6d0:	69ba      	ldr	r2, [r7, #24]
    d6d2:	bf0c      	ite	eq
    d6d4:	4308      	orreq	r0, r1
    d6d6:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    d6d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    d6dc:	bf0c      	ite	eq
    d6de:	430a      	orreq	r2, r1
    d6e0:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    d6e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d6e6:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    d6ea:	61ba      	str	r2, [r7, #24]
    d6ec:	693a      	ldr	r2, [r7, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    d6ee:	4e53      	ldr	r6, [pc, #332]	; (d83c <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    d6f0:	bf0c      	ite	eq
    d6f2:	4311      	orreq	r1, r2
    d6f4:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    d6f8:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    d6fa:	6139      	str	r1, [r7, #16]
    d6fc:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
    d700:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d702:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    d706:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
    d70a:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    d70e:	428c      	cmp	r4, r1
    d710:	d177      	bne.n	d802 <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
    d712:	fa22 f103 	lsr.w	r1, r2, r3
    d716:	07c9      	lsls	r1, r1, #31
    d718:	d573      	bpl.n	d802 <gpio_nrfx_pin_interrupt_configure+0x17e>
			(void)atomic_and(mask, ~BIT(i));
    d71a:	2201      	movs	r2, #1
    d71c:	409a      	lsls	r2, r3
    d71e:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d720:	4947      	ldr	r1, [pc, #284]	; (d840 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
    d722:	e8d1 cfef 	ldaex	ip, [r1]
    d726:	ea0c 0c00 	and.w	ip, ip, r0
    d72a:	e8c1 cfee 	stlex	lr, ip, [r1]
    d72e:	f1be 0f00 	cmp.w	lr, #0
    d732:	d1f6      	bne.n	d722 <gpio_nrfx_pin_interrupt_configure+0x9e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    d734:	009b      	lsls	r3, r3, #2
    d736:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d73a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    d73e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    d742:	f021 0101 	bic.w	r1, r1, #1
    d746:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    d74a:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    d74e:	4620      	mov	r0, r4
    d750:	2100      	movs	r1, #0
    d752:	f7ff ff15 	bl	d580 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    d756:	68f8      	ldr	r0, [r7, #12]
    d758:	40e8      	lsrs	r0, r5
    d75a:	f010 0001 	ands.w	r0, r0, #1
    d75e:	d04a      	beq.n	d7f6 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
    d760:	6978      	ldr	r0, [r7, #20]
    d762:	40e8      	lsrs	r0, r5
    d764:	f010 0201 	ands.w	r2, r0, #1
    d768:	d058      	beq.n	d81c <gpio_nrfx_pin_interrupt_configure+0x198>
			if (data->double_edge & BIT(pin)) {
    d76a:	69bb      	ldr	r3, [r7, #24]
    d76c:	40eb      	lsrs	r3, r5
    d76e:	07db      	lsls	r3, r3, #31
    d770:	d44c      	bmi.n	d80c <gpio_nrfx_pin_interrupt_configure+0x188>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    d772:	693b      	ldr	r3, [r7, #16]
    d774:	fa23 f505 	lsr.w	r5, r3, r5
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    d778:	f015 0f01 	tst.w	r5, #1
    d77c:	bf14      	ite	ne
    d77e:	2701      	movne	r7, #1
    d780:	2702      	moveq	r7, #2
    d782:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    d784:	2501      	movs	r5, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d786:	4a2e      	ldr	r2, [pc, #184]	; (d840 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
    d788:	fa05 f103 	lsl.w	r1, r5, r3
    d78c:	e8d2 0fef 	ldaex	r0, [r2]
    d790:	ea40 0c01 	orr.w	ip, r0, r1
    d794:	e8c2 cfee 	stlex	lr, ip, [r2]
    d798:	f1be 0f00 	cmp.w	lr, #0
    d79c:	d1f6      	bne.n	d78c <gpio_nrfx_pin_interrupt_configure+0x108>
		if ((prev & BIT(channel)) == 0) {
    d79e:	40d8      	lsrs	r0, r3
    d7a0:	f010 0001 	ands.w	r0, r0, #1
    d7a4:	d134      	bne.n	d810 <gpio_nrfx_pin_interrupt_configure+0x18c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    d7a6:	009a      	lsls	r2, r3, #2
    d7a8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    d7ac:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    d7b0:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
			nrf_gpiote_event_t evt =
    d7b4:	3340      	adds	r3, #64	; 0x40
    d7b6:	f425 3547 	bic.w	r5, r5, #203776	; 0x31c00
    d7ba:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    d7be:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d7c2:	0224      	lsls	r4, r4, #8
    d7c4:	009b      	lsls	r3, r3, #2
    d7c6:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    d7ca:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    d7ce:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d7d0:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    return ((uint32_t)p_reg + event);
    d7d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d7d8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    d7dc:	432c      	orrs	r4, r5
    d7de:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d7e2:	6018      	str	r0, [r3, #0]
    d7e4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    d7e6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    d7ea:	f043 0301 	orr.w	r3, r3, #1
    d7ee:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
    d7f2:	f8c6 1304 	str.w	r1, [r6, #772]	; 0x304
}
    d7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    d7f8:	2001      	movs	r0, #1
    d7fa:	40a8      	lsls	r0, r5
    d7fc:	ea21 0100 	bic.w	r1, r1, r0
    d800:	e760      	b.n	d6c4 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d802:	3301      	adds	r3, #1
    d804:	2b08      	cmp	r3, #8
    d806:	f47f af7c 	bne.w	d702 <gpio_nrfx_pin_interrupt_configure+0x7e>
    d80a:	e7a0      	b.n	d74e <gpio_nrfx_pin_interrupt_configure+0xca>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    d80c:	2703      	movs	r7, #3
    d80e:	e7b8      	b.n	d782 <gpio_nrfx_pin_interrupt_configure+0xfe>
    d810:	3301      	adds	r3, #1
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    d812:	2b08      	cmp	r3, #8
    d814:	d1b8      	bne.n	d788 <gpio_nrfx_pin_interrupt_configure+0x104>
	return -ENODEV;
    d816:	f06f 0012 	mvn.w	r0, #18
    d81a:	e7ec      	b.n	d7f6 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d81c:	693b      	ldr	r3, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d81e:	4620      	mov	r0, r4
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d820:	fa23 f505 	lsr.w	r5, r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    d824:	f015 0f01 	tst.w	r5, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d828:	bf0c      	ite	eq
    d82a:	2103      	moveq	r1, #3
    d82c:	2102      	movne	r1, #2
    d82e:	f7ff fea7 	bl	d580 <nrf_gpio_cfg_sense_set>
	int res = 0;
    d832:	4610      	mov	r0, r2
    d834:	e7df      	b.n	d7f6 <gpio_nrfx_pin_interrupt_configure+0x172>
    d836:	bf00      	nop
    d838:	40842500 	.word	0x40842500
    d83c:	40031000 	.word	0x40031000
    d840:	200102ec 	.word	0x200102ec

0000d844 <gpiote_event_handler>:
{
    d844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d848:	4d3a      	ldr	r5, [pc, #232]	; (d934 <gpiote_event_handler+0xf0>)
    d84a:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    d84c:	2e00      	cmp	r6, #0
    d84e:	d04c      	beq.n	d8ea <gpiote_event_handler+0xa6>
	uint32_t bit = 1U << pin;
    d850:	2701      	movs	r7, #1
	uint32_t pin = 0U;
    d852:	f04f 0800 	mov.w	r8, #0
	uint32_t out = data->pin_int_en;
    d856:	4b38      	ldr	r3, [pc, #224]	; (d938 <gpiote_event_handler+0xf4>)
    d858:	68da      	ldr	r2, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    d85a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
    d85e:	4301      	orrs	r1, r0
    d860:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    d864:	4935      	ldr	r1, [pc, #212]	; (d93c <gpiote_event_handler+0xf8>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    d866:	691b      	ldr	r3, [r3, #16]
    d868:	690c      	ldr	r4, [r1, #16]
    d86a:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    d86c:	ea22 0404 	bic.w	r4, r2, r4
	while (level_pins) {
    d870:	bb72      	cbnz	r2, d8d0 <gpiote_event_handler+0x8c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d872:	602a      	str	r2, [r5, #0]
    d874:	682b      	ldr	r3, [r5, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    d876:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    d878:	2501      	movs	r5, #1
    d87a:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    d87c:	4830      	ldr	r0, [pc, #192]	; (d940 <gpiote_event_handler+0xfc>)
    d87e:	4931      	ldr	r1, [pc, #196]	; (d944 <gpiote_event_handler+0x100>)
    d880:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    d884:	fa05 fc03 	lsl.w	ip, r5, r3
    d888:	ea1c 0f02 	tst.w	ip, r2
    d88c:	d00f      	beq.n	d8ae <gpiote_event_handler+0x6a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d88e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d892:	b162      	cbz	r2, d8ae <gpiote_event_handler+0x6a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d894:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    d898:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    d89c:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    d8a0:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    d8a4:	fa05 f202 	lsl.w	r2, r5, r2
    d8a8:	4314      	orrs	r4, r2
    d8aa:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    d8ae:	3301      	adds	r3, #1
    d8b0:	2b08      	cmp	r3, #8
    d8b2:	d1e5      	bne.n	d880 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    d8b4:	b9dc      	cbnz	r4, d8ee <gpiote_event_handler+0xaa>
	if (port_event) {
    d8b6:	b14e      	cbz	r6, d8cc <gpiote_event_handler+0x88>
	uint32_t bit = 1U << pin;
    d8b8:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    d8ba:	2600      	movs	r6, #0
	uint32_t out = data->pin_int_en;
    d8bc:	4c1e      	ldr	r4, [pc, #120]	; (d938 <gpiote_event_handler+0xf4>)
    d8be:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    d8c0:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
    d8c4:	4301      	orrs	r1, r0
    d8c6:	ea22 0201 	bic.w	r2, r2, r1
	while (level_pins) {
    d8ca:	bb0a      	cbnz	r2, d910 <gpiote_event_handler+0xcc>
}
    d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    d8d0:	423a      	tst	r2, r7
    d8d2:	d006      	beq.n	d8e2 <gpiote_event_handler+0x9e>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    d8d4:	2100      	movs	r1, #0
    d8d6:	f008 001f 	and.w	r0, r8, #31
    d8da:	f7ff fe51 	bl	d580 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    d8de:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    d8e2:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    d8e6:	007f      	lsls	r7, r7, #1
    d8e8:	e7c2      	b.n	d870 <gpiote_event_handler+0x2c>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    d8ea:	4634      	mov	r4, r6
    d8ec:	e7c3      	b.n	d876 <gpiote_event_handler+0x32>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d8ee:	4b12      	ldr	r3, [pc, #72]	; (d938 <gpiote_event_handler+0xf4>)
    d8f0:	6859      	ldr	r1, [r3, #4]
    d8f2:	2900      	cmp	r1, #0
    d8f4:	d0df      	beq.n	d8b6 <gpiote_event_handler+0x72>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d8f6:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d8f8:	4f13      	ldr	r7, [pc, #76]	; (d948 <gpiote_event_handler+0x104>)
		if (cb->pin_mask & pins) {
    d8fa:	688a      	ldr	r2, [r1, #8]
    d8fc:	4022      	ands	r2, r4
    d8fe:	d002      	beq.n	d906 <gpiote_event_handler+0xc2>
			cb->handler(port, cb, cb->pin_mask & pins);
    d900:	684b      	ldr	r3, [r1, #4]
    d902:	4638      	mov	r0, r7
    d904:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d906:	2d00      	cmp	r5, #0
    d908:	d0d5      	beq.n	d8b6 <gpiote_event_handler+0x72>
    d90a:	4629      	mov	r1, r5
    d90c:	682d      	ldr	r5, [r5, #0]
    d90e:	e7f4      	b.n	d8fa <gpiote_event_handler+0xb6>
		if (level_pins & bit) {
    d910:	4215      	tst	r5, r2
    d912:	d00c      	beq.n	d92e <gpiote_event_handler+0xea>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d914:	6923      	ldr	r3, [r4, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d916:	f006 001f 	and.w	r0, r6, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    d91a:	40f3      	lsrs	r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
    d91c:	f013 0f01 	tst.w	r3, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    d920:	bf0c      	ite	eq
    d922:	2103      	moveq	r1, #3
    d924:	2102      	movne	r1, #2
    d926:	f7ff fe2b 	bl	d580 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    d92a:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    d92e:	3601      	adds	r6, #1
		bit <<= 1;
    d930:	006d      	lsls	r5, r5, #1
    d932:	e7ca      	b.n	d8ca <gpiote_event_handler+0x86>
    d934:	4003117c 	.word	0x4003117c
    d938:	200102d0 	.word	0x200102d0
    d93c:	40842500 	.word	0x40842500
    d940:	40031000 	.word	0x40031000
    d944:	40031100 	.word	0x40031100
    d948:	20010108 	.word	0x20010108

0000d94c <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
    d94c:	b510      	push	{r4, lr}
    d94e:	4604      	mov	r4, r0
    d950:	2200      	movs	r2, #0
    d952:	2101      	movs	r1, #1
    d954:	200a      	movs	r0, #10
    d956:	f7ff fa5b 	bl	ce10 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
    d95a:	6860      	ldr	r0, [r4, #4]
    d95c:	68e3      	ldr	r3, [r4, #12]
    d95e:	4a06      	ldr	r2, [pc, #24]	; (d978 <twim_2_init+0x2c>)
    d960:	f100 0108 	add.w	r1, r0, #8
    d964:	f000 fdcc 	bl	e500 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
    d968:	4b04      	ldr	r3, [pc, #16]	; (d97c <twim_2_init+0x30>)
    d96a:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(2);
    d96c:	bf14      	ite	ne
    d96e:	f06f 000f 	mvnne.w	r0, #15
    d972:	2000      	moveq	r0, #0
    d974:	bd10      	pop	{r4, pc}
    d976:	bf00      	nop
    d978:	0000d981 	.word	0x0000d981
    d97c:	0bad0000 	.word	0x0bad0000

0000d980 <event_handler>:
	switch (p_event->type) {
    d980:	7803      	ldrb	r3, [r0, #0]
    d982:	2b01      	cmp	r3, #1
    d984:	d00a      	beq.n	d99c <event_handler+0x1c>
    d986:	b11b      	cbz	r3, d990 <event_handler+0x10>
    d988:	2b02      	cmp	r3, #2
    d98a:	d009      	beq.n	d9a0 <event_handler+0x20>
		dev_data->res = NRFX_ERROR_INTERNAL;
    d98c:	4b05      	ldr	r3, [pc, #20]	; (d9a4 <event_handler+0x24>)
    d98e:	e000      	b.n	d992 <event_handler+0x12>
		dev_data->res = NRFX_SUCCESS;
    d990:	4b05      	ldr	r3, [pc, #20]	; (d9a8 <event_handler+0x28>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    d992:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    d994:	f101 0010 	add.w	r0, r1, #16
    d998:	f001 bcbc 	b.w	f314 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    d99c:	4b03      	ldr	r3, [pc, #12]	; (d9ac <event_handler+0x2c>)
    d99e:	e7f8      	b.n	d992 <event_handler+0x12>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    d9a0:	4b03      	ldr	r3, [pc, #12]	; (d9b0 <event_handler+0x30>)
    d9a2:	e7f6      	b.n	d992 <event_handler+0x12>
    d9a4:	0bad0001 	.word	0x0bad0001
    d9a8:	0bad0000 	.word	0x0bad0000
    d9ac:	0bae0001 	.word	0x0bae0001
    d9b0:	0bae0002 	.word	0x0bae0002

0000d9b4 <i2c_nrfx_twim_transfer>:
{
    d9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9b8:	461d      	mov	r5, r3
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    d9ba:	68c4      	ldr	r4, [r0, #12]
{
    d9bc:	b089      	sub	sp, #36	; 0x24
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
    d9be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
{
    d9c0:	4606      	mov	r6, r0
    d9c2:	468a      	mov	sl, r1
    d9c4:	4691      	mov	r9, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
    d9c6:	2100      	movs	r1, #0
    d9c8:	2214      	movs	r2, #20
    d9ca:	a803      	add	r0, sp, #12
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
    d9cc:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
    d9d0:	9300      	str	r3, [sp, #0]
	nrfx_twim_xfer_desc_t cur_xfer = {
    d9d2:	f002 fada 	bl	ff8a <memset>
    d9d6:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
    d9da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d9e2:	4620      	mov	r0, r4
    d9e4:	f001 fcb6 	bl	f354 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    d9e8:	68f0      	ldr	r0, [r6, #12]
    d9ea:	3010      	adds	r0, #16
	for (size_t i = 0; i < num_msgs; i++) {
    d9ec:	2700      	movs	r7, #0
    d9ee:	2200      	movs	r2, #0
    d9f0:	2300      	movs	r3, #0
    d9f2:	f001 fcaf 	bl	f354 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
    d9f6:	6870      	ldr	r0, [r6, #4]
    d9f8:	f000 fdc8 	bl	e58c <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    d9fc:	4655      	mov	r5, sl
	uint32_t concat_len = 0;
    d9fe:	463c      	mov	r4, r7
		if (res != NRFX_SUCCESS) {
    da00:	f8df b114 	ldr.w	fp, [pc, #276]	; db18 <i2c_nrfx_twim_transfer+0x164>
	for (size_t i = 0; i < num_msgs; i++) {
    da04:	454f      	cmp	r7, r9
    da06:	d301      	bcc.n	da0c <i2c_nrfx_twim_transfer+0x58>
    da08:	2400      	movs	r4, #0
    da0a:	e02e      	b.n	da6a <i2c_nrfx_twim_transfer+0xb6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    da0c:	7a29      	ldrb	r1, [r5, #8]
    da0e:	070b      	lsls	r3, r1, #28
    da10:	d477      	bmi.n	db02 <i2c_nrfx_twim_transfer+0x14e>
			&& ((msgs[i].flags & I2C_MSG_READ)
    da12:	9b00      	ldr	r3, [sp, #0]
    da14:	b16b      	cbz	r3, da32 <i2c_nrfx_twim_transfer+0x7e>
			&& ((i + 1) < num_msgs)
    da16:	1c7b      	adds	r3, r7, #1
    da18:	4599      	cmp	r9, r3
    da1a:	d90a      	bls.n	da32 <i2c_nrfx_twim_transfer+0x7e>
			&& !(msgs[i].flags & I2C_MSG_STOP)
    da1c:	0788      	lsls	r0, r1, #30
    da1e:	d408      	bmi.n	da32 <i2c_nrfx_twim_transfer+0x7e>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
    da20:	7d2b      	ldrb	r3, [r5, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
    da22:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
    da26:	f002 0201 	and.w	r2, r2, #1
    da2a:	f003 0304 	and.w	r3, r3, #4
    da2e:	4313      	orrs	r3, r2
    da30:	d025      	beq.n	da7e <i2c_nrfx_twim_transfer+0xca>
		if (concat_next || (concat_len != 0)) {
    da32:	2c00      	cmp	r4, #0
    da34:	d13c      	bne.n	dab0 <i2c_nrfx_twim_transfer+0xfc>
			cur_xfer.p_primary_buf = msgs[i].buf;
    da36:	2400      	movs	r4, #0
    da38:	682b      	ldr	r3, [r5, #0]
    da3a:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
    da3c:	686b      	ldr	r3, [r5, #4]
    da3e:	9304      	str	r3, [sp, #16]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    da40:	7a2b      	ldrb	r3, [r5, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    da42:	a903      	add	r1, sp, #12
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
    da44:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    da48:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
    da4c:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
    da50:	6870      	ldr	r0, [r6, #4]
    da52:	bf0c      	ite	eq
    da54:	2220      	moveq	r2, #32
    da56:	2200      	movne	r2, #0
    da58:	f000 fdc4 	bl	e5e4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
    da5c:	4558      	cmp	r0, fp
    da5e:	d029      	beq.n	dab4 <i2c_nrfx_twim_transfer+0x100>
			if (res == NRFX_ERROR_BUSY) {
    da60:	4b2c      	ldr	r3, [pc, #176]	; (db14 <i2c_nrfx_twim_transfer+0x160>)
    da62:	4298      	cmp	r0, r3
    da64:	d053      	beq.n	db0e <i2c_nrfx_twim_transfer+0x15a>
				ret = -EIO;
    da66:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
    da6a:	6870      	ldr	r0, [r6, #4]
    da6c:	f000 fd9e 	bl	e5ac <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    da70:	68f0      	ldr	r0, [r6, #12]
	z_impl_k_sem_give(sem);
    da72:	f001 fc4f 	bl	f314 <z_impl_k_sem_give>
}
    da76:	4620      	mov	r0, r4
    da78:	b009      	add	sp, #36	; 0x24
    da7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
    da7e:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
    da80:	686a      	ldr	r2, [r5, #4]
    da82:	9800      	ldr	r0, [sp, #0]
    da84:	eb02 0c04 	add.w	ip, r2, r4
    da88:	4584      	cmp	ip, r0
    da8a:	d83d      	bhi.n	db08 <i2c_nrfx_twim_transfer+0x154>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
    da8c:	07c9      	lsls	r1, r1, #31
    da8e:	d406      	bmi.n	da9e <i2c_nrfx_twim_transfer+0xea>
				memcpy(concat_buf + concat_len,
    da90:	6829      	ldr	r1, [r5, #0]
    da92:	eb08 0004 	add.w	r0, r8, r4
    da96:	9301      	str	r3, [sp, #4]
    da98:	f002 fa4d 	bl	ff36 <memcpy>
    da9c:	9b01      	ldr	r3, [sp, #4]
			concat_len += msgs[i].len;
    da9e:	686a      	ldr	r2, [r5, #4]
    daa0:	4414      	add	r4, r2
		if (concat_next) {
    daa2:	b9c3      	cbnz	r3, dad6 <i2c_nrfx_twim_transfer+0x122>
		if (concat_len == 0) {
    daa4:	2c00      	cmp	r4, #0
    daa6:	d0c6      	beq.n	da36 <i2c_nrfx_twim_transfer+0x82>
			cur_xfer.p_primary_buf = concat_buf;
    daa8:	f8cd 8018 	str.w	r8, [sp, #24]
			cur_xfer.primary_length = concat_len;
    daac:	9404      	str	r4, [sp, #16]
    daae:	e7c7      	b.n	da40 <i2c_nrfx_twim_transfer+0x8c>
			&& ((msgs[i].flags & I2C_MSG_READ)
    dab0:	2300      	movs	r3, #0
    dab2:	e7e5      	b.n	da80 <i2c_nrfx_twim_transfer+0xcc>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    dab4:	68f0      	ldr	r0, [r6, #12]
    dab6:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    dab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dabc:	2300      	movs	r3, #0
    dabe:	f001 fc49 	bl	f354 <z_impl_k_sem_take>
		if (ret != 0) {
    dac2:	2800      	cmp	r0, #0
    dac4:	d1cf      	bne.n	da66 <i2c_nrfx_twim_transfer+0xb2>
		res = get_dev_data(dev)->res;
    dac6:	68f3      	ldr	r3, [r6, #12]
    dac8:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    daca:	455b      	cmp	r3, fp
    dacc:	d1cb      	bne.n	da66 <i2c_nrfx_twim_transfer+0xb2>
		if ((msgs[i].flags & I2C_MSG_READ)
    dace:	7a2b      	ldrb	r3, [r5, #8]
    dad0:	07db      	lsls	r3, r3, #31
    dad2:	d403      	bmi.n	dadc <i2c_nrfx_twim_transfer+0x128>
		concat_len = 0;
    dad4:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
    dad6:	3701      	adds	r7, #1
    dad8:	350c      	adds	r5, #12
    dada:	e793      	b.n	da04 <i2c_nrfx_twim_transfer+0x50>
		    && cur_xfer.p_primary_buf == concat_buf) {
    dadc:	9b06      	ldr	r3, [sp, #24]
    dade:	4598      	cmp	r8, r3
    dae0:	d1f8      	bne.n	dad4 <i2c_nrfx_twim_transfer+0x120>
			while (concat_len >= msgs[j].len) {
    dae2:	230c      	movs	r3, #12
    dae4:	fb03 a307 	mla	r3, r3, r7, sl
    dae8:	3b0c      	subs	r3, #12
    daea:	691a      	ldr	r2, [r3, #16]
    daec:	4294      	cmp	r4, r2
    daee:	d3f1      	bcc.n	dad4 <i2c_nrfx_twim_transfer+0x120>
				concat_len -= msgs[j].len;
    daf0:	1aa4      	subs	r4, r4, r2
				memcpy(msgs[j].buf,
    daf2:	68d8      	ldr	r0, [r3, #12]
    daf4:	eb08 0104 	add.w	r1, r8, r4
    daf8:	9301      	str	r3, [sp, #4]
    dafa:	f002 fa1c 	bl	ff36 <memcpy>
    dafe:	9b01      	ldr	r3, [sp, #4]
				j--;
    db00:	e7f2      	b.n	dae8 <i2c_nrfx_twim_transfer+0x134>
			ret = -ENOTSUP;
    db02:	f06f 0422 	mvn.w	r4, #34	; 0x22
    db06:	e7b0      	b.n	da6a <i2c_nrfx_twim_transfer+0xb6>
				ret = -ENOSPC;
    db08:	f06f 041b 	mvn.w	r4, #27
    db0c:	e7ad      	b.n	da6a <i2c_nrfx_twim_transfer+0xb6>
				ret = -EBUSY;
    db0e:	f06f 040f 	mvn.w	r4, #15
    db12:	e7aa      	b.n	da6a <i2c_nrfx_twim_transfer+0xb6>
    db14:	0bad000b 	.word	0x0bad000b
    db18:	0bad0000 	.word	0x0bad0000

0000db1c <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
    db1c:	b538      	push	{r3, r4, r5, lr}
    db1e:	4605      	mov	r5, r0
    db20:	2200      	movs	r2, #0
    db22:	2101      	movs	r1, #1
    db24:	200b      	movs	r0, #11
    db26:	f7ff f973 	bl	ce10 <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
    db2a:	68ec      	ldr	r4, [r5, #12]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    db2c:	4a09      	ldr	r2, [pc, #36]	; (db54 <spi_3_init+0x38>)
	data->dev = dev;
    db2e:	64a5      	str	r5, [r4, #72]	; 0x48
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
    db30:	6868      	ldr	r0, [r5, #4]
    db32:	4623      	mov	r3, r4
    db34:	f100 010c 	add.w	r1, r0, #12
    db38:	f000 fb7e 	bl	e238 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    db3c:	4b06      	ldr	r3, [pc, #24]	; (db58 <spi_3_init+0x3c>)
    db3e:	4298      	cmp	r0, r3
    db40:	d104      	bne.n	db4c <spi_3_init+0x30>
	spi_context_unlock_unconditionally(&data->ctx);
    db42:	4620      	mov	r0, r4
    db44:	f002 fae1 	bl	1010a <spi_context_unlock_unconditionally>
	return 0;
    db48:	2000      	movs	r0, #0
SPI_NRFX_SPIM_DEVICE(3);
    db4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    db4c:	f06f 000f 	mvn.w	r0, #15
SPI_NRFX_SPIM_DEVICE(3);
    db50:	e7fb      	b.n	db4a <spi_3_init+0x2e>
    db52:	bf00      	nop
    db54:	0001014b 	.word	0x0001014b
    db58:	0bad0000 	.word	0x0bad0000

0000db5c <transfer_next_chunk>:
{
    db5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    db5e:	68c5      	ldr	r5, [r0, #12]
{
    db60:	b085      	sub	sp, #20
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    db62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    db64:	6c6c      	ldr	r4, [r5, #68]	; 0x44
    db66:	b97b      	cbnz	r3, db88 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    db68:	b99c      	cbnz	r4, db92 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    db6a:	2200      	movs	r2, #0
    db6c:	4628      	mov	r0, r5
    db6e:	4611      	mov	r1, r2
    db70:	f002 faa6 	bl	100c0 <_spi_context_cs_control.isra.5>
	ctx->sync_status = status;
    db74:	626c      	str	r4, [r5, #36]	; 0x24
	z_impl_k_sem_give(sem);
    db76:	f105 0014 	add.w	r0, r5, #20
    db7a:	f001 fbcb 	bl	f314 <z_impl_k_sem_give>
	dev_data->busy = false;
    db7e:	2300      	movs	r3, #0
    db80:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
    db84:	b005      	add	sp, #20
    db86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    db88:	2c00      	cmp	r4, #0
    db8a:	d035      	beq.n	dbf8 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    db8c:	429c      	cmp	r4, r3
    db8e:	bf28      	it	cs
    db90:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    db92:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    db94:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    db96:	b179      	cbz	r1, dbb8 <transfer_next_chunk+0x5c>
    db98:	b173      	cbz	r3, dbb8 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    db9a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    db9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    dba2:	d009      	beq.n	dbb8 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    dba4:	2c08      	cmp	r4, #8
    dba6:	bf28      	it	cs
    dba8:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    dbaa:	f105 0751 	add.w	r7, r5, #81	; 0x51
    dbae:	4622      	mov	r2, r4
    dbb0:	4638      	mov	r0, r7
    dbb2:	f002 f9c0 	bl	ff36 <memcpy>
			tx_buf = dev_data->buffer;
    dbb6:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    dbb8:	68b3      	ldr	r3, [r6, #8]
		xfer.p_tx_buffer = tx_buf;
    dbba:	9100      	str	r1, [sp, #0]
    dbbc:	429c      	cmp	r4, r3
    dbbe:	bf28      	it	cs
    dbc0:	461c      	movcs	r4, r3
    dbc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
		dev_data->chunk_len = chunk_len;
    dbc4:	64ec      	str	r4, [r5, #76]	; 0x4c
    dbc6:	b11b      	cbz	r3, dbd0 <transfer_next_chunk+0x74>
    dbc8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    dbca:	2b00      	cmp	r3, #0
    dbcc:	bf18      	it	ne
    dbce:	4623      	movne	r3, r4
    dbd0:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    dbd2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    dbd4:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    dbd6:	b11b      	cbz	r3, dbe0 <transfer_next_chunk+0x84>
    dbd8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    dbda:	2b00      	cmp	r3, #0
    dbdc:	bf18      	it	ne
    dbde:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    dbe0:	2200      	movs	r2, #0
    dbe2:	4669      	mov	r1, sp
    dbe4:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    dbe6:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    dbe8:	f000 fbcc 	bl	e384 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    dbec:	4b03      	ldr	r3, [pc, #12]	; (dbfc <transfer_next_chunk+0xa0>)
    dbee:	4298      	cmp	r0, r3
    dbf0:	d0c8      	beq.n	db84 <transfer_next_chunk+0x28>
			error = -EIO;
    dbf2:	f06f 0404 	mvn.w	r4, #4
    dbf6:	e7b8      	b.n	db6a <transfer_next_chunk+0xe>
	} else if (!ctx->rx_len) {
    dbf8:	461c      	mov	r4, r3
    dbfa:	e7ca      	b.n	db92 <transfer_next_chunk+0x36>
    dbfc:	0bad0000 	.word	0x0bad0000

0000dc00 <spi_nrfx_transceive>:
{
    dc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    dc04:	68c4      	ldr	r4, [r0, #12]
{
    dc06:	4681      	mov	r9, r0
    dc08:	460f      	mov	r7, r1
    dc0a:	4616      	mov	r6, r2
    dc0c:	461d      	mov	r5, r3
	k_sem_take(&ctx->lock, K_FOREVER);
    dc0e:	f104 0b04 	add.w	fp, r4, #4
	return z_impl_k_sem_take(sem, timeout);
    dc12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dc1a:	4658      	mov	r0, fp
    dc1c:	f001 fb9a 	bl	f354 <z_impl_k_sem_take>
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
    dc20:	f8d9 200c 	ldr.w	r2, [r9, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
    dc24:	6813      	ldr	r3, [r2, #0]
    dc26:	429f      	cmp	r7, r3
    dc28:	d06a      	beq.n	dd00 <spi_nrfx_transceive+0x100>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    dc2a:	f641 0109 	movw	r1, #6153	; 0x1809
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    dc2e:	88bb      	ldrh	r3, [r7, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    dc30:	420b      	tst	r3, r1
    dc32:	f040 80b8 	bne.w	dda6 <spi_nrfx_transceive+0x1a6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    dc36:	f3c3 1345 	ubfx	r3, r3, #5, #6
    dc3a:	2b08      	cmp	r3, #8
    dc3c:	f040 80b3 	bne.w	dda6 <spi_nrfx_transceive+0x1a6>
	if (spi_cfg->frequency < 125000) {
    dc40:	6839      	ldr	r1, [r7, #0]
    dc42:	4b5a      	ldr	r3, [pc, #360]	; (ddac <spi_nrfx_transceive+0x1ac>)
    dc44:	4299      	cmp	r1, r3
    dc46:	f240 80ae 	bls.w	dda6 <spi_nrfx_transceive+0x1a6>
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    dc4a:	f8d9 3004 	ldr.w	r3, [r9, #4]
	ctx->config = spi_cfg;
    dc4e:	6017      	str	r7, [r2, #0]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
    dc50:	9301      	str	r3, [sp, #4]
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    dc52:	68bb      	ldr	r3, [r7, #8]
    dc54:	b30b      	cbz	r3, dc9a <spi_nrfx_transceive+0x9a>
    dc56:	6818      	ldr	r0, [r3, #0]
    dc58:	b1f8      	cbz	r0, dc9a <spi_nrfx_transceive+0x9a>
				   ctx->config->cs->gpio_dt_flags |
    dc5a:	f893 8009 	ldrb.w	r8, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    dc5e:	7a1a      	ldrb	r2, [r3, #8]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    dc60:	f018 0f01 	tst.w	r8, #1
    dc64:	bf0c      	ite	eq
    dc66:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    dc6a:	f488 6820 	eorne.w	r8, r8, #2560	; 0xa00
    dc6e:	9200      	str	r2, [sp, #0]
	struct gpio_driver_data *data =
    dc70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	return api->pin_configure(port, pin, flags);
    dc74:	6883      	ldr	r3, [r0, #8]
    dc76:	4642      	mov	r2, r8
    dc78:	681b      	ldr	r3, [r3, #0]
    dc7a:	9900      	ldr	r1, [sp, #0]
    dc7c:	4798      	blx	r3
	if (ret != 0) {
    dc7e:	b960      	cbnz	r0, dc9a <spi_nrfx_transceive+0x9a>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    dc80:	2301      	movs	r3, #1
    dc82:	9900      	ldr	r1, [sp, #0]
    dc84:	f8da 2000 	ldr.w	r2, [sl]
    dc88:	408b      	lsls	r3, r1
    dc8a:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    dc8e:	bf14      	ite	ne
    dc90:	4313      	orrne	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    dc92:	ea22 0303 	biceq.w	r3, r2, r3
    dc96:	f8ca 3000 	str.w	r3, [sl]
	nrf_spim_configure(spim->p_reg,
    dc9a:	9b01      	ldr	r3, [sp, #4]
    dc9c:	6819      	ldr	r1, [r3, #0]
    dc9e:	88bb      	ldrh	r3, [r7, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    dca0:	0798      	lsls	r0, r3, #30
    dca2:	f003 0204 	and.w	r2, r3, #4
    dca6:	d55b      	bpl.n	dd60 <spi_nrfx_transceive+0x160>
			return NRF_SPIM_MODE_2;
    dca8:	2a00      	cmp	r2, #0
    dcaa:	bf14      	ite	ne
    dcac:	2203      	movne	r2, #3
    dcae:	2202      	moveq	r2, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
    dcb0:	2a02      	cmp	r2, #2
	if (operation & SPI_TRANSFER_LSB) {
    dcb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
    dcb6:	d057      	beq.n	dd68 <spi_nrfx_transceive+0x168>
    dcb8:	2a03      	cmp	r2, #3
    dcba:	d058      	beq.n	dd6e <spi_nrfx_transceive+0x16e>
    dcbc:	2a01      	cmp	r2, #1
    dcbe:	d101      	bne.n	dcc4 <spi_nrfx_transceive+0xc4>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    dcc0:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    dcc4:	f8c1 3554 	str.w	r3, [r1, #1364]	; 0x554
	if (frequency < 250000) {
    dcc8:	4a39      	ldr	r2, [pc, #228]	; (ddb0 <spi_nrfx_transceive+0x1b0>)
	nrf_spim_frequency_set(spim->p_reg,
    dcca:	683b      	ldr	r3, [r7, #0]
	if (frequency < 250000) {
    dccc:	4293      	cmp	r3, r2
    dcce:	d951      	bls.n	dd74 <spi_nrfx_transceive+0x174>
	} else if (frequency < 500000) {
    dcd0:	4a38      	ldr	r2, [pc, #224]	; (ddb4 <spi_nrfx_transceive+0x1b4>)
    dcd2:	4293      	cmp	r3, r2
    dcd4:	d951      	bls.n	dd7a <spi_nrfx_transceive+0x17a>
	} else if (frequency < 1000000) {
    dcd6:	4a38      	ldr	r2, [pc, #224]	; (ddb8 <spi_nrfx_transceive+0x1b8>)
    dcd8:	4293      	cmp	r3, r2
    dcda:	d951      	bls.n	dd80 <spi_nrfx_transceive+0x180>
	} else if (frequency < 2000000) {
    dcdc:	4a37      	ldr	r2, [pc, #220]	; (ddbc <spi_nrfx_transceive+0x1bc>)
    dcde:	4293      	cmp	r3, r2
    dce0:	d951      	bls.n	dd86 <spi_nrfx_transceive+0x186>
	} else if (frequency < 4000000) {
    dce2:	4a37      	ldr	r2, [pc, #220]	; (ddc0 <spi_nrfx_transceive+0x1c0>)
    dce4:	4293      	cmp	r3, r2
    dce6:	d951      	bls.n	dd8c <spi_nrfx_transceive+0x18c>
		return NRF_SPIM_FREQ_8M;
    dce8:	f502 1274 	add.w	r2, r2, #3997696	; 0x3d0000
    dcec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
    dcf0:	4293      	cmp	r3, r2
    dcf2:	bf94      	ite	ls
    dcf4:	f04f 4380 	movls.w	r3, #1073741824	; 0x40000000
    dcf8:	f04f 4300 	movhi.w	r3, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
    dcfc:	f8c1 3524 	str.w	r3, [r1, #1316]	; 0x524
		dev_data->busy = true;
    dd00:	2301      	movs	r3, #1
    dd02:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	if (tx_bufs) {
    dd06:	2e00      	cmp	r6, #0
    dd08:	d043      	beq.n	dd92 <spi_nrfx_transceive+0x192>
		ctx->current_tx = tx_bufs->buffers;
    dd0a:	6833      	ldr	r3, [r6, #0]
		ctx->tx_count = tx_bufs->count;
    dd0c:	6872      	ldr	r2, [r6, #4]
		ctx->current_tx = tx_bufs->buffers;
    dd0e:	62a3      	str	r3, [r4, #40]	; 0x28
		ctx->tx_count = tx_bufs->count;
    dd10:	62e2      	str	r2, [r4, #44]	; 0x2c
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    dd12:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    dd14:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    dd16:	63a2      	str	r2, [r4, #56]	; 0x38
		ctx->tx_len = ctx->current_tx->len / dfs;
    dd18:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (rx_bufs) {
    dd1a:	2d00      	cmp	r5, #0
    dd1c:	d03e      	beq.n	dd9c <spi_nrfx_transceive+0x19c>
		ctx->current_rx = rx_bufs->buffers;
    dd1e:	682b      	ldr	r3, [r5, #0]
		ctx->rx_count = rx_bufs->count;
    dd20:	686a      	ldr	r2, [r5, #4]
		ctx->current_rx = rx_bufs->buffers;
    dd22:	6323      	str	r3, [r4, #48]	; 0x30
		ctx->rx_count = rx_bufs->count;
    dd24:	6362      	str	r2, [r4, #52]	; 0x34
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    dd26:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    dd28:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    dd2a:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->rx_len = ctx->current_rx->len / dfs;
    dd2c:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->sync_status = 0;
    dd2e:	2200      	movs	r2, #0
	_spi_context_cs_control(ctx, on, false);
    dd30:	2101      	movs	r1, #1
	ctx->sync_status = 0;
    dd32:	6262      	str	r2, [r4, #36]	; 0x24
	_spi_context_cs_control(ctx, on, false);
    dd34:	4620      	mov	r0, r4
    dd36:	f002 f9c3 	bl	100c0 <_spi_context_cs_control.isra.5>
		transfer_next_chunk(dev);
    dd3a:	4648      	mov	r0, r9
    dd3c:	f7ff ff0e 	bl	db5c <transfer_next_chunk>
    dd40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd44:	f104 0014 	add.w	r0, r4, #20
    dd48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd4c:	f001 fb02 	bl	f354 <z_impl_k_sem_take>
	status = ctx->sync_status;
    dd50:	6a64      	ldr	r4, [r4, #36]	; 0x24
	z_impl_k_sem_give(sem);
    dd52:	4658      	mov	r0, fp
    dd54:	f001 fade 	bl	f314 <z_impl_k_sem_give>
}
    dd58:	4620      	mov	r0, r4
    dd5a:	b003      	add	sp, #12
    dd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return NRF_SPIM_MODE_0;
    dd60:	3200      	adds	r2, #0
    dd62:	bf18      	it	ne
    dd64:	2201      	movne	r2, #1
    dd66:	e7a3      	b.n	dcb0 <spi_nrfx_transceive+0xb0>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    dd68:	f043 0304 	orr.w	r3, r3, #4
        break;
    dd6c:	e7aa      	b.n	dcc4 <spi_nrfx_transceive+0xc4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    dd6e:	f043 0306 	orr.w	r3, r3, #6
        break;
    dd72:	e7a7      	b.n	dcc4 <spi_nrfx_transceive+0xc4>
		return NRF_SPIM_FREQ_125K;
    dd74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    dd78:	e7c0      	b.n	dcfc <spi_nrfx_transceive+0xfc>
		return NRF_SPIM_FREQ_250K;
    dd7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    dd7e:	e7bd      	b.n	dcfc <spi_nrfx_transceive+0xfc>
		return NRF_SPIM_FREQ_500K;
    dd80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    dd84:	e7ba      	b.n	dcfc <spi_nrfx_transceive+0xfc>
		return NRF_SPIM_FREQ_1M;
    dd86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dd8a:	e7b7      	b.n	dcfc <spi_nrfx_transceive+0xfc>
		return NRF_SPIM_FREQ_2M;
    dd8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    dd90:	e7b4      	b.n	dcfc <spi_nrfx_transceive+0xfc>
		ctx->tx_count = 0;
    dd92:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
		ctx->tx_len = 0;
    dd96:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
    dd9a:	e7be      	b.n	dd1a <spi_nrfx_transceive+0x11a>
		ctx->rx_count = 0;
    dd9c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
		ctx->rx_len = 0;
    dda0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    dda4:	e7c3      	b.n	dd2e <spi_nrfx_transceive+0x12e>
		return -EINVAL;
    dda6:	f06f 0415 	mvn.w	r4, #21
    ddaa:	e7d2      	b.n	dd52 <spi_nrfx_transceive+0x152>
    ddac:	0001e847 	.word	0x0001e847
    ddb0:	0003d08f 	.word	0x0003d08f
    ddb4:	0007a11f 	.word	0x0007a11f
    ddb8:	000f423f 	.word	0x000f423f
    ddbc:	001e847f 	.word	0x001e847f
    ddc0:	003d08ff 	.word	0x003d08ff

0000ddc4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    ddc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    ddc6:	794b      	ldrb	r3, [r1, #5]
    ddc8:	2b01      	cmp	r3, #1
    ddca:	d027      	beq.n	de1c <uarte_nrfx_configure+0x58>
    ddcc:	2b03      	cmp	r3, #3
    ddce:	d122      	bne.n	de16 <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ddd0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ddd2:	798b      	ldrb	r3, [r1, #6]
    ddd4:	2b03      	cmp	r3, #3
    ddd6:	d11e      	bne.n	de16 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    ddd8:	79cc      	ldrb	r4, [r1, #7]
    ddda:	b124      	cbz	r4, dde6 <uarte_nrfx_configure+0x22>
    dddc:	2c01      	cmp	r4, #1
    ddde:	d11a      	bne.n	de16 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    dde0:	6843      	ldr	r3, [r0, #4]
    dde2:	791b      	ldrb	r3, [r3, #4]
    dde4:	b1bb      	cbz	r3, de16 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    dde6:	790a      	ldrb	r2, [r1, #4]
    dde8:	b112      	cbz	r2, ddf0 <uarte_nrfx_configure+0x2c>
    ddea:	2a02      	cmp	r2, #2
    ddec:	d113      	bne.n	de16 <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ddee:	220e      	movs	r2, #14
	switch (baudrate) {
    ddf0:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ddf4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    ddf6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    ddf8:	42bb      	cmp	r3, r7
	return config->uarte_regs;
    ddfa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    ddfc:	d063      	beq.n	dec6 <uarte_nrfx_configure+0x102>
    ddfe:	d829      	bhi.n	de54 <uarte_nrfx_configure+0x90>
    de00:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    de04:	d062      	beq.n	decc <uarte_nrfx_configure+0x108>
    de06:	d814      	bhi.n	de32 <uarte_nrfx_configure+0x6e>
    de08:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    de0c:	d060      	beq.n	ded0 <uarte_nrfx_configure+0x10c>
    de0e:	d807      	bhi.n	de20 <uarte_nrfx_configure+0x5c>
    de10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    de14:	d05f      	beq.n	ded6 <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
    de16:	f06f 0022 	mvn.w	r0, #34	; 0x22
    de1a:	e053      	b.n	dec4 <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    de1c:	2600      	movs	r6, #0
    de1e:	e7d8      	b.n	ddd2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    de20:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    de24:	d05a      	beq.n	dedc <uarte_nrfx_configure+0x118>
    de26:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    de2a:	d1f4      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    de2c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    de30:	e03c      	b.n	deac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    de32:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    de36:	d054      	beq.n	dee2 <uarte_nrfx_configure+0x11e>
    de38:	d804      	bhi.n	de44 <uarte_nrfx_configure+0x80>
    de3a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    de3e:	d1ea      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    de40:	4b33      	ldr	r3, [pc, #204]	; (df10 <uarte_nrfx_configure+0x14c>)
    de42:	e033      	b.n	deac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    de44:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    de48:	d04d      	beq.n	dee6 <uarte_nrfx_configure+0x122>
    de4a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    de4e:	d1e2      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    de50:	4b30      	ldr	r3, [pc, #192]	; (df14 <uarte_nrfx_configure+0x150>)
    de52:	e02b      	b.n	deac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    de54:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    de58:	d047      	beq.n	deea <uarte_nrfx_configure+0x126>
    de5a:	d812      	bhi.n	de82 <uarte_nrfx_configure+0xbe>
    de5c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    de60:	42bb      	cmp	r3, r7
    de62:	d045      	beq.n	def0 <uarte_nrfx_configure+0x12c>
    de64:	d805      	bhi.n	de72 <uarte_nrfx_configure+0xae>
    de66:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    de6a:	d1d4      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    de6c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    de70:	e01c      	b.n	deac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    de72:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    de76:	d03e      	beq.n	def6 <uarte_nrfx_configure+0x132>
    de78:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    de7c:	d1cb      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    de7e:	4b26      	ldr	r3, [pc, #152]	; (df18 <uarte_nrfx_configure+0x154>)
    de80:	e014      	b.n	deac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    de82:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    de86:	d039      	beq.n	defc <uarte_nrfx_configure+0x138>
    de88:	d808      	bhi.n	de9c <uarte_nrfx_configure+0xd8>
    de8a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    de8e:	d038      	beq.n	df02 <uarte_nrfx_configure+0x13e>
    de90:	4f22      	ldr	r7, [pc, #136]	; (df1c <uarte_nrfx_configure+0x158>)
    de92:	42bb      	cmp	r3, r7
    de94:	d1bf      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    de96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    de9a:	e007      	b.n	deac <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
    de9c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    dea0:	d032      	beq.n	df08 <uarte_nrfx_configure+0x144>
    dea2:	4f1f      	ldr	r7, [pc, #124]	; (df20 <uarte_nrfx_configure+0x15c>)
    dea4:	42bb      	cmp	r3, r7
    dea6:	d1b6      	bne.n	de16 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    dea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    deac:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    deb0:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    deb2:	4334      	orrs	r4, r6
    deb4:	4322      	orrs	r2, r4
    deb6:	3304      	adds	r3, #4
    deb8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    deba:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    debe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    dec2:	2000      	movs	r0, #0
}
    dec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    dec6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    deca:	e7ef      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    decc:	4b15      	ldr	r3, [pc, #84]	; (df24 <uarte_nrfx_configure+0x160>)
    dece:	e7ed      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
    ded0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    ded4:	e7ea      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
    ded6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    deda:	e7e7      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    dedc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    dee0:	e7e4      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    dee2:	4b11      	ldr	r3, [pc, #68]	; (df28 <uarte_nrfx_configure+0x164>)
    dee4:	e7e2      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    dee6:	4b11      	ldr	r3, [pc, #68]	; (df2c <uarte_nrfx_configure+0x168>)
    dee8:	e7e0      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    deea:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    deee:	e7dd      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    def0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    def4:	e7da      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    def6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    defa:	e7d7      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    defc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    df00:	e7d4      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    df02:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    df06:	e7d1      	b.n	deac <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    df08:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    df0c:	e7ce      	b.n	deac <uarte_nrfx_configure+0xe8>
    df0e:	bf00      	nop
    df10:	00275000 	.word	0x00275000
    df14:	0075c000 	.word	0x0075c000
    df18:	013a9000 	.word	0x013a9000
    df1c:	0003d090 	.word	0x0003d090
    df20:	000f4240 	.word	0x000f4240
    df24:	0013b000 	.word	0x0013b000
    df28:	003af000 	.word	0x003af000
    df2c:	004ea000 	.word	0x004ea000

0000df30 <uarte_instance_init.isra.2>:
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(const struct device *dev,
    df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	nrf_uarte_disable(uarte);

	data->dev = dev;

	nrf_gpio_pin_write(config->pseltxd, 1);
    df32:	680f      	ldr	r7, [r1, #0]
static int uarte_instance_init(const struct device *dev,
    df34:	460d      	mov	r5, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    df36:	2101      	movs	r1, #1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    df38:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    df3c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    df3e:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    df40:	681c      	ldr	r4, [r3, #0]
    *p_pin = pin_number & 0x1F;
    df42:	f007 021f 	and.w	r2, r7, #31
    p_reg->OUTSET = set_mask;
    df46:	4b25      	ldr	r3, [pc, #148]	; (dfdc <uarte_instance_init.isra.2+0xac>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    df48:	4091      	lsls	r1, r2
    df4a:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
	data->dev = dev;
    df4e:	6030      	str	r0, [r6, #0]
    p_reg->OUTSET = set_mask;
    df50:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    df52:	2103      	movs	r1, #3
    df54:	3280      	adds	r2, #128	; 0x80
    df56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    df5a:	686a      	ldr	r2, [r5, #4]
    df5c:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    df5e:	bf1e      	ittt	ne
    df60:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    df64:	3180      	addne	r1, #128	; 0x80
    df66:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    df6a:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
    df6c:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    df70:	1c4f      	adds	r7, r1, #1
    df72:	bf18      	it	ne
    df74:	2700      	movne	r7, #0
    p_reg->PSEL.RXD = pselrxd;
    df76:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    df7a:	bf1e      	ittt	ne
    df7c:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    df80:	3280      	addne	r2, #128	; 0x80
    df82:	f843 7022 	strne.w	r7, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    df86:	68ef      	ldr	r7, [r5, #12]
    df88:	1c7a      	adds	r2, r7, #1
    df8a:	d00c      	beq.n	dfa6 <uarte_instance_init.isra.2+0x76>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    df8c:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    df90:	f007 021f 	and.w	r2, r7, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    df94:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    df98:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    df9c:	f04f 0c03 	mov.w	ip, #3
    dfa0:	3280      	adds	r2, #128	; 0x80
    dfa2:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    dfa6:	f8c4 7508 	str.w	r7, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    dfaa:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    dfae:	68c1      	ldr	r1, [r0, #12]
    dfb0:	3104      	adds	r1, #4
    dfb2:	f7ff ff07 	bl	ddc4 <uarte_nrfx_configure>
	if (err) {
    dfb6:	b980      	cbnz	r0, dfda <uarte_instance_init.isra.2+0xaa>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dfb8:	2308      	movs	r3, #8
    dfba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    dfbe:	686b      	ldr	r3, [r5, #4]
    dfc0:	3301      	adds	r3, #1
    dfc2:	d00a      	beq.n	dfda <uarte_instance_init.isra.2+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dfc4:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    dfc8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    dfcc:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    dfce:	3610      	adds	r6, #16
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    dfd0:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    dfd4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dfd8:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    dfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dfdc:	40842500 	.word	0x40842500

0000dfe0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    dfe0:	b530      	push	{r4, r5, lr}
    dfe2:	b085      	sub	sp, #20
    dfe4:	4605      	mov	r5, r0
    dfe6:	466c      	mov	r4, sp
    dfe8:	4b04      	ldr	r3, [pc, #16]	; (dffc <uarte_0_init+0x1c>)
    dfea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    dfec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dff0:	4621      	mov	r1, r4
    dff2:	4628      	mov	r0, r5
    dff4:	f7ff ff9c 	bl	df30 <uarte_instance_init.isra.2>
    dff8:	b005      	add	sp, #20
    dffa:	bd30      	pop	{r4, r5, pc}
    dffc:	000107c0 	.word	0x000107c0

0000e000 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    e000:	b530      	push	{r4, r5, lr}
    e002:	b085      	sub	sp, #20
    e004:	4605      	mov	r5, r0
    e006:	466c      	mov	r4, sp
    e008:	4b04      	ldr	r3, [pc, #16]	; (e01c <uarte_1_init+0x1c>)
    e00a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e00c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    e010:	4621      	mov	r1, r4
    e012:	4628      	mov	r0, r5
    e014:	f7ff ff8c 	bl	df30 <uarte_instance_init.isra.2>
    e018:	b005      	add	sp, #20
    e01a:	bd30      	pop	{r4, r5, pc}
    e01c:	000107d0 	.word	0x000107d0

0000e020 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    e020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e024:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    e026:	4c21      	ldr	r4, [pc, #132]	; (e0ac <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    e028:	4e21      	ldr	r6, [pc, #132]	; (e0b0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e02a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    e02e:	f8df 9088 	ldr.w	r9, [pc, #136]	; e0b8 <check_ext_api_requests+0x98>
{
    e032:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e034:	45a8      	cmp	r8, r5
    e036:	d803      	bhi.n	e040 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    e038:	2000      	movs	r0, #0
    e03a:	b005      	add	sp, #20
    e03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    e040:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e042:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    e046:	681f      	ldr	r7, [r3, #0]
    e048:	ab01      	add	r3, sp, #4
    e04a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    e04e:	220c      	movs	r2, #12
    e050:	4619      	mov	r1, r3
    e052:	4638      	mov	r0, r7
    e054:	f001 ff5f 	bl	ff16 <memcmp>
    e058:	b990      	cbnz	r0, e080 <check_ext_api_requests+0x60>
    e05a:	b18f      	cbz	r7, e080 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    e05c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    e05e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    e060:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    e062:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    e064:	4291      	cmp	r1, r2
    e066:	d10b      	bne.n	e080 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    e068:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    e06a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    e06c:	4291      	cmp	r1, r2
    e06e:	d807      	bhi.n	e080 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    e070:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    e072:	4291      	cmp	r1, r2
    e074:	d904      	bls.n	e080 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    e076:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    e078:	695b      	ldr	r3, [r3, #20]
    e07a:	ea32 0303 	bics.w	r3, r2, r3
    e07e:	d00a      	beq.n	e096 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    e080:	6a27      	ldr	r7, [r4, #32]
    e082:	b167      	cbz	r7, e09e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    e084:	480b      	ldr	r0, [pc, #44]	; (e0b4 <check_ext_api_requests+0x94>)
    e086:	f001 fcc1 	bl	fa0c <printk>
			k_panic();
    e08a:	4040      	eors	r0, r0
    e08c:	f380 8811 	msr	BASEPRI, r0
    e090:	f04f 0004 	mov.w	r0, #4
    e094:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    e096:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    e098:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    e09a:	441c      	add	r4, r3
    e09c:	e7ca      	b.n	e034 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    e09e:	4648      	mov	r0, r9
    e0a0:	f001 fcb4 	bl	fa0c <printk>
			*ext_api_req->ext_api = NULL;
    e0a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e0a6:	601f      	str	r7, [r3, #0]
    e0a8:	e7f5      	b.n	e096 <check_ext_api_requests+0x76>
    e0aa:	bf00      	nop
    e0ac:	0000c23c 	.word	0x0000c23c
    e0b0:	000107e0 	.word	0x000107e0
    e0b4:	000109a3 	.word	0x000109a3
    e0b8:	000109cc 	.word	0x000109cc

0000e0bc <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
    e0bc:	4b01      	ldr	r3, [pc, #4]	; (e0c4 <SystemInit+0x8>)
    e0be:	4a02      	ldr	r2, [pc, #8]	; (e0c8 <SystemInit+0xc>)
    e0c0:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
    e0c2:	4770      	bx	lr
    e0c4:	200100bc 	.word	0x200100bc
    e0c8:	03d09000 	.word	0x03d09000

0000e0cc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    e0cc:	4b04      	ldr	r3, [pc, #16]	; (e0e0 <nrfx_clock_init+0x14>)
    e0ce:	791a      	ldrb	r2, [r3, #4]
    e0d0:	b922      	cbnz	r2, e0dc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    e0d2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    e0d4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    e0d6:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    e0d8:	4802      	ldr	r0, [pc, #8]	; (e0e4 <nrfx_clock_init+0x18>)
    e0da:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    e0dc:	4802      	ldr	r0, [pc, #8]	; (e0e8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e0de:	4770      	bx	lr
    e0e0:	200102f0 	.word	0x200102f0
    e0e4:	0bad0000 	.word	0x0bad0000
    e0e8:	0bad000c 	.word	0x0bad000c

0000e0ec <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    e0ec:	b110      	cbz	r0, e0f4 <nrfx_clock_start+0x8>
    e0ee:	2801      	cmp	r0, #1
    e0f0:	d01e      	beq.n	e130 <nrfx_clock_start+0x44>
    e0f2:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e0f4:	4b13      	ldr	r3, [pc, #76]	; (e144 <nrfx_clock_start+0x58>)
    e0f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e0fa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    e0fe:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    e102:	4619      	mov	r1, r3
    e104:	d010      	beq.n	e128 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    e106:	f002 0203 	and.w	r2, r2, #3
    e10a:	2a02      	cmp	r2, #2
    e10c:	d10c      	bne.n	e128 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e10e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e112:	2200      	movs	r2, #0
    e114:	4b0c      	ldr	r3, [pc, #48]	; (e148 <nrfx_clock_start+0x5c>)
    e116:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
    e118:	2202      	movs	r2, #2
    e11a:	681b      	ldr	r3, [r3, #0]
    e11c:	4b09      	ldr	r3, [pc, #36]	; (e144 <nrfx_clock_start+0x58>)
    e11e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e122:	2201      	movs	r2, #1
    e124:	609a      	str	r2, [r3, #8]
    e126:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    e128:	2301      	movs	r3, #1
    e12a:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
    e12e:	e7f0      	b.n	e112 <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e130:	2200      	movs	r2, #0
    e132:	4b06      	ldr	r3, [pc, #24]	; (e14c <nrfx_clock_start+0x60>)
    e134:	601a      	str	r2, [r3, #0]
    e136:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    e138:	4b02      	ldr	r3, [pc, #8]	; (e144 <nrfx_clock_start+0x58>)
    e13a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e13e:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    e140:	4770      	bx	lr
    e142:	bf00      	nop
    e144:	40005000 	.word	0x40005000
    e148:	40005104 	.word	0x40005104
    e14c:	40005100 	.word	0x40005100

0000e150 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    e150:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    e152:	b110      	cbz	r0, e15a <nrfx_clock_stop+0xa>
    e154:	2801      	cmp	r0, #1
    e156:	d016      	beq.n	e186 <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    e158:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    e15a:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e15c:	2101      	movs	r1, #1
    e15e:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    e162:	4c16      	ldr	r4, [pc, #88]	; (e1bc <nrfx_clock_stop+0x6c>)
    e164:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e168:	4a15      	ldr	r2, [pc, #84]	; (e1c0 <nrfx_clock_stop+0x70>)
    e16a:	6010      	str	r0, [r2, #0]
    e16c:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e16e:	4a15      	ldr	r2, [pc, #84]	; (e1c4 <nrfx_clock_stop+0x74>)
    e170:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e172:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    e176:	03db      	lsls	r3, r3, #15
    e178:	d5ee      	bpl.n	e158 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    e17a:	2001      	movs	r0, #1
    e17c:	f002 f888 	bl	10290 <nrfx_busy_wait>
    e180:	3d01      	subs	r5, #1
    e182:	d1f6      	bne.n	e172 <nrfx_clock_stop+0x22>
    e184:	e7e8      	b.n	e158 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e186:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e188:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e18c:	4b0e      	ldr	r3, [pc, #56]	; (e1c8 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
    e18e:	4c0b      	ldr	r4, [pc, #44]	; (e1bc <nrfx_clock_stop+0x6c>)
    e190:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e194:	601a      	str	r2, [r3, #0]
    e196:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e198:	4b0c      	ldr	r3, [pc, #48]	; (e1cc <nrfx_clock_stop+0x7c>)
    e19a:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e19c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e1a0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e1a4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e1a8:	03d2      	lsls	r2, r2, #15
    e1aa:	d5d5      	bpl.n	e158 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d0d3      	beq.n	e158 <nrfx_clock_stop+0x8>
    e1b0:	2001      	movs	r0, #1
    e1b2:	f002 f86d 	bl	10290 <nrfx_busy_wait>
    e1b6:	3d01      	subs	r5, #1
    e1b8:	d1f0      	bne.n	e19c <nrfx_clock_stop+0x4c>
    e1ba:	e7cd      	b.n	e158 <nrfx_clock_stop+0x8>
    e1bc:	40005000 	.word	0x40005000
    e1c0:	40005104 	.word	0x40005104
    e1c4:	4000500c 	.word	0x4000500c
    e1c8:	40005100 	.word	0x40005100
    e1cc:	40005004 	.word	0x40005004

0000e1d0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e1d0:	4b15      	ldr	r3, [pc, #84]	; (e228 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    e1d2:	b510      	push	{r4, lr}
    e1d4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    e1d6:	b14a      	cbz	r2, e1ec <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1d8:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    e1da:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1dc:	6018      	str	r0, [r3, #0]
    e1de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    e1e0:	4b12      	ldr	r3, [pc, #72]	; (e22c <nrfx_power_clock_irq_handler+0x5c>)
    e1e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    e1e6:	4b12      	ldr	r3, [pc, #72]	; (e230 <nrfx_power_clock_irq_handler+0x60>)
    e1e8:	681b      	ldr	r3, [r3, #0]
    e1ea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e1ec:	4b11      	ldr	r3, [pc, #68]	; (e234 <nrfx_power_clock_irq_handler+0x64>)
    e1ee:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    e1f0:	b182      	cbz	r2, e214 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e1f2:	2200      	movs	r2, #0
    e1f4:	601a      	str	r2, [r3, #0]
    e1f6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e1f8:	4b0c      	ldr	r3, [pc, #48]	; (e22c <nrfx_power_clock_irq_handler+0x5c>)
    e1fa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e1fe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    e202:	f002 0203 	and.w	r2, r2, #3
    e206:	2a01      	cmp	r2, #1
    e208:	f04f 0102 	mov.w	r1, #2
    e20c:	d103      	bne.n	e216 <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
    e20e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e212:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    e214:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    e216:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e21a:	4b05      	ldr	r3, [pc, #20]	; (e230 <nrfx_power_clock_irq_handler+0x60>)
    e21c:	2001      	movs	r0, #1
}
    e21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    e222:	681b      	ldr	r3, [r3, #0]
    e224:	4718      	bx	r3
    e226:	bf00      	nop
    e228:	40005100 	.word	0x40005100
    e22c:	40005000 	.word	0x40005000
    e230:	200102f0 	.word	0x200102f0
    e234:	40005104 	.word	0x40005104

0000e238 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e23c:	2424      	movs	r4, #36	; 0x24
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e23e:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e240:	4e4c      	ldr	r6, [pc, #304]	; (e374 <nrfx_spim_init+0x13c>)
    e242:	436c      	muls	r4, r5
    e244:	1937      	adds	r7, r6, r4
    e246:	f897 c01c 	ldrb.w	ip, [r7, #28]
    e24a:	f1bc 0f00 	cmp.w	ip, #0
    e24e:	f040 808e 	bne.w	e36e <nrfx_spim_init+0x136>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    e252:	6800      	ldr	r0, [r0, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    e254:	607b      	str	r3, [r7, #4]
    e256:	2701      	movs	r7, #1
    p_cb->handler = handler;
    e258:	5132      	str	r2, [r6, r4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    e25a:	f891 8000 	ldrb.w	r8, [r1]
    e25e:	f891 e00c 	ldrb.w	lr, [r1, #12]
    e262:	4b45      	ldr	r3, [pc, #276]	; (e378 <nrfx_spim_init+0x140>)
    p_reg->OUTCLR = clr_mask;
    e264:	f008 041f 	and.w	r4, r8, #31
    e268:	40a7      	lsls	r7, r4
    e26a:	f1be 0f01 	cmp.w	lr, #1
    e26e:	bf94      	ite	ls
    e270:	60df      	strls	r7, [r3, #12]
    p_reg->OUTSET = set_mask;
    e272:	609f      	strhi	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e274:	2701      	movs	r7, #1
    e276:	3480      	adds	r4, #128	; 0x80
    e278:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    e27c:	f891 c001 	ldrb.w	ip, [r1, #1]
    e280:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    e284:	bf1f      	itttt	ne
    e286:	f00c 041f 	andne.w	r4, ip, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e28a:	40a7      	lslne	r7, r4
    p_reg->OUTCLR = clr_mask;
    e28c:	60df      	strne	r7, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e28e:	2703      	movne	r7, #3
    e290:	bf1c      	itt	ne
    e292:	3480      	addne	r4, #128	; 0x80
    e294:	f843 7024 	strne.w	r7, [r3, r4, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    e298:	788f      	ldrb	r7, [r1, #2]
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    e29a:	bf08      	it	eq
    e29c:	f04f 3cff 	moveq.w	ip, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    e2a0:	2fff      	cmp	r7, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    e2a2:	bf1f      	itttt	ne
    e2a4:	f891 900e 	ldrbne.w	r9, [r1, #14]
    *p_pin = pin_number & 0x1F;
    e2a8:	f007 041f 	andne.w	r4, r7, #31
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
    e2ac:	ea4f 0989 	movne.w	r9, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e2b0:	3480      	addne	r4, #128	; 0x80
    e2b2:	bf18      	it	ne
    e2b4:	f843 9024 	strne.w	r9, [r3, r4, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    e2b8:	f04f 0924 	mov.w	r9, #36	; 0x24
    e2bc:	fb09 6905 	mla	r9, r9, r5, r6
    e2c0:	78cc      	ldrb	r4, [r1, #3]
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    e2c2:	bf08      	it	eq
    e2c4:	f04f 37ff 	moveq.w	r7, #4294967295	; 0xffffffff

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e2c8:	2cff      	cmp	r4, #255	; 0xff
    p_cb->ss_pin = p_config->ss_pin;
    e2ca:	f889 401f 	strb.w	r4, [r9, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e2ce:	d016      	beq.n	e2fe <nrfx_spim_init+0xc6>
    {
        if (p_config->ss_active_high)
    e2d0:	f04f 0a01 	mov.w	sl, #1
    e2d4:	f891 9004 	ldrb.w	r9, [r1, #4]
    e2d8:	f004 041f 	and.w	r4, r4, #31
    e2dc:	fa0a fa04 	lsl.w	sl, sl, r4
    e2e0:	f1b9 0f00 	cmp.w	r9, #0
    e2e4:	d03a      	beq.n	e35c <nrfx_spim_init+0x124>
    p_reg->OUTCLR = clr_mask;
    e2e6:	f8c3 a00c 	str.w	sl, [r3, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e2ea:	f04f 0a03 	mov.w	sl, #3
    e2ee:	3480      	adds	r4, #128	; 0x80
    e2f0:	f843 a024 	str.w	sl, [r3, r4, lsl #2]
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    e2f4:	2324      	movs	r3, #36	; 0x24
    e2f6:	fb03 6305 	mla	r3, r3, r5, r6
    e2fa:	f883 901e 	strb.w	r9, [r3, #30]
    p_reg->FREQUENCY = (uint32_t)frequency;
    e2fe:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCK  = sck_pin;
    e300:	f8c0 8508 	str.w	r8, [r0, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
    e304:	f8c0 c50c 	str.w	ip, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    e308:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    e30c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    e310:	7b4b      	ldrb	r3, [r1, #13]
    e312:	3300      	adds	r3, #0
    e314:	bf18      	it	ne
    e316:	2301      	movne	r3, #1
    switch (spi_mode)
    e318:	f1be 0f02 	cmp.w	lr, #2
    e31c:	d021      	beq.n	e362 <nrfx_spim_init+0x12a>
    e31e:	f1be 0f03 	cmp.w	lr, #3
    e322:	d021      	beq.n	e368 <nrfx_spim_init+0x130>
    e324:	f1be 0f01 	cmp.w	lr, #1
    e328:	d101      	bne.n	e32e <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    e32a:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
    e32e:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    e332:	798b      	ldrb	r3, [r1, #6]
    e334:	f8c0 35c0 	str.w	r3, [r0, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    e338:	2307      	movs	r3, #7
    e33a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    e33e:	b11a      	cbz	r2, e348 <nrfx_spim_init+0x110>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    e340:	f340 3007 	sbfx	r0, r0, #12, #8
    e344:	f7fe fd46 	bl	cdd4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    e348:	2324      	movs	r3, #36	; 0x24
    e34a:	fb03 6505 	mla	r5, r3, r5, r6
    e34e:	2300      	movs	r3, #0
    e350:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e352:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    e354:	4809      	ldr	r0, [pc, #36]	; (e37c <nrfx_spim_init+0x144>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e356:	772b      	strb	r3, [r5, #28]
}
    e358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->OUTSET = set_mask;
    e35c:	f8c3 a008 	str.w	sl, [r3, #8]
    e360:	e7c3      	b.n	e2ea <nrfx_spim_init+0xb2>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    e362:	f043 0304 	orr.w	r3, r3, #4
        break;
    e366:	e7e2      	b.n	e32e <nrfx_spim_init+0xf6>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    e368:	f043 0306 	orr.w	r3, r3, #6
        break;
    e36c:	e7df      	b.n	e32e <nrfx_spim_init+0xf6>
        return err_code;
    e36e:	4804      	ldr	r0, [pc, #16]	; (e380 <nrfx_spim_init+0x148>)
    e370:	e7f2      	b.n	e358 <nrfx_spim_init+0x120>
    e372:	bf00      	nop
    e374:	200102f8 	.word	0x200102f8
    e378:	40842500 	.word	0x40842500
    e37c:	0bad0000 	.word	0x0bad0000
    e380:	0bad0005 	.word	0x0bad0005

0000e384 <nrfx_spim_xfer>:
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    e384:	2324      	movs	r3, #36	; 0x24
{
    e386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e38a:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->transfer_in_progress)
    e38c:	4e43      	ldr	r6, [pc, #268]	; (e49c <nrfx_spim_xfer+0x118>)
    e38e:	436b      	muls	r3, r5
{
    e390:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
    e392:	18f2      	adds	r2, r6, r3
{
    e394:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    e396:	7f51      	ldrb	r1, [r2, #29]
{
    e398:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    e39a:	2900      	cmp	r1, #0
    e39c:	d17b      	bne.n	e496 <nrfx_spim_xfer+0x112>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    e39e:	58f3      	ldr	r3, [r6, r3]
    e3a0:	b123      	cbz	r3, e3ac <nrfx_spim_xfer+0x28>
    e3a2:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    e3a6:	bf04      	itt	eq
    e3a8:	2301      	moveq	r3, #1
    e3aa:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    e3ac:	f04f 0c24 	mov.w	ip, #36	; 0x24
    e3b0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    e3b4:	fb0c 6c05 	mla	ip, ip, r5, r6
    e3b8:	f10c 080c 	add.w	r8, ip, #12
    e3bc:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e3c0:	f89c 301f 	ldrb.w	r3, [ip, #31]
    e3c4:	2bff      	cmp	r3, #255	; 0xff
    e3c6:	d008      	beq.n	e3da <nrfx_spim_xfer+0x56>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
    e3c8:	f003 021f 	and.w	r2, r3, #31
    e3cc:	2301      	movs	r3, #1
    e3ce:	f89c 101e 	ldrb.w	r1, [ip, #30]
    e3d2:	4093      	lsls	r3, r2
    e3d4:	4a32      	ldr	r2, [pc, #200]	; (e4a0 <nrfx_spim_xfer+0x11c>)
    e3d6:	b1b1      	cbz	r1, e406 <nrfx_spim_xfer+0x82>
    e3d8:	6093      	str	r3, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    e3da:	6839      	ldr	r1, [r7, #0]
    e3dc:	b121      	cbz	r1, e3e8 <nrfx_spim_xfer+0x64>
    e3de:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    e3e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e3e6:	d106      	bne.n	e3f6 <nrfx_spim_xfer+0x72>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    e3e8:	68ba      	ldr	r2, [r7, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    e3ea:	b172      	cbz	r2, e40a <nrfx_spim_xfer+0x86>
    e3ec:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    e3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e3f4:	d009      	beq.n	e40a <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
    e3f6:	2324      	movs	r3, #36	; 0x24
    e3f8:	fb03 6505 	mla	r5, r3, r5, r6
    e3fc:	2300      	movs	r3, #0
        return err_code;
    e3fe:	4829      	ldr	r0, [pc, #164]	; (e4a4 <nrfx_spim_xfer+0x120>)
        p_cb->transfer_in_progress = false;
    e400:	776b      	strb	r3, [r5, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->OUTCLR = clr_mask;
    e406:	60d3      	str	r3, [r2, #12]
    e408:	e7e7      	b.n	e3da <nrfx_spim_xfer+0x56>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    e40a:	f8de 3000 	ldr.w	r3, [lr]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    e40e:	6878      	ldr	r0, [r7, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e410:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e414:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    e418:	68f9      	ldr	r1, [r7, #12]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e41a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e41e:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    e420:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e424:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    e428:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    e42c:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    e430:	bf18      	it	ne
    e432:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    e434:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    e438:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    e43c:	bf18      	it	ne
    e43e:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    e440:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    e444:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e448:	bf04      	itt	eq
    e44a:	2201      	moveq	r2, #1
    e44c:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
    e44e:	2224      	movs	r2, #36	; 0x24
    e450:	436a      	muls	r2, r5
    e452:	58b2      	ldr	r2, [r6, r2]
    e454:	b9b2      	cbnz	r2, e484 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    e456:	b919      	cbnz	r1, e460 <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e458:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    e45c:	2a00      	cmp	r2, #0
    e45e:	d0fb      	beq.n	e458 <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e460:	2324      	movs	r3, #36	; 0x24
    e462:	fb03 6505 	mla	r5, r3, r5, r6
    e466:	7feb      	ldrb	r3, [r5, #31]
    e468:	2bff      	cmp	r3, #255	; 0xff
    e46a:	d007      	beq.n	e47c <nrfx_spim_xfer+0xf8>
                if (p_cb->ss_active_high)
    e46c:	f003 021f 	and.w	r2, r3, #31
    e470:	2301      	movs	r3, #1
    e472:	7fa9      	ldrb	r1, [r5, #30]
    e474:	4093      	lsls	r3, r2
    e476:	4a0a      	ldr	r2, [pc, #40]	; (e4a0 <nrfx_spim_xfer+0x11c>)
    e478:	b111      	cbz	r1, e480 <nrfx_spim_xfer+0xfc>
    e47a:	60d3      	str	r3, [r2, #12]
    return err_code;
    e47c:	480a      	ldr	r0, [pc, #40]	; (e4a8 <nrfx_spim_xfer+0x124>)
    e47e:	e7c0      	b.n	e402 <nrfx_spim_xfer+0x7e>
    p_reg->OUTSET = set_mask;
    e480:	6093      	str	r3, [r2, #8]
    e482:	e7fb      	b.n	e47c <nrfx_spim_xfer+0xf8>
    if (!enable)
    e484:	2240      	movs	r2, #64	; 0x40
    e486:	f014 0f04 	tst.w	r4, #4
    p_reg->INTENCLR = mask;
    e48a:	bf14      	ite	ne
    e48c:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    e490:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    e494:	e7f2      	b.n	e47c <nrfx_spim_xfer+0xf8>
        return err_code;
    e496:	4805      	ldr	r0, [pc, #20]	; (e4ac <nrfx_spim_xfer+0x128>)
    e498:	e7b3      	b.n	e402 <nrfx_spim_xfer+0x7e>
    e49a:	bf00      	nop
    e49c:	200102f8 	.word	0x200102f8
    e4a0:	40842500 	.word	0x40842500
    e4a4:	0bad000a 	.word	0x0bad000a
    e4a8:	0bad0000 	.word	0x0bad0000
    e4ac:	0bad000b 	.word	0x0bad000b

0000e4b0 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e4b0:	4b0f      	ldr	r3, [pc, #60]	; (e4f0 <nrfx_spim_3_irq_handler+0x40>)
    e4b2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    e4b6:	b1ca      	cbz	r2, e4ec <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e4b8:	2200      	movs	r2, #0
    e4ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    e4be:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    e4c2:	4b0c      	ldr	r3, [pc, #48]	; (e4f4 <nrfx_spim_3_irq_handler+0x44>)
    e4c4:	7fda      	ldrb	r2, [r3, #31]
    e4c6:	2aff      	cmp	r2, #255	; 0xff
    e4c8:	d007      	beq.n	e4da <nrfx_spim_3_irq_handler+0x2a>
            if (p_cb->ss_active_high)
    e4ca:	f002 011f 	and.w	r1, r2, #31
    e4ce:	2201      	movs	r2, #1
    e4d0:	7f98      	ldrb	r0, [r3, #30]
    e4d2:	408a      	lsls	r2, r1
    e4d4:	4908      	ldr	r1, [pc, #32]	; (e4f8 <nrfx_spim_3_irq_handler+0x48>)
    e4d6:	b138      	cbz	r0, e4e8 <nrfx_spim_3_irq_handler+0x38>
    p_reg->OUTCLR = clr_mask;
    e4d8:	60ca      	str	r2, [r1, #12]
    p_cb->transfer_in_progress = false;
    e4da:	2200      	movs	r2, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    e4dc:	4807      	ldr	r0, [pc, #28]	; (e4fc <nrfx_spim_3_irq_handler+0x4c>)
    p_cb->transfer_in_progress = false;
    e4de:	775a      	strb	r2, [r3, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    e4e0:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    e4e2:	e9d3 2100 	ldrd	r2, r1, [r3]
    e4e6:	4710      	bx	r2
    p_reg->OUTSET = set_mask;
    e4e8:	608a      	str	r2, [r1, #8]
    e4ea:	e7f6      	b.n	e4da <nrfx_spim_3_irq_handler+0x2a>

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    e4ec:	4770      	bx	lr
    e4ee:	bf00      	nop
    e4f0:	4000b000 	.word	0x4000b000
    e4f4:	200102f8 	.word	0x200102f8
    e4f8:	40842500 	.word	0x40842500
    e4fc:	20010300 	.word	0x20010300

0000e500 <nrfx_twim_init>:
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e500:	f04f 0c34 	mov.w	ip, #52	; 0x34
{
    e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    e506:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    e508:	4d1c      	ldr	r5, [pc, #112]	; (e57c <nrfx_twim_init+0x7c>)
    e50a:	fb0c fc06 	mul.w	ip, ip, r6
    e50e:	eb05 040c 	add.w	r4, r5, ip
    e512:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
    e516:	bb7f      	cbnz	r7, e578 <nrfx_twim_init+0x78>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e518:	f240 6e0c 	movw	lr, #1548	; 0x60c
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    e51c:	60a7      	str	r7, [r4, #8]
    p_cb->p_context       = p_context;
    e51e:	6063      	str	r3, [r4, #4]
    p_cb->repeated        = false;
    p_cb->busy            = false;
    e520:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    e524:	7b4b      	ldrb	r3, [r1, #13]
    p_cb->repeated        = false;
    e526:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
    e52a:	680f      	ldr	r7, [r1, #0]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    e52c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->handler         = event_handler;
    e530:	f845 200c 	str.w	r2, [r5, ip]
    *p_pin = pin_number & 0x1F;
    e534:	f007 031f 	and.w	r3, r7, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e538:	f8df c04c 	ldr.w	ip, [pc, #76]	; e588 <nrfx_twim_init+0x88>
    e53c:	3380      	adds	r3, #128	; 0x80
    e53e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
    e542:	684c      	ldr	r4, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    e544:	6800      	ldr	r0, [r0, #0]
    *p_pin = pin_number & 0x1F;
    e546:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    e54a:	3380      	adds	r3, #128	; 0x80
    e54c:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
    e550:	688b      	ldr	r3, [r1, #8]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
    e552:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    e556:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    e55a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
    e55e:	b11a      	cbz	r2, e568 <nrfx_twim_init+0x68>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
    e560:	f340 3007 	sbfx	r0, r0, #12, #8
    e564:	f7fe fc36 	bl	cdd4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e568:	2334      	movs	r3, #52	; 0x34
    e56a:	fb03 5506 	mla	r5, r3, r6, r5
    e56e:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    e570:	4803      	ldr	r0, [pc, #12]	; (e580 <nrfx_twim_init+0x80>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e572:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
    e576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    e578:	4802      	ldr	r0, [pc, #8]	; (e584 <nrfx_twim_init+0x84>)
    e57a:	e7fc      	b.n	e576 <nrfx_twim_init+0x76>
    e57c:	2001031c 	.word	0x2001031c
    e580:	0bad0000 	.word	0x0bad0000
    e584:	0bad0005 	.word	0x0bad0005
    e588:	40842500 	.word	0x40842500

0000e58c <nrfx_twim_enable>:
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
    e58c:	2106      	movs	r1, #6
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
    e58e:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e590:	7903      	ldrb	r3, [r0, #4]
    e592:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    e596:	2134      	movs	r1, #52	; 0x34
    e598:	4a03      	ldr	r2, [pc, #12]	; (e5a8 <nrfx_twim_enable+0x1c>)
    e59a:	fb01 2303 	mla	r3, r1, r3, r2
    e59e:	2202      	movs	r2, #2
    e5a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
    e5a4:	4770      	bx	lr
    e5a6:	bf00      	nop
    e5a8:	2001031c 	.word	0x2001031c

0000e5ac <nrfx_twim_disable>:
void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    e5ac:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e5ae:	7903      	ldrb	r3, [r0, #4]
    p_cb->int_mask = 0;
    e5b0:	2034      	movs	r0, #52	; 0x34
    e5b2:	490a      	ldr	r1, [pc, #40]	; (e5dc <nrfx_twim_disable+0x30>)
    e5b4:	fb00 1303 	mla	r3, r0, r3, r1
    e5b8:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
    e5ba:	4909      	ldr	r1, [pc, #36]	; (e5e0 <nrfx_twim_disable+0x34>)
    e5bc:	6098      	str	r0, [r3, #8]
    e5be:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    e5c2:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    e5c6:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
    e5ca:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
    e5ce:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    e5d2:	2201      	movs	r2, #1
    e5d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
    e5d8:	4770      	bx	lr
    e5da:	bf00      	nop
    e5dc:	2001031c 	.word	0x2001031c
    e5e0:	019c0202 	.word	0x019c0202

0000e5e4 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
    e5e8:	f04f 0e34 	mov.w	lr, #52	; 0x34
    e5ec:	2300      	movs	r3, #0
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    e5ee:	f890 c004 	ldrb.w	ip, [r0, #4]
    p_cb->error = false;
    e5f2:	4eae      	ldr	r6, [pc, #696]	; (e8ac <nrfx_twim_xfer+0x2c8>)
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
    e5f4:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
    e5f6:	fb0e 6e0c 	mla	lr, lr, ip, r6
    e5fa:	f88e 302e 	strb.w	r3, [lr, #46]	; 0x2e
    e5fe:	68cb      	ldr	r3, [r1, #12]
{
    e600:	460d      	mov	r5, r1
    e602:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    e606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
    e60a:	4617      	mov	r7, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
    e60c:	d003      	beq.n	e616 <nrfx_twim_xfer+0x32>
        return err_code;
    e60e:	4da8      	ldr	r5, [pc, #672]	; (e8b0 <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    e610:	4628      	mov	r0, r5
    e612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
    e616:	4ba7      	ldr	r3, [pc, #668]	; (e8b4 <nrfx_twim_xfer+0x2d0>)
    e618:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
    e61c:	f89e 302f 	ldrb.w	r3, [lr, #47]	; 0x2f
    e620:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    e624:	b12b      	cbz	r3, e632 <nrfx_twim_xfer+0x4e>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e626:	f8de 3008 	ldr.w	r3, [lr, #8]
        return err_code;
    e62a:	4da3      	ldr	r5, [pc, #652]	; (e8b8 <nrfx_twim_xfer+0x2d4>)
    p_reg->INTENSET = mask;
    e62c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    e630:	e7ee      	b.n	e610 <nrfx_twim_xfer+0x2c>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
    e632:	f012 0f14 	tst.w	r2, #20
    e636:	bf0c      	ite	eq
    e638:	2301      	moveq	r3, #1
    e63a:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
    e63c:	4689      	mov	r9, r1
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
    e63e:	f88e 302f 	strb.w	r3, [lr, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
    e642:	f10e 080c 	add.w	r8, lr, #12
    e646:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    e64a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    e64e:	f8d9 3000 	ldr.w	r3, [r9]
    p_cb->flags = flags;
    e652:	f8ce 7020 	str.w	r7, [lr, #32]
    p_cb->xfer_desc = *p_xfer_desc;
    e656:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
    e65a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    e65e:	f88e 3030 	strb.w	r3, [lr, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
    e662:	786b      	ldrb	r3, [r5, #1]
    switch (p_xfer_desc->type)
    e664:	782a      	ldrb	r2, [r5, #0]
    e666:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e66a:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
    e66e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    e672:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
    e676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    e67a:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
    e67e:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    e682:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
    e686:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
    e68a:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
    e68e:	bf18      	it	ne
    e690:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
    e692:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
    e696:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
    e69a:	bf18      	it	ne
    e69c:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
    e69e:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
    e6a2:	2a03      	cmp	r2, #3
    e6a4:	f200 80b3 	bhi.w	e80e <nrfx_twim_xfer+0x22a>
    e6a8:	e8df f002 	tbb	[pc, r2]
    e6ac:	02679e82 	.word	0x02679e82
    e6b0:	6929      	ldr	r1, [r5, #16]
    e6b2:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    e6b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    e6ba:	d1a8      	bne.n	e60e <nrfx_twim_xfer+0x2a>
    p_reg->SHORTS = mask;
    e6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e6c0:	68e8      	ldr	r0, [r5, #12]
    p_reg->SHORTS = mask;
    e6c2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e6c6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e6c8:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e6cc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e6d0:	2300      	movs	r3, #0
    e6d2:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    e6d6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e6da:	2001      	movs	r0, #1
    e6dc:	6220      	str	r0, [r4, #32]
    e6de:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e6e0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
    e6e4:	2800      	cmp	r0, #0
    e6e6:	d0fb      	beq.n	e6e0 <nrfx_twim_xfer+0xfc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e6e8:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
    e6ec:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    e6f0:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e6f2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e6f6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    e6fa:	2334      	movs	r3, #52	; 0x34
    e6fc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    e700:	fb03 630c 	mla	r3, r3, ip, r6
    e704:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    e706:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
    e708:	4d6c      	ldr	r5, [pc, #432]	; (e8bc <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
    e70a:	0738      	lsls	r0, r7, #28
    e70c:	d403      	bmi.n	e716 <nrfx_twim_xfer+0x132>
    e70e:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e710:	bf1c      	itt	ne
    e712:	2201      	movne	r2, #1
    e714:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
    e716:	2334      	movs	r3, #52	; 0x34
    e718:	fb03 f30c 	mul.w	r3, r3, ip
    e71c:	18f2      	adds	r2, r6, r3
    e71e:	58f3      	ldr	r3, [r6, r3]
    e720:	2b00      	cmp	r3, #0
    e722:	d177      	bne.n	e814 <nrfx_twim_xfer+0x230>
                transmission_finished = true;
    e724:	f04f 0e01 	mov.w	lr, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e728:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    e72c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e730:	2900      	cmp	r1, #0
    e732:	f040 8087 	bne.w	e844 <nrfx_twim_xfer+0x260>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
    e736:	3200      	adds	r2, #0
    e738:	bf18      	it	ne
    e73a:	2201      	movne	r2, #1
    e73c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    e740:	2900      	cmp	r1, #0
    e742:	f000 8085 	beq.w	e850 <nrfx_twim_xfer+0x26c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e746:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    e74a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e74e:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
    e752:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
    e756:	b110      	cbz	r0, e75e <nrfx_twim_xfer+0x17a>
    e758:	f411 7f00 	tst.w	r1, #512	; 0x200
    e75c:	d106      	bne.n	e76c <nrfx_twim_xfer+0x188>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e75e:	f8c4 e020 	str.w	lr, [r4, #32]
    e762:	f8c4 e014 	str.w	lr, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    e766:	2800      	cmp	r0, #0
    e768:	d0de      	beq.n	e728 <nrfx_twim_xfer+0x144>
                    transmission_finished = false;
    e76a:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
    e76c:	05c9      	lsls	r1, r1, #23
    e76e:	d56f      	bpl.n	e850 <nrfx_twim_xfer+0x26c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e770:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    e774:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
                    transmission_finished = false;
    e778:	e7d6      	b.n	e728 <nrfx_twim_xfer+0x144>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e77a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e77c:	68e9      	ldr	r1, [r5, #12]
    e77e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e782:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    e786:	692b      	ldr	r3, [r5, #16]
    e788:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
    e78c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    e790:	f47f af3d 	bne.w	e60e <nrfx_twim_xfer+0x2a>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
    e794:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e796:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
    e79a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
    e79e:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    e7a2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e7a6:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e7a8:	fb03 630c 	mla	r3, r3, ip, r6
    e7ac:	2102      	movs	r1, #2
    e7ae:	e012      	b.n	e7d6 <nrfx_twim_xfer+0x1f2>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e7b0:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e7b2:	68e9      	ldr	r1, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
    e7b4:	f017 0f20 	tst.w	r7, #32
    e7b8:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e7bc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    e7c0:	f04f 0334 	mov.w	r3, #52	; 0x34
    e7c4:	d00b      	beq.n	e7de <nrfx_twim_xfer+0x1fa>
    p_reg->SHORTS = mask;
    e7c6:	f44f 7180 	mov.w	r1, #256	; 0x100
    e7ca:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
    e7ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    e7d2:	fb03 630c 	mla	r3, r3, ip, r6
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e7d6:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e7d8:	2301      	movs	r3, #1
    e7da:	6223      	str	r3, [r4, #32]
    e7dc:	e793      	b.n	e706 <nrfx_twim_xfer+0x122>
    p_reg->SHORTS = mask;
    e7de:	f44f 7100 	mov.w	r1, #512	; 0x200
    e7e2:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    e7e6:	e7df      	b.n	e7a8 <nrfx_twim_xfer+0x1c4>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
    e7e8:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e7ea:	68e9      	ldr	r1, [r5, #12]
    e7ec:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    e7f0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
    e7f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e7f8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e7fc:	2334      	movs	r3, #52	; 0x34
    e7fe:	2102      	movs	r1, #2
    e800:	fb03 630c 	mla	r3, r3, ip, r6
    e804:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e806:	2301      	movs	r3, #1
    e808:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
    e80a:	2300      	movs	r3, #0
    e80c:	e77c      	b.n	e708 <nrfx_twim_xfer+0x124>
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
    e80e:	2308      	movs	r3, #8
        err_code = NRFX_ERROR_INVALID_PARAM;
    e810:	4d2b      	ldr	r5, [pc, #172]	; (e8c0 <nrfx_twim_xfer+0x2dc>)
    e812:	e77a      	b.n	e70a <nrfx_twim_xfer+0x126>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
    e814:	0779      	lsls	r1, r7, #29
            p_cb->int_mask = 0;
    e816:	bf44      	itt	mi
    e818:	2300      	movmi	r3, #0
    e81a:	6093      	strmi	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
    e81c:	067b      	lsls	r3, r7, #25
    e81e:	d406      	bmi.n	e82e <nrfx_twim_xfer+0x24a>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
    e820:	2334      	movs	r3, #52	; 0x34
    e822:	fb03 630c 	mla	r3, r3, ip, r6
    e826:	689a      	ldr	r2, [r3, #8]
    e828:	f042 0202 	orr.w	r2, r2, #2
    e82c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
    e82e:	2334      	movs	r3, #52	; 0x34
    e830:	fb03 660c 	mla	r6, r3, ip, r6
    e834:	68b3      	ldr	r3, [r6, #8]
    e836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e83a:	60b3      	str	r3, [r6, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e83c:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
    e83e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    e842:	e6e5      	b.n	e610 <nrfx_twim_xfer+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e844:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    e848:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
    e84c:	2201      	movs	r2, #1
    e84e:	e775      	b.n	e73c <nrfx_twim_xfer+0x158>
        } while (!transmission_finished);
    e850:	2a00      	cmp	r2, #0
    e852:	f43f af69 	beq.w	e728 <nrfx_twim_xfer+0x144>
        p_cb->busy = false;
    e856:	2134      	movs	r1, #52	; 0x34
    e858:	2000      	movs	r0, #0
    e85a:	fb01 620c 	mla	r2, r1, ip, r6
    uint32_t error_source = p_reg->ERRORSRC;
    e85e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    e862:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    e866:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
    e86a:	b18b      	cbz	r3, e890 <nrfx_twim_xfer+0x2ac>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    e86c:	4a15      	ldr	r2, [pc, #84]	; (e8c4 <nrfx_twim_xfer+0x2e0>)
    e86e:	f013 0f01 	tst.w	r3, #1
    e872:	4d15      	ldr	r5, [pc, #84]	; (e8c8 <nrfx_twim_xfer+0x2e4>)
    e874:	bf18      	it	ne
    e876:	4615      	movne	r5, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    e878:	f013 0f02 	tst.w	r3, #2
    e87c:	f102 0201 	add.w	r2, r2, #1
    e880:	bf18      	it	ne
    e882:	4615      	movne	r5, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    e884:	f013 0f04 	tst.w	r3, #4
    e888:	4b10      	ldr	r3, [pc, #64]	; (e8cc <nrfx_twim_xfer+0x2e8>)
    e88a:	bf18      	it	ne
    e88c:	461d      	movne	r5, r3
    e88e:	e6bf      	b.n	e610 <nrfx_twim_xfer+0x2c>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
    e890:	067b      	lsls	r3, r7, #25
    e892:	f53f aebd 	bmi.w	e610 <nrfx_twim_xfer+0x2c>
                !xfer_completeness_check(p_twim, p_cb))
    e896:	fb0c 6101 	mla	r1, ip, r1, r6
    e89a:	4620      	mov	r0, r4
    e89c:	f001 fd05 	bl	102aa <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
    e8a0:	4b09      	ldr	r3, [pc, #36]	; (e8c8 <nrfx_twim_xfer+0x2e4>)
    e8a2:	2800      	cmp	r0, #0
    e8a4:	bf08      	it	eq
    e8a6:	461d      	moveq	r5, r3
    e8a8:	e6b2      	b.n	e610 <nrfx_twim_xfer+0x2c>
    e8aa:	bf00      	nop
    e8ac:	2001031c 	.word	0x2001031c
    e8b0:	0bad000a 	.word	0x0bad000a
    e8b4:	019c0202 	.word	0x019c0202
    e8b8:	0bad000b 	.word	0x0bad000b
    e8bc:	0bad0000 	.word	0x0bad0000
    e8c0:	0bad0004 	.word	0x0bad0004
    e8c4:	0bae0000 	.word	0x0bae0000
    e8c8:	0bad0001 	.word	0x0bad0001
    e8cc:	0bae0002 	.word	0x0bae0002

0000e8d0 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
    e8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e8d2:	4b5b      	ldr	r3, [pc, #364]	; (ea40 <nrfx_twim_2_irq_handler+0x170>)
    e8d4:	b087      	sub	sp, #28
    e8d6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    e8da:	461d      	mov	r5, r3
    e8dc:	4c59      	ldr	r4, [pc, #356]	; (ea44 <nrfx_twim_2_irq_handler+0x174>)
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
    e8de:	b1fa      	cbz	r2, e920 <nrfx_twim_2_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e8e0:	2200      	movs	r2, #0
    e8e2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    e8e6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e8ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e8ee:	b9ba      	cbnz	r2, e920 <nrfx_twim_2_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
    e8f0:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    e8f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
    e8f6:	2202      	movs	r2, #2
    e8f8:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    e8fa:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
    e8fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e900:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
    e904:	b11a      	cbz	r2, e90e <nrfx_twim_2_irq_handler+0x3e>
    return p_reg->SHORTS;
    e906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    e90a:	059e      	lsls	r6, r3, #22
    e90c:	d403      	bmi.n	e916 <nrfx_twim_2_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e90e:	2201      	movs	r2, #1
    e910:	4b4b      	ldr	r3, [pc, #300]	; (ea40 <nrfx_twim_2_irq_handler+0x170>)
    e912:	621a      	str	r2, [r3, #32]
    e914:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
    e916:	2301      	movs	r3, #1
    e918:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
    e91c:	b007      	add	sp, #28
    e91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e920:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
    e924:	2b00      	cmp	r3, #0
    e926:	d054      	beq.n	e9d2 <nrfx_twim_2_irq_handler+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e928:	2300      	movs	r3, #0
    e92a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    e92e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
    e932:	6a23      	ldr	r3, [r4, #32]
    e934:	065d      	lsls	r5, r3, #25
    e936:	d40a      	bmi.n	e94e <nrfx_twim_2_irq_handler+0x7e>
    e938:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e93c:	b93b      	cbnz	r3, e94e <nrfx_twim_2_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
    e93e:	4941      	ldr	r1, [pc, #260]	; (ea44 <nrfx_twim_2_irq_handler+0x174>)
    e940:	483f      	ldr	r0, [pc, #252]	; (ea40 <nrfx_twim_2_irq_handler+0x170>)
    e942:	f001 fcb2 	bl	102aa <xfer_completeness_check>
    e946:	f080 0001 	eor.w	r0, r0, #1
    e94a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
    e94e:	6a23      	ldr	r3, [r4, #32]
    e950:	f013 0704 	ands.w	r7, r3, #4
    e954:	d122      	bne.n	e99c <nrfx_twim_2_irq_handler+0xcc>
            event.xfer_desc = p_cb->xfer_desc;
    e956:	4e3c      	ldr	r6, [pc, #240]	; (ea48 <nrfx_twim_2_irq_handler+0x178>)
    e958:	ad01      	add	r5, sp, #4
    e95a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e95c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e95e:	6833      	ldr	r3, [r6, #0]
    e960:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
    e964:	602b      	str	r3, [r5, #0]
    e966:	4b36      	ldr	r3, [pc, #216]	; (ea40 <nrfx_twim_2_irq_handler+0x170>)
    e968:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
    e96c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
    e970:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    e974:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
    e978:	f1bc 0f00 	cmp.w	ip, #0
    e97c:	d002      	beq.n	e984 <nrfx_twim_2_irq_handler+0xb4>
    e97e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    e982:	b15a      	cbz	r2, e99c <nrfx_twim_2_irq_handler+0xcc>
    p_reg->SHORTS = mask;
    e984:	2200      	movs	r2, #0
    e986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
    e98a:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
    e98c:	4a2f      	ldr	r2, [pc, #188]	; (ea4c <nrfx_twim_2_irq_handler+0x17c>)
    e98e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e992:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e996:	4b2e      	ldr	r3, [pc, #184]	; (ea50 <nrfx_twim_2_irq_handler+0x180>)
    e998:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
    e99c:	4a28      	ldr	r2, [pc, #160]	; (ea40 <nrfx_twim_2_irq_handler+0x170>)
    e99e:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
    e9a2:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
    e9a4:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    e9a8:	d53c      	bpl.n	ea24 <nrfx_twim_2_irq_handler+0x154>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
    e9aa:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
    e9ac:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
    e9b0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e9b4:	b90b      	cbnz	r3, e9ba <nrfx_twim_2_irq_handler+0xea>
        p_cb->busy = false;
    e9b6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    e9ba:	6a23      	ldr	r3, [r4, #32]
    e9bc:	075b      	lsls	r3, r3, #29
    e9be:	d503      	bpl.n	e9c8 <nrfx_twim_2_irq_handler+0xf8>
    e9c0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    e9c4:	2b00      	cmp	r3, #0
    e9c6:	d0a9      	beq.n	e91c <nrfx_twim_2_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
    e9c8:	e9d4 3100 	ldrd	r3, r1, [r4]
    e9cc:	4668      	mov	r0, sp
    e9ce:	4798      	blx	r3
}
    e9d0:	e7a4      	b.n	e91c <nrfx_twim_2_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e9d2:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
    e9d6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
    e9da:	7b23      	ldrb	r3, [r4, #12]
    e9dc:	b983      	cbnz	r3, ea00 <nrfx_twim_2_irq_handler+0x130>
            event.xfer_desc = p_cb->xfer_desc;
    e9de:	4f1a      	ldr	r7, [pc, #104]	; (ea48 <nrfx_twim_2_irq_handler+0x178>)
    e9e0:	ae01      	add	r6, sp, #4
    e9e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    e9e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    e9e6:	683b      	ldr	r3, [r7, #0]
    e9e8:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
    e9ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    e9ee:	2b00      	cmp	r3, #0
    e9f0:	d1d4      	bne.n	e99c <nrfx_twim_2_irq_handler+0xcc>
    p_reg->SHORTS = mask;
    e9f2:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
    e9f6:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    e9f8:	4b14      	ldr	r3, [pc, #80]	; (ea4c <nrfx_twim_2_irq_handler+0x17c>)
    e9fa:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    e9fe:	e7c8      	b.n	e992 <nrfx_twim_2_irq_handler+0xc2>
    p_reg->SHORTS = mask;
    ea00:	f44f 7300 	mov.w	r3, #512	; 0x200
    ea04:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
    ea08:	f240 2302 	movw	r3, #514	; 0x202
    ea0c:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
    ea0e:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
    ea12:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
    ea16:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    ea18:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ea1c:	2301      	movs	r3, #1
    ea1e:	60ab      	str	r3, [r5, #8]
    ea20:	622b      	str	r3, [r5, #32]
            return;
    ea22:	e77b      	b.n	e91c <nrfx_twim_2_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
    ea24:	0759      	lsls	r1, r3, #29
    ea26:	d501      	bpl.n	ea2c <nrfx_twim_2_irq_handler+0x15c>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
    ea28:	2302      	movs	r3, #2
    ea2a:	e7bf      	b.n	e9ac <nrfx_twim_2_irq_handler+0xdc>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
    ea2c:	07da      	lsls	r2, r3, #31
    ea2e:	d501      	bpl.n	ea34 <nrfx_twim_2_irq_handler+0x164>
        event.type = NRFX_TWIM_EVT_OVERRUN;
    ea30:	2303      	movs	r3, #3
    ea32:	e7bb      	b.n	e9ac <nrfx_twim_2_irq_handler+0xdc>
    else if (p_cb->error)
    ea34:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    ea38:	2b00      	cmp	r3, #0
    ea3a:	d0b7      	beq.n	e9ac <nrfx_twim_2_irq_handler+0xdc>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
    ea3c:	2304      	movs	r3, #4
    ea3e:	e7b5      	b.n	e9ac <nrfx_twim_2_irq_handler+0xdc>
    ea40:	4000a000 	.word	0x4000a000
    ea44:	2001031c 	.word	0x2001031c
    ea48:	20010328 	.word	0x20010328
    ea4c:	019c0202 	.word	0x019c0202
    ea50:	e000e100 	.word	0xe000e100

0000ea54 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ea56:	4b10      	ldr	r3, [pc, #64]	; (ea98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    ea58:	4f10      	ldr	r7, [pc, #64]	; (ea9c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3c>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ea5a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    ea5e:	3001      	adds	r0, #1
    ea60:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ea64:	42ae      	cmp	r6, r5
    ea66:	d800      	bhi.n	ea6a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa>
		}
	}
}
    ea68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    ea6a:	e9d5 3400 	ldrd	r3, r4, [r5]
    ea6e:	4620      	mov	r0, r4
    ea70:	4798      	blx	r3
    ea72:	b170      	cbz	r0, ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    ea74:	b16c      	cbz	r4, ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    ea76:	2301      	movs	r3, #1
				(dev - __device_start));
    ea78:	1be4      	subs	r4, r4, r7
    ea7a:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    ea7c:	4a08      	ldr	r2, [pc, #32]	; (eaa0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
    ea7e:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    ea80:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    ea84:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    ea88:	fa03 f404 	lsl.w	r4, r3, r4
    ea8c:	4304      	orrs	r4, r0
    ea8e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ea92:	3508      	adds	r5, #8
    ea94:	e7e6      	b.n	ea64 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>
    ea96:	bf00      	nop
    ea98:	00010904 	.word	0x00010904
    ea9c:	200100c8 	.word	0x200100c8
    eaa0:	20010138 	.word	0x20010138

0000eaa4 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    eaa4:	4b08      	ldr	r3, [pc, #32]	; (eac8 <z_device_ready+0x24>)
    eaa6:	1ac0      	subs	r0, r0, r3
    eaa8:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    eaaa:	4b08      	ldr	r3, [pc, #32]	; (eacc <z_device_ready+0x28>)
    eaac:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    eaae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    eab2:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    eab4:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    eab8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    eabc:	4210      	tst	r0, r2
}
    eabe:	bf0c      	ite	eq
    eac0:	4618      	moveq	r0, r3
    eac2:	2000      	movne	r0, #0
    eac4:	4770      	bx	lr
    eac6:	bf00      	nop
    eac8:	200100c8 	.word	0x200100c8
    eacc:	20010138 	.word	0x20010138

0000ead0 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    ead0:	4911      	ldr	r1, [pc, #68]	; (eb18 <z_impl_device_get_binding+0x48>)
{
    ead2:	b570      	push	{r4, r5, r6, lr}
    ead4:	4605      	mov	r5, r0
    ead6:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    ead8:	4c10      	ldr	r4, [pc, #64]	; (eb1c <z_impl_device_get_binding+0x4c>)
    eada:	428c      	cmp	r4, r1
    eadc:	d104      	bne.n	eae8 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    eade:	4c0f      	ldr	r4, [pc, #60]	; (eb1c <z_impl_device_get_binding+0x4c>)
    eae0:	42b4      	cmp	r4, r6
    eae2:	d10a      	bne.n	eafa <z_impl_device_get_binding+0x2a>
	return NULL;
    eae4:	2400      	movs	r4, #0
    eae6:	e014      	b.n	eb12 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    eae8:	4620      	mov	r0, r4
    eaea:	f7ff ffdb 	bl	eaa4 <z_device_ready>
    eaee:	b110      	cbz	r0, eaf6 <z_impl_device_get_binding+0x26>
    eaf0:	6823      	ldr	r3, [r4, #0]
    eaf2:	42ab      	cmp	r3, r5
    eaf4:	d00d      	beq.n	eb12 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    eaf6:	3410      	adds	r4, #16
    eaf8:	e7ef      	b.n	eada <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    eafa:	4620      	mov	r0, r4
    eafc:	f7ff ffd2 	bl	eaa4 <z_device_ready>
    eb00:	b908      	cbnz	r0, eb06 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    eb02:	3410      	adds	r4, #16
    eb04:	e7ec      	b.n	eae0 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    eb06:	6821      	ldr	r1, [r4, #0]
    eb08:	4628      	mov	r0, r5
    eb0a:	f001 f9f8 	bl	fefe <strcmp>
    eb0e:	2800      	cmp	r0, #0
    eb10:	d1f7      	bne.n	eb02 <z_impl_device_get_binding+0x32>
}
    eb12:	4620      	mov	r0, r4
    eb14:	bd70      	pop	{r4, r5, r6, pc}
    eb16:	bf00      	nop
    eb18:	20010138 	.word	0x20010138
    eb1c:	200100c8 	.word	0x200100c8

0000eb20 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    eb20:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    eb22:	4d0b      	ldr	r5, [pc, #44]	; (eb50 <idle+0x30>)
    eb24:	f04f 0220 	mov.w	r2, #32
    eb28:	f3ef 8311 	mrs	r3, BASEPRI
    eb2c:	f382 8811 	msr	BASEPRI, r2
    eb30:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    eb34:	f001 fcca 	bl	104cc <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    eb38:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
    eb3a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    eb3c:	2802      	cmp	r0, #2
    eb3e:	bfd8      	it	le
    eb40:	4608      	movle	r0, r1
    eb42:	f001 fcd3 	bl	104ec <z_set_timeout_expiry>
	_kernel.idle = ticks;
    eb46:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
    eb48:	f7fe fa14 	bl	cf74 <arch_cpu_idle>
    eb4c:	e7ea      	b.n	eb24 <idle+0x4>
    eb4e:	bf00      	nop
    eb50:	20010350 	.word	0x20010350

0000eb54 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    eb54:	4802      	ldr	r0, [pc, #8]	; (eb60 <z_bss_zero+0xc>)
    eb56:	4a03      	ldr	r2, [pc, #12]	; (eb64 <z_bss_zero+0x10>)
    eb58:	2100      	movs	r1, #0
    eb5a:	1a12      	subs	r2, r2, r0
    eb5c:	f001 ba15 	b.w	ff8a <memset>
    eb60:	20010140 	.word	0x20010140
    eb64:	20010394 	.word	0x20010394

0000eb68 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    eb68:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    eb6a:	4806      	ldr	r0, [pc, #24]	; (eb84 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    eb6c:	4a06      	ldr	r2, [pc, #24]	; (eb88 <z_data_copy+0x20>)
    eb6e:	4907      	ldr	r1, [pc, #28]	; (eb8c <z_data_copy+0x24>)
    eb70:	1a12      	subs	r2, r2, r0
    eb72:	f001 f9e0 	bl	ff36 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    eb76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    eb7a:	4a05      	ldr	r2, [pc, #20]	; (eb90 <z_data_copy+0x28>)
    eb7c:	4905      	ldr	r1, [pc, #20]	; (eb94 <z_data_copy+0x2c>)
    eb7e:	4806      	ldr	r0, [pc, #24]	; (eb98 <z_data_copy+0x30>)
    eb80:	f001 b9d9 	b.w	ff36 <memcpy>
    eb84:	20010000 	.word	0x20010000
    eb88:	2001013c 	.word	0x2001013c
    eb8c:	00010a3c 	.word	0x00010a3c
    eb90:	00000000 	.word	0x00000000
    eb94:	00010a3c 	.word	0x00010a3c
    eb98:	20010000 	.word	0x20010000

0000eb9c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    eb9c:	2201      	movs	r2, #1
{
    eb9e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    eba0:	4b0b      	ldr	r3, [pc, #44]	; (ebd0 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    eba2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    eba4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    eba6:	f7ff ff55 	bl	ea54 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ebaa:	4a0a      	ldr	r2, [pc, #40]	; (ebd4 <bg_thread_main+0x38>)
    ebac:	490a      	ldr	r1, [pc, #40]	; (ebd8 <bg_thread_main+0x3c>)
    ebae:	480b      	ldr	r0, [pc, #44]	; (ebdc <bg_thread_main+0x40>)
    ebb0:	f000 ff2c 	bl	fa0c <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    ebb4:	2003      	movs	r0, #3
    ebb6:	f7ff ff4d 	bl	ea54 <z_sys_init_run_level>

	z_init_static_threads();
    ebba:	f000 fc23 	bl	f404 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    ebbe:	f7fd fceb 	bl	c598 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    ebc2:	4a07      	ldr	r2, [pc, #28]	; (ebe0 <bg_thread_main+0x44>)
    ebc4:	7b13      	ldrb	r3, [r2, #12]
    ebc6:	f023 0301 	bic.w	r3, r3, #1
    ebca:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    ebcc:	bd08      	pop	{r3, pc}
    ebce:	bf00      	nop
    ebd0:	20010393 	.word	0x20010393
    ebd4:	000109fe 	.word	0x000109fe
    ebd8:	000109ff 	.word	0x000109ff
    ebdc:	00010a0b 	.word	0x00010a0b
    ebe0:	200101c0 	.word	0x200101c0

0000ebe4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    ebe4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    ebe8:	4b34      	ldr	r3, [pc, #208]	; (ecbc <z_cstart+0xd8>)
    ebea:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    ebec:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ebf0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    ebf4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ebf8:	2400      	movs	r4, #0
    ebfa:	23e0      	movs	r3, #224	; 0xe0
    ebfc:	4d30      	ldr	r5, [pc, #192]	; (ecc0 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ebfe:	f04f 0b01 	mov.w	fp, #1
    ec02:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    ec06:	77ec      	strb	r4, [r5, #31]
    ec08:	762c      	strb	r4, [r5, #24]
    ec0a:	766c      	strb	r4, [r5, #25]
    ec0c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ec0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    ec10:	4e2c      	ldr	r6, [pc, #176]	; (ecc4 <z_cstart+0xe0>)
    ec12:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    ec16:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    ec18:	f7fe fae4 	bl	d1e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    ec1c:	f7fe f9a4 	bl	cf68 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    ec20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ec24:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    ec26:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    ec28:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    ec2c:	4d26      	ldr	r5, [pc, #152]	; (ecc8 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    ec2e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    ec32:	ab06      	add	r3, sp, #24
    ec34:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ec36:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    ec38:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    ec3c:	f7ff ff0a 	bl	ea54 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ec40:	2001      	movs	r0, #1
    ec42:	f7ff ff07 	bl	ea54 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec46:	f8df 8098 	ldr.w	r8, [pc, #152]	; ece0 <z_cstart+0xfc>
	z_sched_init();
    ec4a:	f000 fae5 	bl	f218 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec4e:	4b1f      	ldr	r3, [pc, #124]	; (eccc <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
    ec50:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    ec52:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ec56:	491e      	ldr	r1, [pc, #120]	; (ecd0 <z_cstart+0xec>)
    ec58:	9305      	str	r3, [sp, #20]
    ec5a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    ec5e:	4643      	mov	r3, r8
    ec60:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ec64:	9400      	str	r4, [sp, #0]
    ec66:	4630      	mov	r0, r6
    ec68:	f000 fb9e 	bl	f3a8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ec6c:	7b73      	ldrb	r3, [r6, #13]
    ec6e:	4682      	mov	sl, r0
    ec70:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    ec74:	4630      	mov	r0, r6
    ec76:	7373      	strb	r3, [r6, #13]
    ec78:	f001 fb8d 	bl	10396 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    ec7c:	230f      	movs	r3, #15
    ec7e:	4f15      	ldr	r7, [pc, #84]	; (ecd4 <z_cstart+0xf0>)
    ec80:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ec84:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ec88:	4b13      	ldr	r3, [pc, #76]	; (ecd8 <z_cstart+0xf4>)
    ec8a:	4914      	ldr	r1, [pc, #80]	; (ecdc <z_cstart+0xf8>)
    ec8c:	e9cd b404 	strd	fp, r4, [sp, #16]
    ec90:	e9cd 4400 	strd	r4, r4, [sp]
    ec94:	4638      	mov	r0, r7
    ec96:	f000 fb87 	bl	f3a8 <z_setup_new_thread>
    ec9a:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    ec9c:	60ef      	str	r7, [r5, #12]
    ec9e:	f023 0304 	bic.w	r3, r3, #4
    eca2:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    eca4:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
    eca8:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    ecaa:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
    ecae:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    ecb2:	4642      	mov	r2, r8
    ecb4:	4651      	mov	r1, sl
    ecb6:	4630      	mov	r0, r6
    ecb8:	f7fe f8de 	bl	ce78 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    ecbc:	200108d8 	.word	0x200108d8
    ecc0:	e000ed00 	.word	0xe000ed00
    ecc4:	200101c0 	.word	0x200101c0
    ecc8:	20010350 	.word	0x20010350
    eccc:	00010a32 	.word	0x00010a32
    ecd0:	20010398 	.word	0x20010398
    ecd4:	20010140 	.word	0x20010140
    ecd8:	0000eb21 	.word	0x0000eb21
    ecdc:	20010798 	.word	0x20010798
    ece0:	0000eb9d 	.word	0x0000eb9d

0000ece4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    ece4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    ece6:	4c08      	ldr	r4, [pc, #32]	; (ed08 <z_reset_time_slice+0x24>)
    ece8:	6823      	ldr	r3, [r4, #0]
    ecea:	b15b      	cbz	r3, ed04 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    ecec:	f7fe f83e 	bl	cd6c <z_clock_elapsed>
    ecf0:	6823      	ldr	r3, [r4, #0]
    ecf2:	4a06      	ldr	r2, [pc, #24]	; (ed0c <z_reset_time_slice+0x28>)
    ecf4:	4418      	add	r0, r3
    ecf6:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ecf8:	2100      	movs	r1, #0
	}
}
    ecfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    ecfe:	4618      	mov	r0, r3
    ed00:	f001 bbf4 	b.w	104ec <z_set_timeout_expiry>
}
    ed04:	bd10      	pop	{r4, pc}
    ed06:	bf00      	nop
    ed08:	20010388 	.word	0x20010388
    ed0c:	20010350 	.word	0x20010350

0000ed10 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed12:	460d      	mov	r5, r1
    ed14:	f04f 0320 	mov.w	r3, #32
    ed18:	f3ef 8411 	mrs	r4, BASEPRI
    ed1c:	f383 8811 	msr	BASEPRI, r3
    ed20:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    ed24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ed28:	f240 36e7 	movw	r6, #999	; 0x3e7
    ed2c:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    ed2e:	2200      	movs	r2, #0
    ed30:	fbe1 6700 	umlal	r6, r7, r1, r0
    ed34:	4b09      	ldr	r3, [pc, #36]	; (ed5c <k_sched_time_slice_set+0x4c>)
    ed36:	4630      	mov	r0, r6
    ed38:	611a      	str	r2, [r3, #16]
    ed3a:	4639      	mov	r1, r7
    ed3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ed40:	2300      	movs	r3, #0
    ed42:	f7fd fa7b 	bl	c23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    ed46:	4b06      	ldr	r3, [pc, #24]	; (ed60 <k_sched_time_slice_set+0x50>)
    ed48:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    ed4a:	4b06      	ldr	r3, [pc, #24]	; (ed64 <k_sched_time_slice_set+0x54>)
    ed4c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    ed4e:	f7ff ffc9 	bl	ece4 <z_reset_time_slice>
	__asm__ volatile(
    ed52:	f384 8811 	msr	BASEPRI, r4
    ed56:	f3bf 8f6f 	isb	sy
	}
}
    ed5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed5c:	20010350 	.word	0x20010350
    ed60:	20010388 	.word	0x20010388
    ed64:	20010384 	.word	0x20010384

0000ed68 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ed68:	b949      	cbnz	r1, ed7e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ed6a:	f3ef 8005 	mrs	r0, IPSR
    ed6e:	b930      	cbnz	r0, ed7e <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    ed70:	4b05      	ldr	r3, [pc, #20]	; (ed88 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    ed72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ed74:	689b      	ldr	r3, [r3, #8]
    ed76:	429a      	cmp	r2, r3
    ed78:	d001      	beq.n	ed7e <z_reschedule+0x16>
	ret = arch_swap(key);
    ed7a:	f7fe b811 	b.w	cda0 <arch_swap>
    ed7e:	f381 8811 	msr	BASEPRI, r1
    ed82:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    ed86:	4770      	bx	lr
    ed88:	20010350 	.word	0x20010350

0000ed8c <k_sched_lock>:
	__asm__ volatile(
    ed8c:	f04f 0320 	mov.w	r3, #32
    ed90:	f3ef 8111 	mrs	r1, BASEPRI
    ed94:	f383 8811 	msr	BASEPRI, r3
    ed98:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    ed9c:	4b04      	ldr	r3, [pc, #16]	; (edb0 <k_sched_lock+0x24>)
    ed9e:	689a      	ldr	r2, [r3, #8]
    eda0:	7bd3      	ldrb	r3, [r2, #15]
    eda2:	3b01      	subs	r3, #1
    eda4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    eda6:	f381 8811 	msr	BASEPRI, r1
    edaa:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    edae:	4770      	bx	lr
    edb0:	20010350 	.word	0x20010350

0000edb4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    edb4:	4b09      	ldr	r3, [pc, #36]	; (eddc <z_priq_dumb_remove+0x28>)
    edb6:	f103 0228 	add.w	r2, r3, #40	; 0x28
    edba:	4282      	cmp	r2, r0
    edbc:	d105      	bne.n	edca <z_priq_dumb_remove+0x16>
    edbe:	689b      	ldr	r3, [r3, #8]
    edc0:	428b      	cmp	r3, r1
    edc2:	d102      	bne.n	edca <z_priq_dumb_remove+0x16>
    edc4:	7b4b      	ldrb	r3, [r1, #13]
    edc6:	06db      	lsls	r3, r3, #27
    edc8:	d106      	bne.n	edd8 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    edca:	e9d1 3200 	ldrd	r3, r2, [r1]
    edce:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    edd0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    edd2:	2300      	movs	r3, #0
	node->prev = NULL;
    edd4:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    edd8:	4770      	bx	lr
    edda:	bf00      	nop
    eddc:	20010350 	.word	0x20010350

0000ede0 <update_cache>:
{
    ede0:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    ede2:	4c10      	ldr	r4, [pc, #64]	; (ee24 <update_cache+0x44>)
{
    ede4:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    ede6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    edea:	f001 face 	bl	1038a <z_priq_dumb_best>
    edee:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    edf0:	68a3      	ldr	r3, [r4, #8]
    edf2:	7b59      	ldrb	r1, [r3, #13]
    edf4:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    edf6:	bf44      	itt	mi
    edf8:	f041 0108 	orrmi.w	r1, r1, #8
    edfc:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    edfe:	b905      	cbnz	r5, ee02 <update_cache+0x22>
    ee00:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    ee02:	b94e      	cbnz	r6, ee18 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    ee04:	7b5a      	ldrb	r2, [r3, #13]
    ee06:	06d2      	lsls	r2, r2, #27
    ee08:	d106      	bne.n	ee18 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ee0a:	69aa      	ldr	r2, [r5, #24]
    ee0c:	b922      	cbnz	r2, ee18 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    ee0e:	89da      	ldrh	r2, [r3, #14]
    ee10:	2a7f      	cmp	r2, #127	; 0x7f
    ee12:	d901      	bls.n	ee18 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    ee14:	6263      	str	r3, [r4, #36]	; 0x24
}
    ee16:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    ee18:	42ab      	cmp	r3, r5
    ee1a:	d001      	beq.n	ee20 <update_cache+0x40>
			z_reset_time_slice();
    ee1c:	f7ff ff62 	bl	ece4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ee20:	6265      	str	r5, [r4, #36]	; 0x24
}
    ee22:	e7f8      	b.n	ee16 <update_cache+0x36>
    ee24:	20010350 	.word	0x20010350

0000ee28 <k_sched_unlock>:
{
    ee28:	b510      	push	{r4, lr}
	__asm__ volatile(
    ee2a:	f04f 0320 	mov.w	r3, #32
    ee2e:	f3ef 8411 	mrs	r4, BASEPRI
    ee32:	f383 8811 	msr	BASEPRI, r3
    ee36:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    ee3a:	4b08      	ldr	r3, [pc, #32]	; (ee5c <k_sched_unlock+0x34>)
		update_cache(0);
    ee3c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    ee3e:	689a      	ldr	r2, [r3, #8]
    ee40:	7bd3      	ldrb	r3, [r2, #15]
    ee42:	3301      	adds	r3, #1
    ee44:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    ee46:	f7ff ffcb 	bl	ede0 <update_cache>
	__asm__ volatile(
    ee4a:	f384 8811 	msr	BASEPRI, r4
    ee4e:	f3bf 8f6f 	isb	sy
}
    ee52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    ee56:	f001 ba81 	b.w	1035c <z_reschedule_unlocked>
    ee5a:	bf00      	nop
    ee5c:	20010350 	.word	0x20010350

0000ee60 <ready_thread>:
{
    ee60:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    ee62:	7b43      	ldrb	r3, [r0, #13]
    ee64:	06db      	lsls	r3, r3, #27
    ee66:	d127      	bne.n	eeb8 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
    ee68:	6983      	ldr	r3, [r0, #24]
    ee6a:	bb2b      	cbnz	r3, eeb8 <ready_thread+0x58>
	return list->head == list;
    ee6c:	4a13      	ldr	r2, [pc, #76]	; (eebc <ready_thread+0x5c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ee6e:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ee72:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
    ee76:	428b      	cmp	r3, r1
    ee78:	d018      	beq.n	eeac <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ee7a:	b1bb      	cbz	r3, eeac <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
    ee7c:	f990 500e 	ldrsb.w	r5, [r0, #14]
    ee80:	f993 600e 	ldrsb.w	r6, [r3, #14]
    ee84:	42ae      	cmp	r6, r5
    ee86:	dd0c      	ble.n	eea2 <ready_thread+0x42>
	node->prev = successor->prev;
    ee88:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ee8a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    ee8e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ee90:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    ee92:	7b43      	ldrb	r3, [r0, #13]
    ee94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee98:	7343      	strb	r3, [r0, #13]
}
    ee9a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ee9c:	2000      	movs	r0, #0
    ee9e:	f7ff bf9f 	b.w	ede0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    eea2:	429c      	cmp	r4, r3
    eea4:	d002      	beq.n	eeac <ready_thread+0x4c>
    eea6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    eea8:	2b00      	cmp	r3, #0
    eeaa:	d1e9      	bne.n	ee80 <ready_thread+0x20>
	node->prev = list->tail;
    eeac:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    eeb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    eeb2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    eeb4:	62d0      	str	r0, [r2, #44]	; 0x2c
    eeb6:	e7ec      	b.n	ee92 <ready_thread+0x32>
}
    eeb8:	bc70      	pop	{r4, r5, r6}
    eeba:	4770      	bx	lr
    eebc:	20010350 	.word	0x20010350

0000eec0 <z_sched_start>:
{
    eec0:	b510      	push	{r4, lr}
	__asm__ volatile(
    eec2:	f04f 0320 	mov.w	r3, #32
    eec6:	f3ef 8411 	mrs	r4, BASEPRI
    eeca:	f383 8811 	msr	BASEPRI, r3
    eece:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    eed2:	7b43      	ldrb	r3, [r0, #13]
    eed4:	0759      	lsls	r1, r3, #29
    eed6:	d404      	bmi.n	eee2 <z_sched_start+0x22>
	__asm__ volatile(
    eed8:	f384 8811 	msr	BASEPRI, r4
    eedc:	f3bf 8f6f 	isb	sy
}
    eee0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    eee2:	f023 0304 	bic.w	r3, r3, #4
    eee6:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    eee8:	f7ff ffba 	bl	ee60 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    eeec:	4621      	mov	r1, r4
}
    eeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    eef2:	4801      	ldr	r0, [pc, #4]	; (eef8 <z_sched_start+0x38>)
    eef4:	f7ff bf38 	b.w	ed68 <z_reschedule>
    eef8:	20010394 	.word	0x20010394

0000eefc <move_thread_to_end_of_prio_q>:
{
    eefc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    eefe:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    ef02:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    ef04:	2b00      	cmp	r3, #0
    ef06:	da03      	bge.n	ef10 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    ef08:	4601      	mov	r1, r0
    ef0a:	4816      	ldr	r0, [pc, #88]	; (ef64 <move_thread_to_end_of_prio_q+0x68>)
    ef0c:	f7ff ff52 	bl	edb4 <z_priq_dumb_remove>
	return list->head == list;
    ef10:	4a15      	ldr	r2, [pc, #84]	; (ef68 <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ef12:	f102 0128 	add.w	r1, r2, #40	; 0x28
    ef16:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
    ef1a:	428b      	cmp	r3, r1
    ef1c:	d01c      	beq.n	ef58 <move_thread_to_end_of_prio_q+0x5c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ef1e:	b1db      	cbz	r3, ef58 <move_thread_to_end_of_prio_q+0x5c>
	if (thread_1->base.prio < thread_2->base.prio) {
    ef20:	f994 500e 	ldrsb.w	r5, [r4, #14]
    ef24:	f993 600e 	ldrsb.w	r6, [r3, #14]
    ef28:	42ae      	cmp	r6, r5
    ef2a:	dd10      	ble.n	ef4e <move_thread_to_end_of_prio_q+0x52>
	node->prev = successor->prev;
    ef2c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    ef2e:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    ef32:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    ef34:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
    ef36:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
    ef38:	6890      	ldr	r0, [r2, #8]
    ef3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ef3e:	7363      	strb	r3, [r4, #13]
    ef40:	1b03      	subs	r3, r0, r4
    ef42:	4258      	negs	r0, r3
    ef44:	4158      	adcs	r0, r3
}
    ef46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    ef4a:	f7ff bf49 	b.w	ede0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ef4e:	4298      	cmp	r0, r3
    ef50:	d002      	beq.n	ef58 <move_thread_to_end_of_prio_q+0x5c>
    ef52:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ef54:	2b00      	cmp	r3, #0
    ef56:	d1e5      	bne.n	ef24 <move_thread_to_end_of_prio_q+0x28>
	node->prev = list->tail;
    ef58:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    ef5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ef5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ef60:	62d4      	str	r4, [r2, #44]	; 0x2c
    ef62:	e7e8      	b.n	ef36 <move_thread_to_end_of_prio_q+0x3a>
    ef64:	20010378 	.word	0x20010378
    ef68:	20010350 	.word	0x20010350

0000ef6c <z_time_slice>:
{
    ef6c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    ef6e:	f04f 0320 	mov.w	r3, #32
    ef72:	f3ef 8411 	mrs	r4, BASEPRI
    ef76:	f383 8811 	msr	BASEPRI, r3
    ef7a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ef7e:	4a17      	ldr	r2, [pc, #92]	; (efdc <z_time_slice+0x70>)
    ef80:	4917      	ldr	r1, [pc, #92]	; (efe0 <z_time_slice+0x74>)
    ef82:	6893      	ldr	r3, [r2, #8]
    ef84:	680d      	ldr	r5, [r1, #0]
    ef86:	42ab      	cmp	r3, r5
    ef88:	4615      	mov	r5, r2
    ef8a:	d106      	bne.n	ef9a <z_time_slice+0x2e>
			z_reset_time_slice();
    ef8c:	f7ff feaa 	bl	ece4 <z_reset_time_slice>
	__asm__ volatile(
    ef90:	f384 8811 	msr	BASEPRI, r4
    ef94:	f3bf 8f6f 	isb	sy
}
    ef98:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    ef9a:	2600      	movs	r6, #0
    ef9c:	600e      	str	r6, [r1, #0]
	if (slice_time && sliceable(_current)) {
    ef9e:	4911      	ldr	r1, [pc, #68]	; (efe4 <z_time_slice+0x78>)
    efa0:	6809      	ldr	r1, [r1, #0]
    efa2:	b1c1      	cbz	r1, efd6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    efa4:	89d9      	ldrh	r1, [r3, #14]
    efa6:	297f      	cmp	r1, #127	; 0x7f
    efa8:	d815      	bhi.n	efd6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    efaa:	7b59      	ldrb	r1, [r3, #13]
    efac:	06c9      	lsls	r1, r1, #27
    efae:	d112      	bne.n	efd6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    efb0:	490d      	ldr	r1, [pc, #52]	; (efe8 <z_time_slice+0x7c>)
    efb2:	f993 600e 	ldrsb.w	r6, [r3, #14]
    efb6:	6809      	ldr	r1, [r1, #0]
    efb8:	428e      	cmp	r6, r1
    efba:	db0c      	blt.n	efd6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    efbc:	490b      	ldr	r1, [pc, #44]	; (efec <z_time_slice+0x80>)
    efbe:	428b      	cmp	r3, r1
    efc0:	d009      	beq.n	efd6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    efc2:	6911      	ldr	r1, [r2, #16]
    efc4:	4281      	cmp	r1, r0
    efc6:	dc03      	bgt.n	efd0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    efc8:	4618      	mov	r0, r3
    efca:	f7ff ff97 	bl	eefc <move_thread_to_end_of_prio_q>
    efce:	e7dd      	b.n	ef8c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    efd0:	1a09      	subs	r1, r1, r0
    efd2:	6111      	str	r1, [r2, #16]
    efd4:	e7dc      	b.n	ef90 <z_time_slice+0x24>
		_current_cpu->slice_ticks = 0;
    efd6:	2300      	movs	r3, #0
    efd8:	612b      	str	r3, [r5, #16]
    efda:	e7d9      	b.n	ef90 <z_time_slice+0x24>
    efdc:	20010350 	.word	0x20010350
    efe0:	20010380 	.word	0x20010380
    efe4:	20010388 	.word	0x20010388
    efe8:	20010384 	.word	0x20010384
    efec:	20010140 	.word	0x20010140

0000eff0 <z_impl_k_thread_suspend>:
{
    eff0:	b570      	push	{r4, r5, r6, lr}
    eff2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    eff4:	3018      	adds	r0, #24
    eff6:	f001 fa53 	bl	104a0 <z_abort_timeout>
	__asm__ volatile(
    effa:	f04f 0320 	mov.w	r3, #32
    effe:	f3ef 8611 	mrs	r6, BASEPRI
    f002:	f383 8811 	msr	BASEPRI, r3
    f006:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    f00a:	f994 300d 	ldrsb.w	r3, [r4, #13]
    f00e:	2b00      	cmp	r3, #0
    f010:	da07      	bge.n	f022 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    f012:	4621      	mov	r1, r4
    f014:	480e      	ldr	r0, [pc, #56]	; (f050 <z_impl_k_thread_suspend+0x60>)
    f016:	f7ff fecd 	bl	edb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f01a:	7b63      	ldrb	r3, [r4, #13]
    f01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f020:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    f022:	4d0c      	ldr	r5, [pc, #48]	; (f054 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f024:	7b63      	ldrb	r3, [r4, #13]
    f026:	68a8      	ldr	r0, [r5, #8]
    f028:	f043 0310 	orr.w	r3, r3, #16
    f02c:	7363      	strb	r3, [r4, #13]
    f02e:	1b03      	subs	r3, r0, r4
    f030:	4258      	negs	r0, r3
    f032:	4158      	adcs	r0, r3
    f034:	f7ff fed4 	bl	ede0 <update_cache>
	__asm__ volatile(
    f038:	f386 8811 	msr	BASEPRI, r6
    f03c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    f040:	68ab      	ldr	r3, [r5, #8]
    f042:	42a3      	cmp	r3, r4
    f044:	d103      	bne.n	f04e <z_impl_k_thread_suspend+0x5e>
}
    f046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    f04a:	f001 b987 	b.w	1035c <z_reschedule_unlocked>
}
    f04e:	bd70      	pop	{r4, r5, r6, pc}
    f050:	20010378 	.word	0x20010378
    f054:	20010350 	.word	0x20010350

0000f058 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    f058:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
    f05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f05e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    f060:	b103      	cbz	r3, f064 <z_thread_single_abort+0xc>
		thread->fn_abort();
    f062:	4798      	blx	r3
    f064:	f104 0018 	add.w	r0, r4, #24
    f068:	f001 fa1a 	bl	104a0 <z_abort_timeout>
	__asm__ volatile(
    f06c:	f04f 0320 	mov.w	r3, #32
    f070:	f3ef 8611 	mrs	r6, BASEPRI
    f074:	f383 8811 	msr	BASEPRI, r3
    f078:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    f07c:	7b63      	ldrb	r3, [r4, #13]
    f07e:	06d8      	lsls	r0, r3, #27
    f080:	d123      	bne.n	f0ca <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    f082:	69a2      	ldr	r2, [r4, #24]
    f084:	bb0a      	cbnz	r2, f0ca <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    f086:	0619      	lsls	r1, r3, #24
    f088:	d507      	bpl.n	f09a <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    f08a:	4621      	mov	r1, r4
    f08c:	481e      	ldr	r0, [pc, #120]	; (f108 <z_thread_single_abort+0xb0>)
    f08e:	f7ff fe91 	bl	edb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f092:	7b63      	ldrb	r3, [r4, #13]
    f094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f098:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    f09a:	4b1c      	ldr	r3, [pc, #112]	; (f10c <z_thread_single_abort+0xb4>)
    f09c:	6898      	ldr	r0, [r3, #8]
    f09e:	1b02      	subs	r2, r0, r4
    f0a0:	4250      	negs	r0, r2
    f0a2:	4150      	adcs	r0, r2
    f0a4:	f7ff fe9c 	bl	ede0 <update_cache>
			waiter->base.pended_on = NULL;
    f0a8:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    f0aa:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    f0ac:	f104 0830 	add.w	r8, r4, #48	; 0x30
    f0b0:	f043 0308 	orr.w	r3, r3, #8
    f0b4:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    f0b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f0b8:	4545      	cmp	r5, r8
    f0ba:	d000      	beq.n	f0be <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    f0bc:	b995      	cbnz	r5, f0e4 <z_thread_single_abort+0x8c>
	__asm__ volatile(
    f0be:	f386 8811 	msr	BASEPRI, r6
    f0c2:	f3bf 8f6f 	isb	sy
}
    f0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    f0ca:	079b      	lsls	r3, r3, #30
    f0cc:	d5ec      	bpl.n	f0a8 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    f0ce:	4621      	mov	r1, r4
    f0d0:	68a0      	ldr	r0, [r4, #8]
    f0d2:	f7ff fe6f 	bl	edb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f0d6:	7b63      	ldrb	r3, [r4, #13]
    f0d8:	f023 0302 	bic.w	r3, r3, #2
    f0dc:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    f0de:	2300      	movs	r3, #0
    f0e0:	60a3      	str	r3, [r4, #8]
    f0e2:	e7e1      	b.n	f0a8 <z_thread_single_abort+0x50>
    f0e4:	f105 0018 	add.w	r0, r5, #24
    f0e8:	f001 f9da 	bl	104a0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    f0ec:	68a8      	ldr	r0, [r5, #8]
    f0ee:	4629      	mov	r1, r5
    f0f0:	f7ff fe60 	bl	edb4 <z_priq_dumb_remove>
    f0f4:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    f0f6:	60af      	str	r7, [r5, #8]
    f0f8:	f023 0302 	bic.w	r3, r3, #2
    f0fc:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f0fe:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    f100:	4628      	mov	r0, r5
    f102:	f7ff fead 	bl	ee60 <ready_thread>
    f106:	e7d6      	b.n	f0b6 <z_thread_single_abort+0x5e>
    f108:	20010378 	.word	0x20010378
    f10c:	20010350 	.word	0x20010350

0000f110 <unready_thread>:
{
    f110:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    f112:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    f116:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    f118:	2b00      	cmp	r3, #0
    f11a:	da07      	bge.n	f12c <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    f11c:	4601      	mov	r1, r0
    f11e:	4808      	ldr	r0, [pc, #32]	; (f140 <unready_thread+0x30>)
    f120:	f7ff fe48 	bl	edb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    f124:	7b63      	ldrb	r3, [r4, #13]
    f126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f12a:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
    f12c:	4b05      	ldr	r3, [pc, #20]	; (f144 <unready_thread+0x34>)
    f12e:	6898      	ldr	r0, [r3, #8]
    f130:	1b03      	subs	r3, r0, r4
    f132:	4258      	negs	r0, r3
    f134:	4158      	adcs	r0, r3
}
    f136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    f13a:	f7ff be51 	b.w	ede0 <update_cache>
    f13e:	bf00      	nop
    f140:	20010378 	.word	0x20010378
    f144:	20010350 	.word	0x20010350

0000f148 <pend>:
{
    f148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f14c:	4606      	mov	r6, r0
    f14e:	4614      	mov	r4, r2
    f150:	461d      	mov	r5, r3
	__asm__ volatile(
    f152:	f04f 0320 	mov.w	r3, #32
    f156:	f3ef 8711 	mrs	r7, BASEPRI
    f15a:	f383 8811 	msr	BASEPRI, r3
    f15e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    f162:	f001 f948 	bl	103f6 <add_to_waitq_locked>
	__asm__ volatile(
    f166:	f387 8811 	msr	BASEPRI, r7
    f16a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f16e:	1c6b      	adds	r3, r5, #1
    f170:	bf08      	it	eq
    f172:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    f176:	d008      	beq.n	f18a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    f178:	4622      	mov	r2, r4
    f17a:	462b      	mov	r3, r5
    f17c:	f106 0018 	add.w	r0, r6, #24
    f180:	4903      	ldr	r1, [pc, #12]	; (f190 <pend+0x48>)
}
    f182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f186:	f000 b9e7 	b.w	f558 <z_add_timeout>
    f18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f18e:	bf00      	nop
    f190:	000103b7 	.word	0x000103b7

0000f194 <z_pend_curr>:
{
    f194:	b510      	push	{r4, lr}
    f196:	460c      	mov	r4, r1
	pending_current = _current;
    f198:	4b06      	ldr	r3, [pc, #24]	; (f1b4 <z_pend_curr+0x20>)
{
    f19a:	4611      	mov	r1, r2
	pending_current = _current;
    f19c:	6898      	ldr	r0, [r3, #8]
    f19e:	4b06      	ldr	r3, [pc, #24]	; (f1b8 <z_pend_curr+0x24>)
    f1a0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    f1a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f1a6:	f7ff ffcf 	bl	f148 <pend>
    f1aa:	4620      	mov	r0, r4
}
    f1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1b0:	f7fd bdf6 	b.w	cda0 <arch_swap>
    f1b4:	20010350 	.word	0x20010350
    f1b8:	20010380 	.word	0x20010380

0000f1bc <z_tick_sleep.part.21>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1be:	4606      	mov	r6, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    f1c0:	f001 f9ae 	bl	10520 <z_tick_get_32>
    f1c4:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    f1c6:	f04f 0320 	mov.w	r3, #32
    f1ca:	f3ef 8711 	mrs	r7, BASEPRI
    f1ce:	f383 8811 	msr	BASEPRI, r3
    f1d2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    f1d6:	4d0d      	ldr	r5, [pc, #52]	; (f20c <z_tick_sleep.part.21+0x50>)
    f1d8:	4b0d      	ldr	r3, [pc, #52]	; (f210 <z_tick_sleep.part.21+0x54>)
    f1da:	68a8      	ldr	r0, [r5, #8]
    f1dc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    f1de:	f7ff ff97 	bl	f110 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    f1e2:	68a8      	ldr	r0, [r5, #8]
    f1e4:	490b      	ldr	r1, [pc, #44]	; (f214 <z_tick_sleep.part.21+0x58>)
    f1e6:	4632      	mov	r2, r6
    f1e8:	17f3      	asrs	r3, r6, #31
    f1ea:	3018      	adds	r0, #24
    f1ec:	f000 f9b4 	bl	f558 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    f1f0:	68aa      	ldr	r2, [r5, #8]
    f1f2:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    f1f4:	7b53      	ldrb	r3, [r2, #13]
    f1f6:	f043 0310 	orr.w	r3, r3, #16
    f1fa:	7353      	strb	r3, [r2, #13]
    f1fc:	f7fd fdd0 	bl	cda0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    f200:	f001 f98e 	bl	10520 <z_tick_get_32>
    f204:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    f206:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    f20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f20c:	20010350 	.word	0x20010350
    f210:	20010380 	.word	0x20010380
    f214:	000103b7 	.word	0x000103b7

0000f218 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    f218:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    f21a:	4b04      	ldr	r3, [pc, #16]	; (f22c <z_sched_init+0x14>)
    f21c:	4608      	mov	r0, r1
    f21e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    f222:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    f226:	f7ff bd73 	b.w	ed10 <k_sched_time_slice_set>
    f22a:	bf00      	nop
    f22c:	20010350 	.word	0x20010350

0000f230 <z_impl_k_yield>:
{
    f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    f232:	4c23      	ldr	r4, [pc, #140]	; (f2c0 <z_impl_k_yield+0x90>)
    f234:	4b23      	ldr	r3, [pc, #140]	; (f2c4 <z_impl_k_yield+0x94>)
    f236:	68a2      	ldr	r2, [r4, #8]
    f238:	429a      	cmp	r2, r3
    f23a:	d029      	beq.n	f290 <z_impl_k_yield+0x60>
    f23c:	f04f 0320 	mov.w	r3, #32
    f240:	f3ef 8611 	mrs	r6, BASEPRI
    f244:	f383 8811 	msr	BASEPRI, r3
    f248:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    f24c:	f104 0528 	add.w	r5, r4, #40	; 0x28
    f250:	68a1      	ldr	r1, [r4, #8]
    f252:	4628      	mov	r0, r5
    f254:	f7ff fdae 	bl	edb4 <z_priq_dumb_remove>
	return list->head == list;
    f258:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    f25a:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f25c:	42aa      	cmp	r2, r5
    f25e:	d028      	beq.n	f2b2 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f260:	b33a      	cbz	r2, f2b2 <z_impl_k_yield+0x82>
    f262:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (thread_1->base.prio < thread_2->base.prio) {
    f264:	f993 100e 	ldrsb.w	r1, [r3, #14]
    f268:	f992 700e 	ldrsb.w	r7, [r2, #14]
    f26c:	428f      	cmp	r7, r1
    f26e:	dd1b      	ble.n	f2a8 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    f270:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    f272:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    f276:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    f278:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    f27a:	7b5a      	ldrb	r2, [r3, #13]
			update_cache(1);
    f27c:	2001      	movs	r0, #1
    f27e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    f282:	735a      	strb	r2, [r3, #13]
    f284:	f7ff fdac 	bl	ede0 <update_cache>
	__asm__ volatile(
    f288:	f386 8811 	msr	BASEPRI, r6
    f28c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    f290:	f04f 0320 	mov.w	r3, #32
    f294:	f3ef 8011 	mrs	r0, BASEPRI
    f298:	f383 8811 	msr	BASEPRI, r3
    f29c:	f3bf 8f6f 	isb	sy
}
    f2a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f2a4:	f7fd bd7c 	b.w	cda0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    f2a8:	4282      	cmp	r2, r0
    f2aa:	d002      	beq.n	f2b2 <z_impl_k_yield+0x82>
    f2ac:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f2ae:	2a00      	cmp	r2, #0
    f2b0:	d1da      	bne.n	f268 <z_impl_k_yield+0x38>
	node->prev = list->tail;
    f2b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    f2b4:	601d      	str	r5, [r3, #0]
	node->prev = list->tail;
    f2b6:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    f2b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f2ba:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f2bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    f2be:	e7dc      	b.n	f27a <z_impl_k_yield+0x4a>
    f2c0:	20010350 	.word	0x20010350
    f2c4:	20010140 	.word	0x20010140

0000f2c8 <z_impl_k_sleep>:
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2c8:	3101      	adds	r1, #1
    f2ca:	bf08      	it	eq
    f2cc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    f2d0:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f2d2:	d106      	bne.n	f2e2 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    f2d4:	4b0b      	ldr	r3, [pc, #44]	; (f304 <z_impl_k_sleep+0x3c>)
    f2d6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    f2d8:	f7ff fe8a 	bl	eff0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    f2dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    f2e0:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    f2e2:	4604      	mov	r4, r0
	if (ticks == 0) {
    f2e4:	b948      	cbnz	r0, f2fa <z_impl_k_sleep+0x32>
	z_impl_k_yield();
    f2e6:	f7ff ffa3 	bl	f230 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    f2ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f2ee:	fb84 3400 	smull	r3, r4, r4, r0
    f2f2:	0bd8      	lsrs	r0, r3, #15
    f2f4:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    f2f8:	e7f2      	b.n	f2e0 <z_impl_k_sleep+0x18>
    f2fa:	f7ff ff5f 	bl	f1bc <z_tick_sleep.part.21>
    f2fe:	4604      	mov	r4, r0
    f300:	e7f3      	b.n	f2ea <z_impl_k_sleep+0x22>
    f302:	bf00      	nop
    f304:	20010350 	.word	0x20010350

0000f308 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    f308:	4b01      	ldr	r3, [pc, #4]	; (f310 <z_impl_k_current_get+0x8>)
    f30a:	6898      	ldr	r0, [r3, #8]
    f30c:	4770      	bx	lr
    f30e:	bf00      	nop
    f310:	20010350 	.word	0x20010350

0000f314 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f314:	b538      	push	{r3, r4, r5, lr}
    f316:	4604      	mov	r4, r0
    f318:	f04f 0320 	mov.w	r3, #32
    f31c:	f3ef 8511 	mrs	r5, BASEPRI
    f320:	f383 8811 	msr	BASEPRI, r3
    f324:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    f328:	f001 f88d 	bl	10446 <z_unpend_first_thread>

	if (thread != NULL) {
    f32c:	b148      	cbz	r0, f342 <z_impl_k_sem_give+0x2e>
    f32e:	2200      	movs	r2, #0
    f330:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f332:	f001 f830 	bl	10396 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f336:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    f338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    f33c:	4804      	ldr	r0, [pc, #16]	; (f350 <z_impl_k_sem_give+0x3c>)
    f33e:	f7ff bd13 	b.w	ed68 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f342:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    f346:	429a      	cmp	r2, r3
    f348:	bf18      	it	ne
    f34a:	3301      	addne	r3, #1
    f34c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    f34e:	e7f2      	b.n	f336 <z_impl_k_sem_give+0x22>
    f350:	20010394 	.word	0x20010394

0000f354 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f354:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f356:	4614      	mov	r4, r2
    f358:	461d      	mov	r5, r3
    f35a:	f04f 0320 	mov.w	r3, #32
    f35e:	f3ef 8111 	mrs	r1, BASEPRI
    f362:	f383 8811 	msr	BASEPRI, r3
    f366:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    f36a:	6883      	ldr	r3, [r0, #8]
    f36c:	b143      	cbz	r3, f380 <z_impl_k_sem_take+0x2c>
		sem->count--;
    f36e:	3b01      	subs	r3, #1
    f370:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f372:	f381 8811 	msr	BASEPRI, r1
    f376:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f37a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    f37c:	b003      	add	sp, #12
    f37e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f380:	ea54 0305 	orrs.w	r3, r4, r5
    f384:	d106      	bne.n	f394 <z_impl_k_sem_take+0x40>
    f386:	f381 8811 	msr	BASEPRI, r1
    f38a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f38e:	f06f 000f 	mvn.w	r0, #15
		goto out;
    f392:	e7f3      	b.n	f37c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f394:	4602      	mov	r2, r0
    f396:	e9cd 4500 	strd	r4, r5, [sp]
    f39a:	4802      	ldr	r0, [pc, #8]	; (f3a4 <z_impl_k_sem_take+0x50>)
    f39c:	f7ff fefa 	bl	f194 <z_pend_curr>
	return ret;
    f3a0:	e7ec      	b.n	f37c <z_impl_k_sem_take+0x28>
    f3a2:	bf00      	nop
    f3a4:	20010394 	.word	0x20010394

0000f3a8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    f3aa:	f100 0530 	add.w	r5, r0, #48	; 0x30
    f3ae:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
    f3b0:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    f3b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    f3b6:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    f3b8:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f3ba:	2504      	movs	r5, #4
    f3bc:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    f3be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f3c0:	3207      	adds	r2, #7
	thread_base->prio = priority;
    f3c2:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    f3c4:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f3c6:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    f3ca:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
    f3ce:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    f3d2:	73c5      	strb	r5, [r0, #15]
	node->prev = NULL;
    f3d4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.delta = delta;
    f3d8:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f3da:	9202      	str	r2, [sp, #8]
    f3dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f3de:	9201      	str	r2, [sp, #4]
    f3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f3e2:	9200      	str	r2, [sp, #0]
    f3e4:	4632      	mov	r2, r6
    f3e6:	f7fd fd2b 	bl	ce40 <arch_new_thread>
	if (!_current) {
    f3ea:	4b05      	ldr	r3, [pc, #20]	; (f400 <z_setup_new_thread+0x58>)
	new_thread->fn_abort = NULL;
    f3ec:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    f3f0:	689b      	ldr	r3, [r3, #8]
    f3f2:	b103      	cbz	r3, f3f6 <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
    f3f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    f3f6:	4630      	mov	r0, r6
    f3f8:	6763      	str	r3, [r4, #116]	; 0x74
    f3fa:	b005      	add	sp, #20
    f3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3fe:	bf00      	nop
    f400:	20010350 	.word	0x20010350

0000f404 <z_init_static_threads>:
{
    f404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    f408:	4e2a      	ldr	r6, [pc, #168]	; (f4b4 <z_init_static_threads+0xb0>)
    f40a:	4d2b      	ldr	r5, [pc, #172]	; (f4b8 <z_init_static_threads+0xb4>)
    f40c:	46b0      	mov	r8, r6
{
    f40e:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f410:	42b5      	cmp	r5, r6
    f412:	f105 0430 	add.w	r4, r5, #48	; 0x30
    f416:	d310      	bcc.n	f43a <z_init_static_threads+0x36>
	k_sched_lock();
    f418:	f7ff fcb8 	bl	ed8c <k_sched_lock>
    f41c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    f420:	f240 36e7 	movw	r6, #999	; 0x3e7
    f424:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    f426:	4c24      	ldr	r4, [pc, #144]	; (f4b8 <z_init_static_threads+0xb4>)
    f428:	f8df a090 	ldr.w	sl, [pc, #144]	; f4bc <z_init_static_threads+0xb8>
    f42c:	4544      	cmp	r4, r8
    f42e:	d321      	bcc.n	f474 <z_init_static_threads+0x70>
}
    f430:	b006      	add	sp, #24
    f432:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    f436:	f7ff bcf7 	b.w	ee28 <k_sched_unlock>
		z_setup_new_thread(
    f43a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f43e:	9305      	str	r3, [sp, #20]
    f440:	f854 3c10 	ldr.w	r3, [r4, #-16]
    f444:	9304      	str	r3, [sp, #16]
    f446:	f854 3c14 	ldr.w	r3, [r4, #-20]
    f44a:	9303      	str	r3, [sp, #12]
    f44c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    f450:	9302      	str	r3, [sp, #8]
    f452:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    f456:	9301      	str	r3, [sp, #4]
    f458:	f854 3c20 	ldr.w	r3, [r4, #-32]
    f45c:	9300      	str	r3, [sp, #0]
    f45e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    f462:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    f466:	f7ff ff9f 	bl	f3a8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    f46a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    f46e:	65dd      	str	r5, [r3, #92]	; 0x5c
    f470:	4625      	mov	r5, r4
    f472:	e7cd      	b.n	f410 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f474:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f476:	1c5a      	adds	r2, r3, #1
    f478:	d00d      	beq.n	f496 <z_init_static_threads+0x92>
    f47a:	4630      	mov	r0, r6
    f47c:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
    f47e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f482:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f486:	42b9      	cmp	r1, r7
    f488:	bf08      	it	eq
    f48a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    f48c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f48e:	d104      	bne.n	f49a <z_init_static_threads+0x96>
	z_sched_start(thread);
    f490:	4628      	mov	r0, r5
    f492:	f7ff fd15 	bl	eec0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    f496:	3430      	adds	r4, #48	; 0x30
    f498:	e7c8      	b.n	f42c <z_init_static_threads+0x28>
    f49a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f49e:	2300      	movs	r3, #0
    f4a0:	f7fc fecc 	bl	c23c <__aeabi_uldivmod>
    f4a4:	4602      	mov	r2, r0
    f4a6:	460b      	mov	r3, r1
    f4a8:	f105 0018 	add.w	r0, r5, #24
    f4ac:	4651      	mov	r1, sl
    f4ae:	f000 f853 	bl	f558 <z_add_timeout>
    f4b2:	e7f0      	b.n	f496 <z_init_static_threads+0x92>
    f4b4:	2001013c 	.word	0x2001013c
    f4b8:	2001013c 	.word	0x2001013c
    f4bc:	000103b7 	.word	0x000103b7

0000f4c0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    f4c0:	4b03      	ldr	r3, [pc, #12]	; (f4d0 <elapsed+0x10>)
    f4c2:	681b      	ldr	r3, [r3, #0]
    f4c4:	b90b      	cbnz	r3, f4ca <elapsed+0xa>
    f4c6:	f7fd bc51 	b.w	cd6c <z_clock_elapsed>
}
    f4ca:	2000      	movs	r0, #0
    f4cc:	4770      	bx	lr
    f4ce:	bf00      	nop
    f4d0:	2001038c 	.word	0x2001038c

0000f4d4 <remove_timeout>:
{
    f4d4:	b530      	push	{r4, r5, lr}
    f4d6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f4d8:	b168      	cbz	r0, f4f6 <remove_timeout+0x22>
    f4da:	4a0a      	ldr	r2, [pc, #40]	; (f504 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    f4dc:	6852      	ldr	r2, [r2, #4]
    f4de:	4290      	cmp	r0, r2
    f4e0:	d009      	beq.n	f4f6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    f4e2:	b143      	cbz	r3, f4f6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    f4e4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    f4e8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    f4ec:	1912      	adds	r2, r2, r4
    f4ee:	eb45 0101 	adc.w	r1, r5, r1
    f4f2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    f4f6:	6842      	ldr	r2, [r0, #4]
    f4f8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    f4fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f4fc:	2300      	movs	r3, #0
	node->prev = NULL;
    f4fe:	e9c0 3300 	strd	r3, r3, [r0]
}
    f502:	bd30      	pop	{r4, r5, pc}
    f504:	200100c0 	.word	0x200100c0

0000f508 <next_timeout>:

static int32_t next_timeout(void)
{
    f508:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    f50a:	4b11      	ldr	r3, [pc, #68]	; (f550 <next_timeout+0x48>)
    f50c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f50e:	429c      	cmp	r4, r3
    f510:	bf08      	it	eq
    f512:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    f514:	f7ff ffd4 	bl	f4c0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    f518:	b1b4      	cbz	r4, f548 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    f51a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    f51e:	1a14      	subs	r4, r2, r0
    f520:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    f524:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    f528:	f175 0300 	sbcs.w	r3, r5, #0
    f52c:	da0c      	bge.n	f548 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
    f52e:	2c00      	cmp	r4, #0
    f530:	f175 0300 	sbcs.w	r3, r5, #0
    f534:	4620      	mov	r0, r4
    f536:	da00      	bge.n	f53a <next_timeout+0x32>
    f538:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    f53a:	4b06      	ldr	r3, [pc, #24]	; (f554 <next_timeout+0x4c>)
    f53c:	691b      	ldr	r3, [r3, #16]
    f53e:	b113      	cbz	r3, f546 <next_timeout+0x3e>
    f540:	4298      	cmp	r0, r3
    f542:	bfa8      	it	ge
    f544:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    f546:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    f548:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f54c:	e7f5      	b.n	f53a <next_timeout+0x32>
    f54e:	bf00      	nop
    f550:	200100c0 	.word	0x200100c0
    f554:	20010350 	.word	0x20010350

0000f558 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    f558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f55c:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f55e:	1c59      	adds	r1, r3, #1
    f560:	bf08      	it	eq
    f562:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    f566:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f568:	d06e      	beq.n	f648 <z_add_timeout+0xf0>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    f56a:	1c54      	adds	r4, r2, #1
    f56c:	f143 0500 	adc.w	r5, r3, #0

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    f570:	f06f 0301 	mvn.w	r3, #1
    f574:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    f578:	ebb3 0804 	subs.w	r8, r3, r4
    f57c:	eb6b 0905 	sbc.w	r9, fp, r5
    f580:	f1b8 0f00 	cmp.w	r8, #0
    f584:	f179 0300 	sbcs.w	r3, r9, #0
    f588:	db0f      	blt.n	f5aa <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    f58a:	f7ff ff99 	bl	f4c0 <elapsed>
    f58e:	f06f 0301 	mvn.w	r3, #1
    f592:	4a34      	ldr	r2, [pc, #208]	; (f664 <z_add_timeout+0x10c>)
    f594:	e9d2 1c00 	ldrd	r1, ip, [r2]
    f598:	1a5b      	subs	r3, r3, r1
    f59a:	eb6b 020c 	sbc.w	r2, fp, ip
    f59e:	1b1e      	subs	r6, r3, r4
    f5a0:	eb62 0705 	sbc.w	r7, r2, r5
    f5a4:	1a34      	subs	r4, r6, r0
    f5a6:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    f5aa:	9b01      	ldr	r3, [sp, #4]
    f5ac:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
    f5b0:	f04f 0320 	mov.w	r3, #32
    f5b4:	f3ef 8611 	mrs	r6, BASEPRI
    f5b8:	f383 8811 	msr	BASEPRI, r3
    f5bc:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    f5c0:	f7ff ff7e 	bl	f4c0 <elapsed>
	ticks = MAX(1, ticks);
    f5c4:	2c01      	cmp	r4, #1
    f5c6:	f175 0300 	sbcs.w	r3, r5, #0
    f5ca:	4621      	mov	r1, r4
    f5cc:	bfb8      	it	lt
    f5ce:	2101      	movlt	r1, #1
    f5d0:	462a      	mov	r2, r5
    f5d2:	bfb8      	it	lt
    f5d4:	2200      	movlt	r2, #0
	return list->head == list;
    f5d6:	4b24      	ldr	r3, [pc, #144]	; (f668 <z_add_timeout+0x110>)
		to->dticks = ticks + elapsed();
    f5d8:	180c      	adds	r4, r1, r0
    f5da:	eb42 75e0 	adc.w	r5, r2, r0, asr #31
    f5de:	681a      	ldr	r2, [r3, #0]
    f5e0:	e9ca 4504 	strd	r4, r5, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f5e4:	429a      	cmp	r2, r3
    f5e6:	d001      	beq.n	f5ec <z_add_timeout+0x94>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    f5e8:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    f5ea:	b952      	cbnz	r2, f602 <z_add_timeout+0xaa>
	node->prev = list->tail;
    f5ec:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    f5ee:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    f5f2:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    f5f6:	685a      	ldr	r2, [r3, #4]
    f5f8:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    f5fc:	f8c3 a004 	str.w	sl, [r3, #4]
    f600:	e014      	b.n	f62c <z_add_timeout+0xd4>
			if (t->dticks > to->dticks) {
    f602:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    f606:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    f60a:	4544      	cmp	r4, r8
    f60c:	eb75 0109 	sbcs.w	r1, r5, r9
    f610:	da1d      	bge.n	f64e <z_add_timeout+0xf6>
				t->dticks -= to->dticks;
    f612:	ebb8 0004 	subs.w	r0, r8, r4
    f616:	eb69 0105 	sbc.w	r1, r9, r5
    f61a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    f61e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    f620:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    f624:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    f628:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    f62c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f62e:	429a      	cmp	r2, r3
    f630:	d006      	beq.n	f640 <z_add_timeout+0xe8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    f632:	4592      	cmp	sl, r2
    f634:	d104      	bne.n	f640 <z_add_timeout+0xe8>
			z_clock_set_timeout(next_timeout(), false);
    f636:	f7ff ff67 	bl	f508 <next_timeout>
    f63a:	2100      	movs	r1, #0
    f63c:	f7fd fb30 	bl	cca0 <z_clock_set_timeout>
	__asm__ volatile(
    f640:	f386 8811 	msr	BASEPRI, r6
    f644:	f3bf 8f6f 	isb	sy
		}
	}
}
    f648:	b003      	add	sp, #12
    f64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    f64e:	ebb4 0008 	subs.w	r0, r4, r8
    f652:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    f656:	42ba      	cmp	r2, r7
    f658:	e9ca 0104 	strd	r0, r1, [sl, #16]
    f65c:	d0c6      	beq.n	f5ec <z_add_timeout+0x94>
    f65e:	6812      	ldr	r2, [r2, #0]
    f660:	e7c3      	b.n	f5ea <z_add_timeout+0x92>
    f662:	bf00      	nop
    f664:	20010240 	.word	0x20010240
    f668:	200100c0 	.word	0x200100c0

0000f66c <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    f66c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f670:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    f672:	f7ff fc7b 	bl	ef6c <z_time_slice>
	__asm__ volatile(
    f676:	f04f 0320 	mov.w	r3, #32
    f67a:	f3ef 8511 	mrs	r5, BASEPRI
    f67e:	f383 8811 	msr	BASEPRI, r3
    f682:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    f686:	4b2c      	ldr	r3, [pc, #176]	; (f738 <z_clock_announce+0xcc>)
    f688:	f8df 90b0 	ldr.w	r9, [pc, #176]	; f73c <z_clock_announce+0xd0>
    f68c:	4698      	mov	r8, r3
    f68e:	46cb      	mov	fp, r9
	return list->head == list;
    f690:	f8df a0ac 	ldr.w	sl, [pc, #172]	; f740 <z_clock_announce+0xd4>
    f694:	601c      	str	r4, [r3, #0]
    f696:	f8d8 c000 	ldr.w	ip, [r8]
    f69a:	f8da 4000 	ldr.w	r4, [sl]
    f69e:	4666      	mov	r6, ip
    f6a0:	e9d9 2300 	ldrd	r2, r3, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f6a4:	4554      	cmp	r4, sl
    f6a6:	e9cd 2300 	strd	r2, r3, [sp]
    f6aa:	ea4f 77e6 	mov.w	r7, r6, asr #31
    f6ae:	d00c      	beq.n	f6ca <z_clock_announce+0x5e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    f6b0:	b15c      	cbz	r4, f6ca <z_clock_announce+0x5e>
    f6b2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    f6b6:	458c      	cmp	ip, r1
    f6b8:	eb77 0302 	sbcs.w	r3, r7, r2
    f6bc:	da1b      	bge.n	f6f6 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    f6be:	ebb1 000c 	subs.w	r0, r1, ip
    f6c2:	eb62 0107 	sbc.w	r1, r2, r7
    f6c6:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    f6ca:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    f6cc:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    f6ce:	f8c8 4000 	str.w	r4, [r8]
	curr_tick += announce_remaining;
    f6d2:	18f2      	adds	r2, r6, r3
    f6d4:	9b01      	ldr	r3, [sp, #4]
    f6d6:	eb47 0303 	adc.w	r3, r7, r3
    f6da:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
    f6de:	f7ff ff13 	bl	f508 <next_timeout>
    f6e2:	4621      	mov	r1, r4
    f6e4:	f7fd fadc 	bl	cca0 <z_clock_set_timeout>
	__asm__ volatile(
    f6e8:	f385 8811 	msr	BASEPRI, r5
    f6ec:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    f6f0:	b003      	add	sp, #12
    f6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    f6f6:	2200      	movs	r2, #0
		curr_tick += dt;
    f6f8:	e9dd 6700 	ldrd	r6, r7, [sp]
		t->dticks = 0;
    f6fc:	2300      	movs	r3, #0
		curr_tick += dt;
    f6fe:	1876      	adds	r6, r6, r1
		announce_remaining -= dt;
    f700:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    f704:	eb47 77e1 	adc.w	r7, r7, r1, asr #31
		announce_remaining -= dt;
    f708:	f8c8 0000 	str.w	r0, [r8]
		t->dticks = 0;
    f70c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    f710:	4620      	mov	r0, r4
		curr_tick += dt;
    f712:	e9c9 6700 	strd	r6, r7, [r9]
		remove_timeout(t);
    f716:	f7ff fedd 	bl	f4d4 <remove_timeout>
    f71a:	f385 8811 	msr	BASEPRI, r5
    f71e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    f722:	68a3      	ldr	r3, [r4, #8]
    f724:	4798      	blx	r3
	__asm__ volatile(
    f726:	f04f 0320 	mov.w	r3, #32
    f72a:	f3ef 8511 	mrs	r5, BASEPRI
    f72e:	f383 8811 	msr	BASEPRI, r3
    f732:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    f736:	e7ae      	b.n	f696 <z_clock_announce+0x2a>
    f738:	2001038c 	.word	0x2001038c
    f73c:	20010240 	.word	0x20010240
    f740:	200100c0 	.word	0x200100c0

0000f744 <z_tick_get>:

int64_t z_tick_get(void)
{
    f744:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    f748:	f04f 0320 	mov.w	r3, #32
    f74c:	f3ef 8411 	mrs	r4, BASEPRI
    f750:	f383 8811 	msr	BASEPRI, r3
    f754:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    f758:	f7fd fb08 	bl	cd6c <z_clock_elapsed>
    f75c:	4b07      	ldr	r3, [pc, #28]	; (f77c <z_tick_get+0x38>)
    f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f762:	eb12 0b00 	adds.w	fp, r2, r0
    f766:	f143 0c00 	adc.w	ip, r3, #0
    f76a:	4658      	mov	r0, fp
    f76c:	4661      	mov	r1, ip
	__asm__ volatile(
    f76e:	f384 8811 	msr	BASEPRI, r4
    f772:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    f776:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    f77a:	bf00      	nop
    f77c:	20010240 	.word	0x20010240

0000f780 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    f780:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    f782:	4c06      	ldr	r4, [pc, #24]	; (f79c <statics_init+0x1c>)
    f784:	4d06      	ldr	r5, [pc, #24]	; (f7a0 <statics_init+0x20>)
    f786:	42ac      	cmp	r4, r5
    f788:	d301      	bcc.n	f78e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    f78a:	2000      	movs	r0, #0
    f78c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f78e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    f792:	4620      	mov	r0, r4
    f794:	f000 fec8 	bl	10528 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    f798:	3414      	adds	r4, #20
    f79a:	e7f4      	b.n	f786 <statics_init+0x6>
    f79c:	2001013c 	.word	0x2001013c
    f7a0:	2001013c 	.word	0x2001013c

0000f7a4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f7a4:	b160      	cbz	r0, f7c0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f7a6:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f7a8:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f7ac:	2b01      	cmp	r3, #1
    f7ae:	d003      	beq.n	f7b8 <sys_notify_validate+0x14>
    f7b0:	2b03      	cmp	r3, #3
    f7b2:	d105      	bne.n	f7c0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f7b4:	6803      	ldr	r3, [r0, #0]
    f7b6:	b11b      	cbz	r3, f7c0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f7b8:	2300      	movs	r3, #0
    f7ba:	6083      	str	r3, [r0, #8]
    f7bc:	4618      	mov	r0, r3
    f7be:	4770      	bx	lr
		return -EINVAL;
    f7c0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f7c4:	4770      	bx	lr

0000f7c6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f7c6:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f7c8:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    f7ca:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    f7ce:	2a03      	cmp	r2, #3
    f7d0:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    f7d4:	6081      	str	r1, [r0, #8]
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f7d6:	bf0c      	ite	eq
    f7d8:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    f7da:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f7dc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f7de:	4770      	bx	lr

0000f7e0 <arch_printk_char_out>:
}
    f7e0:	2000      	movs	r0, #0
    f7e2:	4770      	bx	lr

0000f7e4 <z_vprintk>:
{
    f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    f7e8:	2500      	movs	r5, #0
{
    f7ea:	4606      	mov	r6, r0
    f7ec:	460f      	mov	r7, r1
    f7ee:	461c      	mov	r4, r3
	int min_width = -1;
    f7f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    f7f4:	46a8      	mov	r8, r5
{
    f7f6:	b087      	sub	sp, #28
    f7f8:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
    f7fc:	f04f 0a00 	mov.w	sl, #0
					break;
    f800:	e007      	b.n	f812 <z_vprintk+0x2e>
		if (!might_format) {
    f802:	f1ba 0f00 	cmp.w	sl, #0
    f806:	d10b      	bne.n	f820 <z_vprintk+0x3c>
			if (*fmt != '%') {
    f808:	2825      	cmp	r0, #37	; 0x25
    f80a:	f000 80f0 	beq.w	f9ee <z_vprintk+0x20a>
				out((int)*fmt, ctx);
    f80e:	4639      	mov	r1, r7
    f810:	47b0      	blx	r6
	while (*fmt) {
    f812:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    f816:	2800      	cmp	r0, #0
    f818:	d1f3      	bne.n	f802 <z_vprintk+0x1e>
}
    f81a:	b007      	add	sp, #28
    f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    f820:	2864      	cmp	r0, #100	; 0x64
    f822:	d06c      	beq.n	f8fe <z_vprintk+0x11a>
    f824:	d81a      	bhi.n	f85c <z_vprintk+0x78>
    f826:	2839      	cmp	r0, #57	; 0x39
    f828:	d80a      	bhi.n	f840 <z_vprintk+0x5c>
    f82a:	2831      	cmp	r0, #49	; 0x31
    f82c:	d25e      	bcs.n	f8ec <z_vprintk+0x108>
    f82e:	282d      	cmp	r0, #45	; 0x2d
    f830:	f000 80e4 	beq.w	f9fc <z_vprintk+0x218>
    f834:	2830      	cmp	r0, #48	; 0x30
    f836:	d04a      	beq.n	f8ce <z_vprintk+0xea>
    f838:	2825      	cmp	r0, #37	; 0x25
    f83a:	d107      	bne.n	f84c <z_vprintk+0x68>
				out((int)'%', ctx);
    f83c:	4639      	mov	r1, r7
    f83e:	e00b      	b.n	f858 <z_vprintk+0x74>
			switch (*fmt) {
    f840:	2858      	cmp	r0, #88	; 0x58
    f842:	f000 80a5 	beq.w	f990 <z_vprintk+0x1ac>
    f846:	2863      	cmp	r0, #99	; 0x63
    f848:	f000 80cd 	beq.w	f9e6 <z_vprintk+0x202>
					out((int)'%', ctx);
    f84c:	4639      	mov	r1, r7
    f84e:	2025      	movs	r0, #37	; 0x25
    f850:	47b0      	blx	r6
					out((int)*fmt, ctx);
    f852:	4639      	mov	r1, r7
    f854:	f89b 0000 	ldrb.w	r0, [fp]
    f858:	47b0      	blx	r6
    f85a:	e7cf      	b.n	f7fc <z_vprintk+0x18>
			switch (*fmt) {
    f85c:	2870      	cmp	r0, #112	; 0x70
    f85e:	f000 808d 	beq.w	f97c <z_vprintk+0x198>
    f862:	d80d      	bhi.n	f880 <z_vprintk+0x9c>
    f864:	2869      	cmp	r0, #105	; 0x69
    f866:	d04a      	beq.n	f8fe <z_vprintk+0x11a>
    f868:	286c      	cmp	r0, #108	; 0x6c
    f86a:	d103      	bne.n	f874 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
    f86c:	2d6c      	cmp	r5, #108	; 0x6c
    f86e:	d12a      	bne.n	f8c6 <z_vprintk+0xe2>
					length_mod = 'L';
    f870:	254c      	movs	r5, #76	; 0x4c
    f872:	e7ce      	b.n	f812 <z_vprintk+0x2e>
			switch (*fmt) {
    f874:	2868      	cmp	r0, #104	; 0x68
    f876:	d1e9      	bne.n	f84c <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    f878:	2d68      	cmp	r5, #104	; 0x68
    f87a:	d124      	bne.n	f8c6 <z_vprintk+0xe2>
					length_mod = 'H';
    f87c:	2548      	movs	r5, #72	; 0x48
    f87e:	e7c8      	b.n	f812 <z_vprintk+0x2e>
			switch (*fmt) {
    f880:	2875      	cmp	r0, #117	; 0x75
    f882:	d03c      	beq.n	f8fe <z_vprintk+0x11a>
    f884:	d81b      	bhi.n	f8be <z_vprintk+0xda>
    f886:	2873      	cmp	r0, #115	; 0x73
    f888:	d1e0      	bne.n	f84c <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    f88a:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    f88e:	469a      	mov	sl, r3
    f890:	4652      	mov	r2, sl
    f892:	f81a 0b01 	ldrb.w	r0, [sl], #1
    f896:	2800      	cmp	r0, #0
    f898:	f040 80a0 	bne.w	f9dc <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
    f89c:	f1b8 0f03 	cmp.w	r8, #3
    f8a0:	f040 80b2 	bne.w	fa08 <z_vprintk+0x224>
					int remaining = min_width - (s - start);
    f8a4:	eba2 0a03 	sub.w	sl, r2, r3
    f8a8:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
    f8ac:	f1ba 0f00 	cmp.w	sl, #0
    f8b0:	dda4      	ble.n	f7fc <z_vprintk+0x18>
						out(' ', ctx);
    f8b2:	4639      	mov	r1, r7
    f8b4:	2020      	movs	r0, #32
    f8b6:	47b0      	blx	r6
    f8b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    f8bc:	e7f6      	b.n	f8ac <z_vprintk+0xc8>
			switch (*fmt) {
    f8be:	2878      	cmp	r0, #120	; 0x78
    f8c0:	d066      	beq.n	f990 <z_vprintk+0x1ac>
    f8c2:	287a      	cmp	r0, #122	; 0x7a
    f8c4:	d1c2      	bne.n	f84c <z_vprintk+0x68>
				} else if (length_mod == 0) {
    f8c6:	2d00      	cmp	r5, #0
    f8c8:	d1c0      	bne.n	f84c <z_vprintk+0x68>
    f8ca:	4605      	mov	r5, r0
    f8cc:	e7a1      	b.n	f812 <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
    f8ce:	f1b9 0f00 	cmp.w	r9, #0
    f8d2:	da0e      	bge.n	f8f2 <z_vprintk+0x10e>
    f8d4:	f1b8 0f00 	cmp.w	r8, #0
    f8d8:	f000 8093 	beq.w	fa02 <z_vprintk+0x21e>
					min_width = *fmt - '0';
    f8dc:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    f8e0:	f1b8 0f00 	cmp.w	r8, #0
    f8e4:	bf08      	it	eq
    f8e6:	f04f 0802 	moveq.w	r8, #2
    f8ea:	e792      	b.n	f812 <z_vprintk+0x2e>
				if (min_width < 0) {
    f8ec:	f1b9 0f00 	cmp.w	r9, #0
    f8f0:	dbf4      	blt.n	f8dc <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    f8f2:	230a      	movs	r3, #10
    f8f4:	fb03 0909 	mla	r9, r3, r9, r0
    f8f8:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    f8fc:	e7f0      	b.n	f8e0 <z_vprintk+0xfc>
				if (length_mod == 'z') {
    f8fe:	2d7a      	cmp	r5, #122	; 0x7a
    f900:	d106      	bne.n	f910 <z_vprintk+0x12c>
					d = va_arg(ap, long);
    f902:	46a2      	mov	sl, r4
    f904:	f85a 2b04 	ldr.w	r2, [sl], #4
    f908:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    f90a:	2875      	cmp	r0, #117	; 0x75
    f90c:	d125      	bne.n	f95a <z_vprintk+0x176>
    f90e:	e00f      	b.n	f930 <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
    f910:	2d6c      	cmp	r5, #108	; 0x6c
    f912:	d0f6      	beq.n	f902 <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
    f914:	2d4c      	cmp	r5, #76	; 0x4c
    f916:	d105      	bne.n	f924 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
    f918:	3407      	adds	r4, #7
    f91a:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
    f91e:	e8fa 2302 	ldrd	r2, r3, [sl], #8
    f922:	e7f2      	b.n	f90a <z_vprintk+0x126>
				} else if (*fmt == 'u') {
    f924:	2875      	cmp	r0, #117	; 0x75
    f926:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
    f92a:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
    f92c:	d114      	bne.n	f958 <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
    f92e:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    f930:	f1b8 0103 	subs.w	r1, r8, #3
    f934:	bf18      	it	ne
    f936:	2101      	movne	r1, #1
    f938:	f1b8 0f01 	cmp.w	r8, #1
    f93c:	bf0c      	ite	eq
    f93e:	2030      	moveq	r0, #48	; 0x30
    f940:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    f942:	9101      	str	r1, [sp, #4]
    f944:	210a      	movs	r1, #10
    f946:	e9cd 0902 	strd	r0, r9, [sp, #8]
    f94a:	9100      	str	r1, [sp, #0]
    f94c:	4630      	mov	r0, r6
    f94e:	4639      	mov	r1, r7
    f950:	f7fc fe48 	bl	c5e4 <print_digits.part.0>
    f954:	4654      	mov	r4, sl
    f956:	e751      	b.n	f7fc <z_vprintk+0x18>
					d = va_arg(ap, int);
    f958:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    f95a:	2a00      	cmp	r2, #0
    f95c:	f173 0100 	sbcs.w	r1, r3, #0
    f960:	dae6      	bge.n	f930 <z_vprintk+0x14c>
					out((int)'-', ctx);
    f962:	4639      	mov	r1, r7
    f964:	202d      	movs	r0, #45	; 0x2d
    f966:	e9cd 2304 	strd	r2, r3, [sp, #16]
    f96a:	47b0      	blx	r6
					d = -d;
    f96c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f970:	4252      	negs	r2, r2
    f972:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    f976:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    f97a:	e7d9      	b.n	f930 <z_vprintk+0x14c>
				out('0', ctx);
    f97c:	4639      	mov	r1, r7
    f97e:	2030      	movs	r0, #48	; 0x30
    f980:	47b0      	blx	r6
				out('x', ctx);
    f982:	4639      	mov	r1, r7
    f984:	2078      	movs	r0, #120	; 0x78
    f986:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
    f988:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
    f98c:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
    f990:	f89b 3000 	ldrb.w	r3, [fp]
    f994:	2b70      	cmp	r3, #112	; 0x70
    f996:	d103      	bne.n	f9a0 <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
    f998:	f854 2b04 	ldr.w	r2, [r4], #4
    f99c:	2300      	movs	r3, #0
    f99e:	e00a      	b.n	f9b6 <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
    f9a0:	2d6c      	cmp	r5, #108	; 0x6c
    f9a2:	d0f9      	beq.n	f998 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
    f9a4:	2d4c      	cmp	r5, #76	; 0x4c
    f9a6:	d1f7      	bne.n	f998 <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
    f9a8:	3407      	adds	r4, #7
    f9aa:	f024 0307 	bic.w	r3, r4, #7
    f9ae:	461c      	mov	r4, r3
    f9b0:	685b      	ldr	r3, [r3, #4]
    f9b2:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    f9b6:	f1b8 0103 	subs.w	r1, r8, #3
    f9ba:	bf18      	it	ne
    f9bc:	2101      	movne	r1, #1
    f9be:	f1b8 0f01 	cmp.w	r8, #1
    f9c2:	bf0c      	ite	eq
    f9c4:	2030      	moveq	r0, #48	; 0x30
    f9c6:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    f9c8:	9101      	str	r1, [sp, #4]
    f9ca:	2110      	movs	r1, #16
    f9cc:	e9cd 0902 	strd	r0, r9, [sp, #8]
    f9d0:	9100      	str	r1, [sp, #0]
    f9d2:	4630      	mov	r0, r6
    f9d4:	4639      	mov	r1, r7
    f9d6:	f7fc fe05 	bl	c5e4 <print_digits.part.0>
    f9da:	e70f      	b.n	f7fc <z_vprintk+0x18>
					out((int)(*s++), ctx);
    f9dc:	4639      	mov	r1, r7
    f9de:	9304      	str	r3, [sp, #16]
    f9e0:	47b0      	blx	r6
    f9e2:	9b04      	ldr	r3, [sp, #16]
    f9e4:	e754      	b.n	f890 <z_vprintk+0xac>
				out(c, ctx);
    f9e6:	4639      	mov	r1, r7
    f9e8:	f854 0b04 	ldr.w	r0, [r4], #4
    f9ec:	e734      	b.n	f858 <z_vprintk+0x74>
				length_mod = 0;
    f9ee:	4655      	mov	r5, sl
				padding = PAD_NONE;
    f9f0:	46d0      	mov	r8, sl
				min_width = -1;
    f9f2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    f9f6:	f04f 0a01 	mov.w	sl, #1
    f9fa:	e70a      	b.n	f812 <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
    f9fc:	f04f 0803 	mov.w	r8, #3
    fa00:	e707      	b.n	f812 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    fa02:	f04f 0801 	mov.w	r8, #1
    fa06:	e704      	b.n	f812 <z_vprintk+0x2e>
			might_format = 0;
    fa08:	4682      	mov	sl, r0
    fa0a:	e702      	b.n	f812 <z_vprintk+0x2e>

0000fa0c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    fa0c:	b40f      	push	{r0, r1, r2, r3}
    fa0e:	b507      	push	{r0, r1, r2, lr}
    fa10:	a904      	add	r1, sp, #16
    fa12:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    fa16:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    fa18:	f7fc fe34 	bl	c684 <vprintk>
	}
	va_end(ap);
}
    fa1c:	b003      	add	sp, #12
    fa1e:	f85d eb04 	ldr.w	lr, [sp], #4
    fa22:	b004      	add	sp, #16
    fa24:	4770      	bx	lr

0000fa26 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fa26:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    fa28:	f013 0307 	ands.w	r3, r3, #7
    fa2c:	d105      	bne.n	fa3a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    fa2e:	6803      	ldr	r3, [r0, #0]
    fa30:	2b00      	cmp	r3, #0
		evt = EVT_START;
    fa32:	bf0c      	ite	eq
    fa34:	2000      	moveq	r0, #0
    fa36:	2003      	movne	r0, #3
    fa38:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    fa3a:	2b02      	cmp	r3, #2
    fa3c:	d105      	bne.n	fa4a <process_recheck+0x24>
		   && (mgr->refs == 0)) {
    fa3e:	8b43      	ldrh	r3, [r0, #26]
    fa40:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    fa42:	bf14      	ite	ne
    fa44:	2000      	movne	r0, #0
    fa46:	2004      	moveq	r0, #4
    fa48:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    fa4a:	2b01      	cmp	r3, #1
    fa4c:	d105      	bne.n	fa5a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    fa4e:	6803      	ldr	r3, [r0, #0]
    fa50:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    fa52:	bf0c      	ite	eq
    fa54:	2000      	moveq	r0, #0
    fa56:	2005      	movne	r0, #5
    fa58:	4770      	bx	lr
	int evt = EVT_NOP;
    fa5a:	2000      	movs	r0, #0
}
    fa5c:	4770      	bx	lr

0000fa5e <notify_one>:
{
    fa5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa62:	460d      	mov	r5, r1
    fa64:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    fa66:	4619      	mov	r1, r3
    fa68:	1d28      	adds	r0, r5, #4
{
    fa6a:	4690      	mov	r8, r2
    fa6c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    fa6e:	f7ff feaa 	bl	f7c6 <sys_notify_finalize>
	if (cb) {
    fa72:	4604      	mov	r4, r0
    fa74:	b138      	cbz	r0, fa86 <notify_one+0x28>
		cb(mgr, cli, state, res);
    fa76:	4633      	mov	r3, r6
    fa78:	4642      	mov	r2, r8
    fa7a:	4629      	mov	r1, r5
    fa7c:	4638      	mov	r0, r7
    fa7e:	46a4      	mov	ip, r4
}
    fa80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    fa84:	4760      	bx	ip
}
    fa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fa8a <transition_complete>:
{
    fa8a:	b410      	push	{r4}
	__asm__ volatile(
    fa8c:	f04f 0420 	mov.w	r4, #32
    fa90:	f3ef 8211 	mrs	r2, BASEPRI
    fa94:	f384 8811 	msr	BASEPRI, r4
    fa98:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    fa9c:	6141      	str	r1, [r0, #20]
}
    fa9e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    faa0:	2101      	movs	r1, #1
    faa2:	f7fc bdfd 	b.w	c6a0 <process_event>

0000faa6 <validate_args>:
{
    faa6:	b510      	push	{r4, lr}
    faa8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    faaa:	b140      	cbz	r0, fabe <validate_args+0x18>
    faac:	b139      	cbz	r1, fabe <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    faae:	1d08      	adds	r0, r1, #4
    fab0:	f7ff fe78 	bl	f7a4 <sys_notify_validate>
	if ((rv == 0)
    fab4:	b928      	cbnz	r0, fac2 <validate_args+0x1c>
	    && ((cli->notify.flags
    fab6:	68a3      	ldr	r3, [r4, #8]
    fab8:	f033 0303 	bics.w	r3, r3, #3
    fabc:	d001      	beq.n	fac2 <validate_args+0x1c>
		rv = -EINVAL;
    fabe:	f06f 0015 	mvn.w	r0, #21
}
    fac2:	bd10      	pop	{r4, pc}

0000fac4 <onoff_manager_init>:
{
    fac4:	b538      	push	{r3, r4, r5, lr}
    fac6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    fac8:	4605      	mov	r5, r0
    faca:	b158      	cbz	r0, fae4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    facc:	b151      	cbz	r1, fae4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    face:	680b      	ldr	r3, [r1, #0]
    fad0:	b143      	cbz	r3, fae4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    fad2:	684b      	ldr	r3, [r1, #4]
    fad4:	b133      	cbz	r3, fae4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    fad6:	221c      	movs	r2, #28
    fad8:	2100      	movs	r1, #0
    fada:	f000 fa56 	bl	ff8a <memset>
	return 0;
    fade:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    fae0:	612c      	str	r4, [r5, #16]
}
    fae2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    fae4:	f06f 0015 	mvn.w	r0, #21
    fae8:	e7fb      	b.n	fae2 <onoff_manager_init+0x1e>

0000faea <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    faea:	b570      	push	{r4, r5, r6, lr}
    faec:	4604      	mov	r4, r0
    faee:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    faf0:	f7ff ffd9 	bl	faa6 <validate_args>

	if (rv < 0) {
    faf4:	1e06      	subs	r6, r0, #0
    faf6:	db31      	blt.n	fb5c <onoff_request+0x72>
    faf8:	f04f 0320 	mov.w	r3, #32
    fafc:	f3ef 8111 	mrs	r1, BASEPRI
    fb00:	f383 8811 	msr	BASEPRI, r3
    fb04:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    fb08:	f64f 76ff 	movw	r6, #65535	; 0xffff
    fb0c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fb0e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    fb10:	42b3      	cmp	r3, r6
    fb12:	f000 0207 	and.w	r2, r0, #7
    fb16:	d02e      	beq.n	fb76 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    fb18:	2a02      	cmp	r2, #2
    fb1a:	d10e      	bne.n	fb3a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    fb1c:	3301      	adds	r3, #1
    fb1e:	8363      	strh	r3, [r4, #26]
	rv = state;
    fb20:	4616      	mov	r6, r2
		notify = true;
    fb22:	2301      	movs	r3, #1
	__asm__ volatile(
    fb24:	f381 8811 	msr	BASEPRI, r1
    fb28:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    fb2c:	b1b3      	cbz	r3, fb5c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    fb2e:	2300      	movs	r3, #0
    fb30:	4629      	mov	r1, r5
    fb32:	4620      	mov	r0, r4
    fb34:	f7ff ff93 	bl	fa5e <notify_one>
    fb38:	e010      	b.n	fb5c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    fb3a:	0783      	lsls	r3, r0, #30
    fb3c:	d001      	beq.n	fb42 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    fb3e:	2a06      	cmp	r2, #6
    fb40:	d10e      	bne.n	fb60 <onoff_request+0x76>
	parent->next = child;
    fb42:	2300      	movs	r3, #0
    fb44:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    fb46:	6863      	ldr	r3, [r4, #4]
    fb48:	b993      	cbnz	r3, fb70 <onoff_request+0x86>
	list->head = node;
    fb4a:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
    fb4e:	4616      	mov	r6, r2
    fb50:	b962      	cbnz	r2, fb6c <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    fb52:	460a      	mov	r2, r1
    fb54:	4620      	mov	r0, r4
    fb56:	2102      	movs	r1, #2
    fb58:	f7fc fda2 	bl	c6a0 <process_event>
		}
	}

	return rv;
}
    fb5c:	4630      	mov	r0, r6
    fb5e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    fb60:	2a05      	cmp	r2, #5
    fb62:	bf0c      	ite	eq
    fb64:	f06f 0622 	mvneq.w	r6, #34	; 0x22
    fb68:	f06f 0604 	mvnne.w	r6, #4
    fb6c:	2300      	movs	r3, #0
    fb6e:	e7d9      	b.n	fb24 <onoff_request+0x3a>
	parent->next = child;
    fb70:	601d      	str	r5, [r3, #0]
	list->tail = node;
    fb72:	6065      	str	r5, [r4, #4]
    fb74:	e7eb      	b.n	fb4e <onoff_request+0x64>
		rv = -EAGAIN;
    fb76:	f06f 060a 	mvn.w	r6, #10
    fb7a:	e7f7      	b.n	fb6c <onoff_request+0x82>

0000fb7c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    fb7c:	4604      	mov	r4, r0
    fb7e:	b508      	push	{r3, lr}
    fb80:	4608      	mov	r0, r1
    fb82:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    fb84:	461a      	mov	r2, r3
    fb86:	47a0      	blx	r4
	return z_impl_k_current_get();
    fb88:	f7ff fbbe 	bl	f308 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    fb8c:	f7fd fb54 	bl	d238 <z_impl_k_thread_abort>

0000fb90 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    fb90:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    fb92:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    fb96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    fb9a:	bf2c      	ite	cs
    fb9c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    fba0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    fba4:	4770      	bx	lr

0000fba6 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    fba6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    fbaa:	6880      	ldr	r0, [r0, #8]
    fbac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    fbb0:	bf2c      	ite	cs
    fbb2:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    fbb6:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    fbba:	4770      	bx	lr

0000fbbc <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    fbbc:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fbbe:	2201      	movs	r2, #1
    fbc0:	f7ff ffe6 	bl	fb90 <chunk_field>
}
    fbc4:	0840      	lsrs	r0, r0, #1
    fbc6:	bd08      	pop	{r3, pc}

0000fbc8 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    fbc8:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    fbca:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    fbce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fbd2:	d308      	bcc.n	fbe6 <set_chunk_used+0x1e>
		if (used) {
    fbd4:	684b      	ldr	r3, [r1, #4]
    fbd6:	b11a      	cbz	r2, fbe0 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
    fbd8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
    fbdc:	604b      	str	r3, [r1, #4]
    fbde:	4770      	bx	lr
    fbe0:	f023 0301 	bic.w	r3, r3, #1
    fbe4:	e7fa      	b.n	fbdc <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    fbe6:	884b      	ldrh	r3, [r1, #2]
    fbe8:	b11a      	cbz	r2, fbf2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
    fbea:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    fbee:	804b      	strh	r3, [r1, #2]
		}
	}
}
    fbf0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
    fbf2:	f023 0301 	bic.w	r3, r3, #1
    fbf6:	e7fa      	b.n	fbee <set_chunk_used+0x26>

0000fbf8 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    fbf8:	0053      	lsls	r3, r2, #1
    fbfa:	2201      	movs	r2, #1
    fbfc:	f7ff bfd3 	b.w	fba6 <chunk_set>

0000fc00 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    fc00:	6883      	ldr	r3, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    fc02:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    fc04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fc08:	bf2c      	ite	cs
    fc0a:	2302      	movcs	r3, #2
    fc0c:	2301      	movcc	r3, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    fc0e:	1ac0      	subs	r0, r0, r3
	return 31 - __builtin_clz(usable_sz);
    fc10:	fab0 f080 	clz	r0, r0
}
    fc14:	f1c0 001f 	rsb	r0, r0, #31
    fc18:	4770      	bx	lr

0000fc1a <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    fc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc1e:	4604      	mov	r4, r0
    fc20:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
    fc22:	f7ff ffcb 	bl	fbbc <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
    fc26:	68a3      	ldr	r3, [r4, #8]
    fc28:	4601      	mov	r1, r0
    fc2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fc2e:	d301      	bcc.n	fc34 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    fc30:	2801      	cmp	r0, #1
    fc32:	d035      	beq.n	fca0 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    fc34:	4620      	mov	r0, r4
    fc36:	f7ff ffe3 	bl	fc00 <bucket_idx>
	if (b->next == 0) {
    fc3a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    fc3e:	6916      	ldr	r6, [r2, #16]
    fc40:	b99e      	cbnz	r6, fc6a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    fc42:	2301      	movs	r3, #1
    fc44:	fa03 f000 	lsl.w	r0, r3, r0
    fc48:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    fc4a:	4629      	mov	r1, r5
    fc4c:	4303      	orrs	r3, r0
    fc4e:	60e3      	str	r3, [r4, #12]
    fc50:	4620      	mov	r0, r4
		b->next = c;
    fc52:	6115      	str	r5, [r2, #16]
    fc54:	462b      	mov	r3, r5
    fc56:	2202      	movs	r2, #2
    fc58:	f7ff ffa5 	bl	fba6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    fc5c:	2203      	movs	r2, #3
    fc5e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    fc60:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    fc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fc66:	f7ff bf9e 	b.w	fba6 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    fc6a:	2202      	movs	r2, #2
    fc6c:	4631      	mov	r1, r6
    fc6e:	4620      	mov	r0, r4
    fc70:	f7ff ff8e 	bl	fb90 <chunk_field>
    fc74:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    fc76:	4603      	mov	r3, r0
    fc78:	2202      	movs	r2, #2
    fc7a:	4629      	mov	r1, r5
    fc7c:	4620      	mov	r0, r4
    fc7e:	f7ff ff92 	bl	fba6 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    fc82:	4633      	mov	r3, r6
    fc84:	2203      	movs	r2, #3
    fc86:	4629      	mov	r1, r5
    fc88:	4620      	mov	r0, r4
    fc8a:	f7ff ff8c 	bl	fba6 <chunk_set>
    fc8e:	2203      	movs	r2, #3
    fc90:	4639      	mov	r1, r7
    fc92:	462b      	mov	r3, r5
    fc94:	4620      	mov	r0, r4
    fc96:	f7ff ff86 	bl	fba6 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    fc9a:	2202      	movs	r2, #2
    fc9c:	4631      	mov	r1, r6
    fc9e:	e7df      	b.n	fc60 <free_list_add+0x46>
    fca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fca4 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    fca4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcaa:	bf2c      	ite	cs
    fcac:	2508      	movcs	r5, #8
    fcae:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    fcb0:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    fcb2:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    fcb4:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    fcb6:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    fcb8:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    fcba:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    fcbe:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    fcc2:	1b2d      	subs	r5, r5, r4
    fcc4:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    fcc6:	6004      	str	r4, [r0, #0]
	h->len = buf_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    fcc8:	4629      	mov	r1, r5
	h->chunk0_hdr_area = 0;
    fcca:	e9c4 2300 	strd	r2, r3, [r4]
	h->avail_buckets = 0;
    fcce:	e9c4 5202 	strd	r5, r2, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    fcd2:	4620      	mov	r0, r4
    fcd4:	f7ff ff94 	bl	fc00 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    fcd8:	4613      	mov	r3, r2
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    fcda:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    fcdc:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    fcde:	1c47      	adds	r7, r0, #1
    fce0:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    fce2:	f104 0110 	add.w	r1, r4, #16
    fce6:	42bb      	cmp	r3, r7
    fce8:	db29      	blt.n	fd3e <sys_heap_init+0x9a>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    fcea:	4632      	mov	r2, r6
    fcec:	4620      	mov	r0, r4
    fcee:	2100      	movs	r1, #0
    fcf0:	f7ff ff82 	bl	fbf8 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    fcf4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    fcf6:	4620      	mov	r0, r4
    fcf8:	2201      	movs	r2, #1
    fcfa:	2100      	movs	r1, #0
    fcfc:	f7ff ff64 	bl	fbc8 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    fd00:	463a      	mov	r2, r7
    fd02:	4631      	mov	r1, r6
    fd04:	f7ff ff78 	bl	fbf8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    fd08:	4633      	mov	r3, r6
    fd0a:	4631      	mov	r1, r6
    fd0c:	4620      	mov	r0, r4
    fd0e:	2200      	movs	r2, #0
    fd10:	f7ff ff49 	bl	fba6 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    fd14:	4629      	mov	r1, r5
    fd16:	4620      	mov	r0, r4
    fd18:	2200      	movs	r2, #0
    fd1a:	f7ff ff6d 	bl	fbf8 <set_chunk_size>
    fd1e:	463b      	mov	r3, r7
    fd20:	4629      	mov	r1, r5
    fd22:	4620      	mov	r0, r4
    fd24:	2200      	movs	r2, #0
    fd26:	f7ff ff3e 	bl	fba6 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    fd2a:	4629      	mov	r1, r5
    fd2c:	4620      	mov	r0, r4
    fd2e:	2201      	movs	r2, #1
    fd30:	f7ff ff4a 	bl	fbc8 <set_chunk_used>

	free_list_add(h, chunk0_size);
    fd34:	4631      	mov	r1, r6
}
    fd36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    fd3a:	f7ff bf6e 	b.w	fc1a <free_list_add>
		h->buckets[i].next = 0;
    fd3e:	f841 2b04 	str.w	r2, [r1], #4
	for (int i = 0; i < nb_buckets; i++) {
    fd42:	3301      	adds	r3, #1
    fd44:	e7cf      	b.n	fce6 <sys_heap_init+0x42>

0000fd46 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    fd46:	4770      	bx	lr

0000fd48 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    fd48:	f7fe b9b8 	b.w	e0bc <SystemInit>

0000fd4c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    fd4c:	230c      	movs	r3, #12
    fd4e:	68c2      	ldr	r2, [r0, #12]
    fd50:	b2c9      	uxtb	r1, r1
    fd52:	fb01 2303 	mla	r3, r1, r3, r2
    fd56:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    fd58:	f000 0007 	and.w	r0, r0, #7
    fd5c:	4770      	bx	lr

0000fd5e <set_off_state>:
	__asm__ volatile(
    fd5e:	f04f 0320 	mov.w	r3, #32
    fd62:	f3ef 8211 	mrs	r2, BASEPRI
    fd66:	f383 8811 	msr	BASEPRI, r3
    fd6a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    fd6e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    fd70:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    fd74:	d001      	beq.n	fd7a <set_off_state+0x1c>
    fd76:	428b      	cmp	r3, r1
    fd78:	d107      	bne.n	fd8a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    fd7a:	2301      	movs	r3, #1
    fd7c:	6003      	str	r3, [r0, #0]
	int err = 0;
    fd7e:	2000      	movs	r0, #0
	__asm__ volatile(
    fd80:	f382 8811 	msr	BASEPRI, r2
    fd84:	f3bf 8f6f 	isb	sy
}
    fd88:	4770      	bx	lr
		err = -EPERM;
    fd8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fd8e:	e7f7      	b.n	fd80 <set_off_state+0x22>

0000fd90 <set_starting_state>:
{
    fd90:	b510      	push	{r4, lr}
	__asm__ volatile(
    fd92:	f04f 0320 	mov.w	r3, #32
    fd96:	f3ef 8211 	mrs	r2, BASEPRI
    fd9a:	f383 8811 	msr	BASEPRI, r3
    fd9e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    fda2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    fda4:	f003 0407 	and.w	r4, r3, #7
    fda8:	2c01      	cmp	r4, #1
    fdaa:	d106      	bne.n	fdba <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    fdac:	6001      	str	r1, [r0, #0]
	int err = 0;
    fdae:	2000      	movs	r0, #0
	__asm__ volatile(
    fdb0:	f382 8811 	msr	BASEPRI, r2
    fdb4:	f3bf 8f6f 	isb	sy
}
    fdb8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    fdba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    fdbe:	428b      	cmp	r3, r1
		err = -EBUSY;
    fdc0:	bf14      	ite	ne
    fdc2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    fdc6:	f06f 000f 	mvneq.w	r0, #15
    fdca:	e7f1      	b.n	fdb0 <set_starting_state+0x20>

0000fdcc <set_on_state>:
	__asm__ volatile(
    fdcc:	f04f 0320 	mov.w	r3, #32
    fdd0:	f3ef 8211 	mrs	r2, BASEPRI
    fdd4:	f383 8811 	msr	BASEPRI, r3
    fdd8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    fddc:	6803      	ldr	r3, [r0, #0]
    fdde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fde2:	f043 0302 	orr.w	r3, r3, #2
    fde6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    fde8:	f382 8811 	msr	BASEPRI, r2
    fdec:	f3bf 8f6f 	isb	sy
}
    fdf0:	4770      	bx	lr

0000fdf2 <onoff_started_callback>:
	return &data->mgr[type];
    fdf2:	68c3      	ldr	r3, [r0, #12]
	notify(mgr, 0);
    fdf4:	201c      	movs	r0, #28
{
    fdf6:	b410      	push	{r4}
	return &data->mgr[type];
    fdf8:	b2cc      	uxtb	r4, r1
	notify(mgr, 0);
    fdfa:	fb04 3000 	mla	r0, r4, r0, r3
    fdfe:	2100      	movs	r1, #0
}
    fe00:	bc10      	pop	{r4}
	notify(mgr, 0);
    fe02:	4710      	bx	r2

0000fe04 <blocking_start_callback>:
	z_impl_k_sem_give(sem);
    fe04:	4610      	mov	r0, r2
    fe06:	f7ff ba85 	b.w	f314 <z_impl_k_sem_give>

0000fe0a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    fe0a:	2000      	movs	r0, #0
    fe0c:	f7fe b9a0 	b.w	e150 <nrfx_clock_stop>

0000fe10 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    fe10:	2000      	movs	r0, #0
    fe12:	f7fe b96b 	b.w	e0ec <nrfx_clock_start>

0000fe16 <api_stop>:
{
    fe16:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    fe18:	230c      	movs	r3, #12
    fe1a:	b2cc      	uxtb	r4, r1
    fe1c:	4363      	muls	r3, r4
{
    fe1e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    fe20:	68c0      	ldr	r0, [r0, #12]
    fe22:	3340      	adds	r3, #64	; 0x40
    fe24:	2180      	movs	r1, #128	; 0x80
    fe26:	4418      	add	r0, r3
    fe28:	f7ff ff99 	bl	fd5e <set_off_state>
	if (err < 0) {
    fe2c:	2800      	cmp	r0, #0
    fe2e:	db05      	blt.n	fe3c <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    fe30:	6869      	ldr	r1, [r5, #4]
    fe32:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    fe36:	684b      	ldr	r3, [r1, #4]
    fe38:	4798      	blx	r3
	return 0;
    fe3a:	2000      	movs	r0, #0
}
    fe3c:	bd38      	pop	{r3, r4, r5, pc}

0000fe3e <api_start>:
{
    fe3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    fe42:	250c      	movs	r5, #12
    fe44:	b2ce      	uxtb	r6, r1
    fe46:	4375      	muls	r5, r6
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    fe48:	68c4      	ldr	r4, [r0, #12]
{
    fe4a:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    fe4c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    fe50:	2180      	movs	r1, #128	; 0x80
    fe52:	4420      	add	r0, r4
{
    fe54:	4690      	mov	r8, r2
	err = set_starting_state(&subdata->flags, ctx);
    fe56:	f7ff ff9b 	bl	fd90 <set_starting_state>
	if (err < 0) {
    fe5a:	2800      	cmp	r0, #0
    fe5c:	db0b      	blt.n	fe76 <api_start+0x38>
	subdata->cb = data->cb;
    fe5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fe62:	442c      	add	r4, r5
    fe64:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
    fe66:	f8d8 3008 	ldr.w	r3, [r8, #8]
    fe6a:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
    fe6c:	687b      	ldr	r3, [r7, #4]
    fe6e:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    fe72:	4798      	blx	r3
	return 0;
    fe74:	2000      	movs	r0, #0
}
    fe76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fe7a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    fe7a:	4770      	bx	lr

0000fe7c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    fe7c:	4770      	bx	lr

0000fe7e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    fe7e:	2100      	movs	r1, #0
    fe80:	2001      	movs	r0, #1
    fe82:	f000 b804 	b.w	fe8e <z_arm_fatal_error>

0000fe86 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    fe86:	6e83      	ldr	r3, [r0, #104]	; 0x68
    fe88:	f383 880b 	msr	PSPLIM, r3
}
    fe8c:	4770      	bx	lr

0000fe8e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    fe8e:	f000 ba3c 	b.w	1030a <z_fatal_error>

0000fe92 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    fe92:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    fe94:	6800      	ldr	r0, [r0, #0]
    fe96:	f000 ba38 	b.w	1030a <z_fatal_error>

0000fe9a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    fe9a:	b508      	push	{r3, lr}
	handler();
    fe9c:	f7fd f882 	bl	cfa4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    fea0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    fea4:	f7fd b8c4 	b.w	d030 <z_arm_exc_exit>

0000fea8 <mpu_configure_region>:
{
    fea8:	b530      	push	{r4, r5, lr}
	region_conf.base = new_region->start;
    feaa:	680b      	ldr	r3, [r1, #0]
{
    feac:	b085      	sub	sp, #20
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    feae:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    feb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    feb4:	890d      	ldrh	r5, [r1, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    feb6:	3c01      	subs	r4, #1
	region_conf.base = new_region->start;
    feb8:	9300      	str	r3, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
    feba:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    febc:	f023 031f 	bic.w	r3, r3, #31
    fec0:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    fec2:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
    fec6:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    feca:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    fece:	280f      	cmp	r0, #15
	p_attr->mair_idx = attr->mair_idx;
    fed0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    fed4:	9303      	str	r3, [sp, #12]
    fed6:	4604      	mov	r4, r0
    fed8:	d805      	bhi.n	fee6 <mpu_configure_region+0x3e>
	region_init(index, region_conf);
    feda:	4669      	mov	r1, sp
    fedc:	f7fd fa02 	bl	d2e4 <region_init>
}
    fee0:	4620      	mov	r0, r4
    fee2:	b005      	add	sp, #20
    fee4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    fee6:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    feea:	e7f9      	b.n	fee0 <mpu_configure_region+0x38>

0000feec <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    feec:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    fef0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    fef4:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    fef6:	bf08      	it	eq
    fef8:	f06f 0015 	mvneq.w	r0, #21
    fefc:	4770      	bx	lr

0000fefe <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    fefe:	3801      	subs	r0, #1
    ff00:	3901      	subs	r1, #1
    ff02:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    ff06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ff0a:	4293      	cmp	r3, r2
    ff0c:	d101      	bne.n	ff12 <strcmp+0x14>
    ff0e:	2b00      	cmp	r3, #0
    ff10:	d1f7      	bne.n	ff02 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    ff12:	1a98      	subs	r0, r3, r2
    ff14:	4770      	bx	lr

0000ff16 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    ff16:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    ff18:	b15a      	cbz	r2, ff32 <memcmp+0x1c>
    ff1a:	3901      	subs	r1, #1
    ff1c:	1884      	adds	r4, r0, r2
    ff1e:	f810 2b01 	ldrb.w	r2, [r0], #1
    ff22:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    ff26:	42a0      	cmp	r0, r4
    ff28:	d001      	beq.n	ff2e <memcmp+0x18>
    ff2a:	429a      	cmp	r2, r3
    ff2c:	d0f7      	beq.n	ff1e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    ff2e:	1ad0      	subs	r0, r2, r3
}
    ff30:	bd10      	pop	{r4, pc}
		return 0;
    ff32:	4610      	mov	r0, r2
    ff34:	e7fc      	b.n	ff30 <memcmp+0x1a>

0000ff36 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    ff36:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    ff38:	ea81 0400 	eor.w	r4, r1, r0
    ff3c:	07a5      	lsls	r5, r4, #30
    ff3e:	4603      	mov	r3, r0
    ff40:	d00b      	beq.n	ff5a <memcpy+0x24>
    ff42:	3b01      	subs	r3, #1
    ff44:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    ff46:	4291      	cmp	r1, r2
    ff48:	d11a      	bne.n	ff80 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    ff4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    ff4c:	2a00      	cmp	r2, #0
    ff4e:	d0fc      	beq.n	ff4a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    ff50:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    ff54:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    ff56:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    ff5a:	079c      	lsls	r4, r3, #30
    ff5c:	d1f6      	bne.n	ff4c <memcpy+0x16>
    ff5e:	0895      	lsrs	r5, r2, #2
    ff60:	00ac      	lsls	r4, r5, #2
    ff62:	1f1e      	subs	r6, r3, #4
    ff64:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    ff66:	42b9      	cmp	r1, r7
    ff68:	d105      	bne.n	ff76 <memcpy+0x40>
    ff6a:	f06f 0603 	mvn.w	r6, #3
    ff6e:	4423      	add	r3, r4
    ff70:	fb06 2205 	mla	r2, r6, r5, r2
    ff74:	e7e5      	b.n	ff42 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    ff76:	f851 cb04 	ldr.w	ip, [r1], #4
    ff7a:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    ff7e:	e7f2      	b.n	ff66 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    ff80:	f811 4b01 	ldrb.w	r4, [r1], #1
    ff84:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    ff88:	e7dd      	b.n	ff46 <memcpy+0x10>

0000ff8a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    ff8a:	4603      	mov	r3, r0
{
    ff8c:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    ff8e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    ff90:	079c      	lsls	r4, r3, #30
    ff92:	d110      	bne.n	ffb6 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    ff94:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    ff98:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    ff9c:	0894      	lsrs	r4, r2, #2
    ff9e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    ffa2:	42b3      	cmp	r3, r6
    ffa4:	d10d      	bne.n	ffc2 <memset+0x38>
    ffa6:	f06f 0503 	mvn.w	r5, #3
    ffaa:	fb05 2404 	mla	r4, r5, r4, r2
    ffae:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    ffb0:	42a3      	cmp	r3, r4
    ffb2:	d109      	bne.n	ffc8 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    ffb4:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    ffb6:	2a00      	cmp	r2, #0
    ffb8:	d0fc      	beq.n	ffb4 <memset+0x2a>
		*(d_byte++) = c_byte;
    ffba:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ffbe:	3a01      	subs	r2, #1
    ffc0:	e7e6      	b.n	ff90 <memset+0x6>
		*(d_word++) = c_word;
    ffc2:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    ffc6:	e7ec      	b.n	ffa2 <memset+0x18>
		*(d_byte++) = c_byte;
    ffc8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    ffcc:	e7f0      	b.n	ffb0 <memset+0x26>

0000ffce <_stdout_hook_default>:
}
    ffce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ffd2:	4770      	bx	lr

0000ffd4 <thingy91_board_init>:
		LOG_ERR("thingy91_magpio_configure failed with error: %d", err);
		return err;
	}

	return 0;
}
    ffd4:	2000      	movs	r0, #0
    ffd6:	4770      	bx	lr

0000ffd8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ffd8:	6843      	ldr	r3, [r0, #4]
}
    ffda:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ffdc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ffde:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    ffe0:	600b      	str	r3, [r1, #0]
}
    ffe2:	4770      	bx	lr

0000ffe4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ffe4:	6843      	ldr	r3, [r0, #4]
    ffe6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ffe8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ffea:	4042      	eors	r2, r0
    ffec:	400a      	ands	r2, r1
    ffee:	4042      	eors	r2, r0
    p_reg->OUT = value;
    fff0:	605a      	str	r2, [r3, #4]
}
    fff2:	2000      	movs	r0, #0
    fff4:	4770      	bx	lr

0000fff6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fff6:	6843      	ldr	r3, [r0, #4]
}
    fff8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    fffa:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    fffc:	6099      	str	r1, [r3, #8]
}
    fffe:	4770      	bx	lr

00010000 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10000:	6843      	ldr	r3, [r0, #4]
}
   10002:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   10004:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   10006:	60d9      	str	r1, [r3, #12]
}
   10008:	4770      	bx	lr

0001000a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1000a:	6843      	ldr	r3, [r0, #4]
}
   1000c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1000e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   10010:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   10012:	4059      	eors	r1, r3
    p_reg->OUT = value;
   10014:	6051      	str	r1, [r2, #4]
}
   10016:	4770      	bx	lr

00010018 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   10018:	68c3      	ldr	r3, [r0, #12]
{
   1001a:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1001c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1001e:	b158      	cbz	r0, 10038 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10020:	2400      	movs	r4, #0
   10022:	4281      	cmp	r1, r0
   10024:	d113      	bne.n	1004e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   10026:	6808      	ldr	r0, [r1, #0]
   10028:	b95c      	cbnz	r4, 10042 <gpio_nrfx_manage_callback+0x2a>
   1002a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1002c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1002e:	42a1      	cmp	r1, r4
   10030:	d100      	bne.n	10034 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   10032:	6098      	str	r0, [r3, #8]
	parent->next = child;
   10034:	2000      	movs	r0, #0
   10036:	6008      	str	r0, [r1, #0]
	if (set) {
   10038:	b972      	cbnz	r2, 10058 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1003a:	2000      	movs	r0, #0
}
   1003c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1003e:	4628      	mov	r0, r5
   10040:	e7ef      	b.n	10022 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   10042:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   10044:	6898      	ldr	r0, [r3, #8]
   10046:	4281      	cmp	r1, r0
	list->tail = node;
   10048:	bf08      	it	eq
   1004a:	609c      	streq	r4, [r3, #8]
   1004c:	e7f2      	b.n	10034 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1004e:	6805      	ldr	r5, [r0, #0]
	return node->next;
   10050:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10052:	2d00      	cmp	r5, #0
   10054:	d1f3      	bne.n	1003e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   10056:	b13a      	cbz	r2, 10068 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   10058:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1005a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1005c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1005e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   10060:	2800      	cmp	r0, #0
   10062:	d1ea      	bne.n	1003a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   10064:	6099      	str	r1, [r3, #8]
   10066:	e7e9      	b.n	1003c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   10068:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1006c:	e7e6      	b.n	1003c <gpio_nrfx_manage_callback+0x24>

0001006e <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1006e:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   10070:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   10072:	d405      	bmi.n	10080 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   10074:	f3c1 0242 	ubfx	r2, r1, #1, #3
   10078:	2a01      	cmp	r2, #1
   1007a:	d004      	beq.n	10086 <i2c_nrfx_twim_configure+0x18>
   1007c:	2a02      	cmp	r2, #2
   1007e:	d00b      	beq.n	10098 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   10080:	f06f 0015 	mvn.w	r0, #21
}
   10084:	4770      	bx	lr
    p_reg->FREQUENCY = frequency;
   10086:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1008a:	681b      	ldr	r3, [r3, #0]
   1008c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   10090:	68c3      	ldr	r3, [r0, #12]
	return 0;
   10092:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   10094:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
   10096:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   10098:	681b      	ldr	r3, [r3, #0]
   1009a:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1009e:	e7f5      	b.n	1008c <i2c_nrfx_twim_configure+0x1e>

000100a0 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   100a0:	2301      	movs	r3, #1
   100a2:	fa03 f101 	lsl.w	r1, r3, r1
   100a6:	68c3      	ldr	r3, [r0, #12]
   100a8:	681b      	ldr	r3, [r3, #0]
   100aa:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   100ac:	bf18      	it	ne
   100ae:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   100b2:	b112      	cbz	r2, 100ba <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   100b4:	6883      	ldr	r3, [r0, #8]
   100b6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   100b8:	4718      	bx	r3
   100ba:	6883      	ldr	r3, [r0, #8]
   100bc:	691b      	ldr	r3, [r3, #16]
   100be:	e7fb      	b.n	100b8 <gpio_pin_set+0x18>

000100c0 <_spi_context_cs_control.isra.5>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   100c0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   100c2:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   100c4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   100c6:	b1fd      	cbz	r5, 10108 <_spi_context_cs_control.isra.5+0x48>
   100c8:	68ab      	ldr	r3, [r5, #8]
   100ca:	b1eb      	cbz	r3, 10108 <_spi_context_cs_control.isra.5+0x48>
   100cc:	6818      	ldr	r0, [r3, #0]
   100ce:	b1d8      	cbz	r0, 10108 <_spi_context_cs_control.isra.5+0x48>
		if (on) {
   100d0:	b151      	cbz	r1, 100e8 <_spi_context_cs_control.isra.5+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   100d2:	7a19      	ldrb	r1, [r3, #8]
   100d4:	2201      	movs	r2, #1
   100d6:	f7ff ffe3 	bl	100a0 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   100da:	6823      	ldr	r3, [r4, #0]
   100dc:	689b      	ldr	r3, [r3, #8]
   100de:	6858      	ldr	r0, [r3, #4]
}
   100e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   100e4:	f000 b9da 	b.w	1049c <z_impl_k_busy_wait>
			if (!force_off &&
   100e8:	b912      	cbnz	r2, 100f0 <_spi_context_cs_control.isra.5+0x30>
   100ea:	88aa      	ldrh	r2, [r5, #4]
   100ec:	0492      	lsls	r2, r2, #18
   100ee:	d40b      	bmi.n	10108 <_spi_context_cs_control.isra.5+0x48>
			k_busy_wait(ctx->config->cs->delay);
   100f0:	6858      	ldr	r0, [r3, #4]
   100f2:	f000 f9d3 	bl	1049c <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   100f6:	6823      	ldr	r3, [r4, #0]
   100f8:	2200      	movs	r2, #0
   100fa:	689b      	ldr	r3, [r3, #8]
   100fc:	7a19      	ldrb	r1, [r3, #8]
   100fe:	6818      	ldr	r0, [r3, #0]
}
   10100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   10104:	f7ff bfcc 	b.w	100a0 <gpio_pin_set>
}
   10108:	bd38      	pop	{r3, r4, r5, pc}

0001010a <spi_context_unlock_unconditionally>:
{
   1010a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1010c:	2201      	movs	r2, #1
   1010e:	2100      	movs	r1, #0
{
   10110:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   10112:	f7ff ffd5 	bl	100c0 <_spi_context_cs_control.isra.5>
	if (!k_sem_count_get(&ctx->lock)) {
   10116:	68e3      	ldr	r3, [r4, #12]
   10118:	b923      	cbnz	r3, 10124 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   1011a:	1d20      	adds	r0, r4, #4
}
   1011c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10120:	f7ff b8f8 	b.w	f314 <z_impl_k_sem_give>
   10124:	bd10      	pop	{r4, pc}

00010126 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   10126:	68c0      	ldr	r0, [r0, #12]
{
   10128:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1012a:	6803      	ldr	r3, [r0, #0]
   1012c:	428b      	cmp	r3, r1
   1012e:	d106      	bne.n	1013e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   10130:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
   10134:	b934      	cbnz	r4, 10144 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   10136:	f7ff ffe8 	bl	1010a <spi_context_unlock_unconditionally>
	return 0;
   1013a:	4620      	mov	r0, r4
}
   1013c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1013e:	f06f 0015 	mvn.w	r0, #21
   10142:	e7fb      	b.n	1013c <spi_nrfx_release+0x16>
		return -EBUSY;
   10144:	f06f 000f 	mvn.w	r0, #15
   10148:	e7f8      	b.n	1013c <spi_nrfx_release+0x16>

0001014a <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   1014a:	7803      	ldrb	r3, [r0, #0]
   1014c:	2b00      	cmp	r3, #0
   1014e:	d135      	bne.n	101bc <event_handler+0x72>
	if (!ctx->tx_len) {
   10150:	6bca      	ldr	r2, [r1, #60]	; 0x3c
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   10152:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   10154:	b182      	cbz	r2, 10178 <event_handler+0x2e>
	if (len > ctx->tx_len) {
   10156:	4293      	cmp	r3, r2
   10158:	d80e      	bhi.n	10178 <event_handler+0x2e>
	ctx->tx_len -= len;
   1015a:	1ad2      	subs	r2, r2, r3
   1015c:	63ca      	str	r2, [r1, #60]	; 0x3c
	if (!ctx->tx_len) {
   1015e:	bb0a      	cbnz	r2, 101a4 <event_handler+0x5a>
		ctx->tx_count--;
   10160:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   10162:	3a01      	subs	r2, #1
   10164:	62ca      	str	r2, [r1, #44]	; 0x2c
		if (ctx->tx_count) {
   10166:	b30a      	cbz	r2, 101ac <event_handler+0x62>
			ctx->current_tx++;
   10168:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   1016a:	f102 0008 	add.w	r0, r2, #8
   1016e:	6288      	str	r0, [r1, #40]	; 0x28
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   10170:	6890      	ldr	r0, [r2, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   10172:	68d2      	ldr	r2, [r2, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   10174:	6388      	str	r0, [r1, #56]	; 0x38
			ctx->tx_len = ctx->current_tx->len / dfs;
   10176:	63ca      	str	r2, [r1, #60]	; 0x3c
	if (!ctx->rx_len) {
   10178:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1017a:	b182      	cbz	r2, 1019e <event_handler+0x54>
	if (len > ctx->rx_len) {
   1017c:	4293      	cmp	r3, r2
   1017e:	d80e      	bhi.n	1019e <event_handler+0x54>
	ctx->rx_len -= len;
   10180:	1ad2      	subs	r2, r2, r3
   10182:	644a      	str	r2, [r1, #68]	; 0x44
	if (!ctx->rx_len) {
   10184:	b9a2      	cbnz	r2, 101b0 <event_handler+0x66>
		ctx->rx_count--;
   10186:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   10188:	3b01      	subs	r3, #1
   1018a:	634b      	str	r3, [r1, #52]	; 0x34
		if (ctx->rx_count) {
   1018c:	b1a3      	cbz	r3, 101b8 <event_handler+0x6e>
			ctx->current_rx++;
   1018e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   10190:	f103 0208 	add.w	r2, r3, #8
   10194:	630a      	str	r2, [r1, #48]	; 0x30
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   10196:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   10198:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1019a:	640a      	str	r2, [r1, #64]	; 0x40
			ctx->rx_len = ctx->current_rx->len / dfs;
   1019c:	644b      	str	r3, [r1, #68]	; 0x44
		transfer_next_chunk(dev_data->dev);
   1019e:	6c88      	ldr	r0, [r1, #72]	; 0x48
   101a0:	f7fd bcdc 	b.w	db5c <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   101a4:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   101a6:	2a00      	cmp	r2, #0
   101a8:	d0e6      	beq.n	10178 <event_handler+0x2e>
		ctx->tx_buf += dfs * len;
   101aa:	441a      	add	r2, r3
   101ac:	638a      	str	r2, [r1, #56]	; 0x38
   101ae:	e7e3      	b.n	10178 <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   101b0:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   101b2:	2a00      	cmp	r2, #0
   101b4:	d0f3      	beq.n	1019e <event_handler+0x54>
		ctx->rx_buf += dfs * len;
   101b6:	4413      	add	r3, r2
   101b8:	640b      	str	r3, [r1, #64]	; 0x40
   101ba:	e7f0      	b.n	1019e <event_handler+0x54>
}
   101bc:	4770      	bx	lr

000101be <uarte_nrfx_config_get>:
{
   101be:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   101c0:	68c3      	ldr	r3, [r0, #12]
   101c2:	3304      	adds	r3, #4
   101c4:	e893 0003 	ldmia.w	r3, {r0, r1}
   101c8:	e882 0003 	stmia.w	r2, {r0, r1}
}
   101cc:	2000      	movs	r0, #0
   101ce:	4770      	bx	lr

000101d0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   101d0:	6843      	ldr	r3, [r0, #4]
   101d2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   101d4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   101d8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   101dc:	4770      	bx	lr

000101de <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   101de:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   101e0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   101e2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   101e4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   101e8:	b148      	cbz	r0, 101fe <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101ea:	2000      	movs	r0, #0
	*c = data->rx_data;
   101ec:	7c12      	ldrb	r2, [r2, #16]
   101ee:	700a      	strb	r2, [r1, #0]
   101f0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   101f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101f8:	2201      	movs	r2, #1
   101fa:	601a      	str	r2, [r3, #0]
	return 0;
   101fc:	4770      	bx	lr
		return -1;
   101fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10202:	4770      	bx	lr

00010204 <uarte_nrfx_poll_out>:
{
   10204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   10208:	6843      	ldr	r3, [r0, #4]
{
   1020a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   1020e:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   10210:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   10212:	f000 f93d 	bl	10490 <k_is_in_isr>
   10216:	bb98      	cbnz	r0, 10280 <uarte_nrfx_poll_out+0x7c>
   10218:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1021a:	f04f 0801 	mov.w	r8, #1
   1021e:	f106 070c 	add.w	r7, r6, #12
   10222:	e8d7 3fef 	ldaex	r3, [r7]
   10226:	2b00      	cmp	r3, #0
   10228:	d103      	bne.n	10232 <uarte_nrfx_poll_out+0x2e>
   1022a:	e8c7 8fe2 	stlex	r2, r8, [r7]
   1022e:	2a00      	cmp	r2, #0
   10230:	d1f7      	bne.n	10222 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   10232:	d007      	beq.n	10244 <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   10234:	2021      	movs	r0, #33	; 0x21
   10236:	2100      	movs	r1, #0
   10238:	3d01      	subs	r5, #1
   1023a:	f7ff f845 	bl	f2c8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1023e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   10242:	d1ee      	bne.n	10222 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10244:	2300      	movs	r3, #0
   10246:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1024a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1024e:	f10d 0307 	add.w	r3, sp, #7
   10252:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10256:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10258:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   1025c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10260:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10262:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   10266:	b923      	cbnz	r3, 10272 <uarte_nrfx_poll_out+0x6e>
   10268:	2001      	movs	r0, #1
   1026a:	f000 f811 	bl	10290 <nrfx_busy_wait>
   1026e:	3d01      	subs	r5, #1
   10270:	d1f7      	bne.n	10262 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10272:	2301      	movs	r3, #1
   10274:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   10276:	2300      	movs	r3, #0
   10278:	60f3      	str	r3, [r6, #12]
}
   1027a:	b002      	add	sp, #8
   1027c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   10280:	2301      	movs	r3, #1
   10282:	60f3      	str	r3, [r6, #12]
   10284:	e7de      	b.n	10244 <uarte_nrfx_poll_out+0x40>

00010286 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   10286:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   10288:	2000      	movs	r0, #0
   1028a:	f7fc ffb7 	bl	d1fc <sys_arch_reboot>

0001028e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1028e:	4700      	bx	r0

00010290 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   10290:	f000 b904 	b.w	1049c <z_impl_k_busy_wait>

00010294 <nrfx_clock_enable>:
{
   10294:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   10296:	2005      	movs	r0, #5
   10298:	f7fc fdac 	bl	cdf4 <arch_irq_is_enabled>
   1029c:	b920      	cbnz	r0, 102a8 <nrfx_clock_enable+0x14>
}
   1029e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   102a2:	2005      	movs	r0, #5
   102a4:	f7fc bd96 	b.w	cdd4 <arch_irq_enable>
   102a8:	bd08      	pop	{r3, pc}

000102aa <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   102aa:	7b0b      	ldrb	r3, [r1, #12]
   102ac:	2b03      	cmp	r3, #3
   102ae:	d82a      	bhi.n	10306 <xfer_completeness_check+0x5c>
   102b0:	e8df f003 	tbb	[pc, r3]
   102b4:	021a2622 	.word	0x021a2622
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   102b8:	688b      	ldr	r3, [r1, #8]
   102ba:	035a      	lsls	r2, r3, #13
   102bc:	d504      	bpl.n	102c8 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   102be:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   102c2:	690a      	ldr	r2, [r1, #16]
   102c4:	429a      	cmp	r2, r3
   102c6:	d107      	bne.n	102d8 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   102c8:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   102ca:	035b      	lsls	r3, r3, #13
   102cc:	d41b      	bmi.n	10306 <xfer_completeness_check+0x5c>
   102ce:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   102d2:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   102d4:	429a      	cmp	r2, r3
   102d6:	d016      	beq.n	10306 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   102d8:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   102da:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   102dc:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   102e0:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
   102e4:	4618      	mov	r0, r3
   102e6:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   102e8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   102ec:	690a      	ldr	r2, [r1, #16]
   102ee:	429a      	cmp	r2, r3
   102f0:	d1f2      	bne.n	102d8 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   102f2:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   102f6:	e7ec      	b.n	102d2 <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   102f8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   102fc:	690a      	ldr	r2, [r1, #16]
   102fe:	e7e9      	b.n	102d4 <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   10300:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   10304:	e7fa      	b.n	102fc <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   10306:	2001      	movs	r0, #1
}
   10308:	4770      	bx	lr

0001030a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1030a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1030c:	4606      	mov	r6, r0
   1030e:	460f      	mov	r7, r1
	__asm__ volatile(
   10310:	f04f 0320 	mov.w	r3, #32
   10314:	f3ef 8511 	mrs	r5, BASEPRI
   10318:	f383 8811 	msr	BASEPRI, r3
   1031c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   10320:	f7fe fff2 	bl	f308 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   10324:	4639      	mov	r1, r7
   10326:	4604      	mov	r4, r0
   10328:	4630      	mov	r0, r6
   1032a:	f7ff ffac 	bl	10286 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1032e:	f385 8811 	msr	BASEPRI, r5
   10332:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   10336:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   10338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1033c:	f7fc bf7c 	b.w	d238 <z_impl_k_thread_abort>

00010340 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   10340:	f7ff bd9c 	b.w	fe7c <z_clock_idle_exit>

00010344 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10344:	4603      	mov	r3, r0
   10346:	b920      	cbnz	r0, 10352 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10348:	f3ef 8205 	mrs	r2, IPSR
   1034c:	b90a      	cbnz	r2, 10352 <z_reschedule_irqlock+0xe>
   1034e:	f7fc bd27 	b.w	cda0 <arch_swap>
   10352:	f383 8811 	msr	BASEPRI, r3
   10356:	f3bf 8f6f 	isb	sy
}
   1035a:	4770      	bx	lr

0001035c <z_reschedule_unlocked>:
	__asm__ volatile(
   1035c:	f04f 0320 	mov.w	r3, #32
   10360:	f3ef 8011 	mrs	r0, BASEPRI
   10364:	f383 8811 	msr	BASEPRI, r3
   10368:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1036c:	f7ff bfea 	b.w	10344 <z_reschedule_irqlock>

00010370 <unpend_thread_no_timeout>:
{
   10370:	b510      	push	{r4, lr}
   10372:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   10374:	4601      	mov	r1, r0
   10376:	6880      	ldr	r0, [r0, #8]
   10378:	f7fe fd1c 	bl	edb4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1037c:	7b63      	ldrb	r3, [r4, #13]
   1037e:	f023 0302 	bic.w	r3, r3, #2
   10382:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   10384:	2300      	movs	r3, #0
   10386:	60a3      	str	r3, [r4, #8]
}
   10388:	bd10      	pop	{r4, pc}

0001038a <z_priq_dumb_best>:
	return list->head == list;
   1038a:	6803      	ldr	r3, [r0, #0]
}
   1038c:	4298      	cmp	r0, r3
   1038e:	bf14      	ite	ne
   10390:	4618      	movne	r0, r3
   10392:	2000      	moveq	r0, #0
   10394:	4770      	bx	lr

00010396 <z_ready_thread>:
{
   10396:	b510      	push	{r4, lr}
   10398:	f04f 0320 	mov.w	r3, #32
   1039c:	f3ef 8411 	mrs	r4, BASEPRI
   103a0:	f383 8811 	msr	BASEPRI, r3
   103a4:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   103a8:	f7fe fd5a 	bl	ee60 <ready_thread>
	__asm__ volatile(
   103ac:	f384 8811 	msr	BASEPRI, r4
   103b0:	f3bf 8f6f 	isb	sy
}
   103b4:	bd10      	pop	{r4, pc}

000103b6 <z_thread_timeout>:
{
   103b6:	b570      	push	{r4, r5, r6, lr}
   103b8:	4604      	mov	r4, r0
	__asm__ volatile(
   103ba:	f04f 0320 	mov.w	r3, #32
   103be:	f3ef 8611 	mrs	r6, BASEPRI
   103c2:	f383 8811 	msr	BASEPRI, r3
   103c6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   103ca:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   103ce:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   103d2:	b113      	cbz	r3, 103da <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   103d4:	4628      	mov	r0, r5
   103d6:	f7ff ffcb 	bl	10370 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   103da:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   103de:	4628      	mov	r0, r5
   103e0:	f023 0314 	bic.w	r3, r3, #20
   103e4:	f804 3c0b 	strb.w	r3, [r4, #-11]
   103e8:	f7fe fd3a 	bl	ee60 <ready_thread>
	__asm__ volatile(
   103ec:	f386 8811 	msr	BASEPRI, r6
   103f0:	f3bf 8f6f 	isb	sy
}
   103f4:	bd70      	pop	{r4, r5, r6, pc}

000103f6 <add_to_waitq_locked>:
{
   103f6:	b538      	push	{r3, r4, r5, lr}
   103f8:	4604      	mov	r4, r0
   103fa:	460d      	mov	r5, r1
	unready_thread(thread);
   103fc:	f7fe fe88 	bl	f110 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   10400:	7b63      	ldrb	r3, [r4, #13]
   10402:	f043 0302 	orr.w	r3, r3, #2
   10406:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   10408:	b17d      	cbz	r5, 1042a <add_to_waitq_locked+0x34>
   1040a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1040c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1040e:	429d      	cmp	r5, r3
   10410:	d012      	beq.n	10438 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10412:	b18b      	cbz	r3, 10438 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   10414:	f994 200e 	ldrsb.w	r2, [r4, #14]
   10418:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1041c:	4291      	cmp	r1, r2
   1041e:	dd05      	ble.n	1042c <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   10420:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   10422:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   10426:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   10428:	605c      	str	r4, [r3, #4]
}
   1042a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1042c:	6869      	ldr	r1, [r5, #4]
   1042e:	428b      	cmp	r3, r1
   10430:	d002      	beq.n	10438 <add_to_waitq_locked+0x42>
   10432:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10434:	2b00      	cmp	r3, #0
   10436:	d1ef      	bne.n	10418 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   10438:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1043a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1043c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1043e:	686b      	ldr	r3, [r5, #4]
   10440:	601c      	str	r4, [r3, #0]
	list->tail = node;
   10442:	606c      	str	r4, [r5, #4]
}
   10444:	e7f1      	b.n	1042a <add_to_waitq_locked+0x34>

00010446 <z_unpend_first_thread>:
{
   10446:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   10448:	f04f 0320 	mov.w	r3, #32
   1044c:	f3ef 8211 	mrs	r2, BASEPRI
   10450:	f383 8811 	msr	BASEPRI, r3
   10454:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   10458:	f7ff ff97 	bl	1038a <z_priq_dumb_best>
   1045c:	4604      	mov	r4, r0
	__asm__ volatile(
   1045e:	f382 8811 	msr	BASEPRI, r2
   10462:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   10466:	b188      	cbz	r0, 1048c <z_unpend_first_thread+0x46>
	__asm__ volatile(
   10468:	f04f 0320 	mov.w	r3, #32
   1046c:	f3ef 8511 	mrs	r5, BASEPRI
   10470:	f383 8811 	msr	BASEPRI, r3
   10474:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   10478:	f7ff ff7a 	bl	10370 <unpend_thread_no_timeout>
	__asm__ volatile(
   1047c:	f385 8811 	msr	BASEPRI, r5
   10480:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   10484:	f104 0018 	add.w	r0, r4, #24
   10488:	f000 f80a 	bl	104a0 <z_abort_timeout>
}
   1048c:	4620      	mov	r0, r4
   1048e:	bd38      	pop	{r3, r4, r5, pc}

00010490 <k_is_in_isr>:
   10490:	f3ef 8005 	mrs	r0, IPSR
}
   10494:	3000      	adds	r0, #0
   10496:	bf18      	it	ne
   10498:	2001      	movne	r0, #1
   1049a:	4770      	bx	lr

0001049c <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   1049c:	f7fc b9f2 	b.w	c884 <arch_busy_wait>

000104a0 <z_abort_timeout>:
{
   104a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   104a2:	f04f 0220 	mov.w	r2, #32
   104a6:	f3ef 8411 	mrs	r4, BASEPRI
   104aa:	f382 8811 	msr	BASEPRI, r2
   104ae:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   104b2:	6803      	ldr	r3, [r0, #0]
   104b4:	b13b      	cbz	r3, 104c6 <z_abort_timeout+0x26>
			remove_timeout(to);
   104b6:	f7ff f80d 	bl	f4d4 <remove_timeout>
			ret = 0;
   104ba:	2000      	movs	r0, #0
	__asm__ volatile(
   104bc:	f384 8811 	msr	BASEPRI, r4
   104c0:	f3bf 8f6f 	isb	sy
}
   104c4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   104c6:	f06f 0015 	mvn.w	r0, #21
   104ca:	e7f7      	b.n	104bc <z_abort_timeout+0x1c>

000104cc <z_get_next_timeout_expiry>:
{
   104cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   104ce:	f04f 0320 	mov.w	r3, #32
   104d2:	f3ef 8411 	mrs	r4, BASEPRI
   104d6:	f383 8811 	msr	BASEPRI, r3
   104da:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   104de:	f7ff f813 	bl	f508 <next_timeout>
	__asm__ volatile(
   104e2:	f384 8811 	msr	BASEPRI, r4
   104e6:	f3bf 8f6f 	isb	sy
}
   104ea:	bd10      	pop	{r4, pc}

000104ec <z_set_timeout_expiry>:
{
   104ec:	b570      	push	{r4, r5, r6, lr}
   104ee:	4604      	mov	r4, r0
   104f0:	460e      	mov	r6, r1
	__asm__ volatile(
   104f2:	f04f 0320 	mov.w	r3, #32
   104f6:	f3ef 8511 	mrs	r5, BASEPRI
   104fa:	f383 8811 	msr	BASEPRI, r3
   104fe:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   10502:	f7ff f801 	bl	f508 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   10506:	2801      	cmp	r0, #1
   10508:	dd05      	ble.n	10516 <z_set_timeout_expiry+0x2a>
   1050a:	42a0      	cmp	r0, r4
   1050c:	dd03      	ble.n	10516 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1050e:	4631      	mov	r1, r6
   10510:	4620      	mov	r0, r4
   10512:	f7fc fbc5 	bl	cca0 <z_clock_set_timeout>
	__asm__ volatile(
   10516:	f385 8811 	msr	BASEPRI, r5
   1051a:	f3bf 8f6f 	isb	sy
}
   1051e:	bd70      	pop	{r4, r5, r6, pc}

00010520 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   10520:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   10522:	f7ff f90f 	bl	f744 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   10526:	bd08      	pop	{r3, pc}

00010528 <k_heap_init>:
{
   10528:	b410      	push	{r4}
   1052a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1052e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   10532:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   10534:	f7ff bbb6 	b.w	fca4 <sys_heap_init>

00010538 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   10538:	4770      	bx	lr
